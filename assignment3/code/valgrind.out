==27822== Memcheck, a memory error detector
==27822== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==27822== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==27822== Command: keyvalue test1.in test2.in test3.in
==27822== 
::::::::::::::::::::::::::::::::
test1.in
::::::::::::::::::::::::::::::::
test1.in: 1: a=b
a = b
test1.in: 2: key=value
key = value
test1.in: 3: this=is a test
this = is a test
test1.in: 4: this
this
this = is a test
test1.in: 5: key
key
key = value
test1.in: 6: a
a
a = b
test1.in: 7: =
==27822== Invalid read of size 4
==27822==    at 0x405086: __gnu_cxx::__exchange_and_add_single(int*, int) (atomicity.h:67)
==27822==    by 0x405100: __gnu_cxx::__exchange_and_add_dispatch(int*, int) (atomicity.h:84)
==27822==    by 0x405529: std::string::_Rep::_M_dispose(std::allocator<char> const&) (basic_string.h:3266)
==27822==    by 0x40534F: std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (basic_string.h:3640)
==27822==    by 0x40841D: xpair<std::string const, std::string>::~xpair() (xpair.h:20)
==27822==    by 0x408A51: listmap<std::string, std::string, xless<std::string> >::node::~node() (listmap.h:31)
==27822==    by 0x408B10: listmap<std::string, std::string, xless<std::string> >::erase(listmap<std::string, std::string, xless<std::string> >::iterator) (listmap.tcc:112)
==27822==    by 0x406E4D: catfile_helper(std::istream&, std::string const&) (main.cpp:119)
==27822==    by 0x4076BF: main (main.cpp:193)
==27822==  Address 0xfffffffffffffff8 is not stack'd, malloc'd or (recently) free'd
==27822== 
==27822== 
==27822== Process terminating with default action of signal 11 (SIGSEGV)
==27822==  Access not within mapped region at address 0xFFFFFFFFFFFFFFF8
==27822==    at 0x405086: __gnu_cxx::__exchange_and_add_single(int*, int) (atomicity.h:67)
==27822==    by 0x405100: __gnu_cxx::__exchange_and_add_dispatch(int*, int) (atomicity.h:84)
==27822==    by 0x405529: std::string::_Rep::_M_dispose(std::allocator<char> const&) (basic_string.h:3266)
==27822==    by 0x40534F: std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (basic_string.h:3640)
==27822==    by 0x40841D: xpair<std::string const, std::string>::~xpair() (xpair.h:20)
==27822==    by 0x408A51: listmap<std::string, std::string, xless<std::string> >::node::~node() (listmap.h:31)
==27822==    by 0x408B10: listmap<std::string, std::string, xless<std::string> >::erase(listmap<std::string, std::string, xless<std::string> >::iterator) (listmap.tcc:112)
==27822==    by 0x406E4D: catfile_helper(std::istream&, std::string const&) (main.cpp:119)
==27822==    by 0x4076BF: main (main.cpp:193)
==27822==  If you believe this happened as a result of a stack
==27822==  overflow in your program's main thread (unlikely but
==27822==  possible), you can try to increase the size of the
==27822==  main thread stack using the --main-stacksize= flag.
==27822==  The main thread stack size used in this run was 8388608.
==27822== 
==27822== HEAP SUMMARY:
==27822==     in use at exit: 14,063 bytes in 38 blocks
==27822==   total heap usage: 10,192 allocs, 10,154 frees, 193,241 bytes allocated
==27822== 
==27822== LEAK SUMMARY:
==27822==    definitely lost: 0 bytes in 0 blocks
==27822==    indirectly lost: 0 bytes in 0 blocks
==27822==      possibly lost: 0 bytes in 0 blocks
==27822==    still reachable: 14,063 bytes in 38 blocks
==27822==                       of which reachable via heuristic:
==27822==                         stdstring          : 390 bytes in 13 blocks
==27822==         suppressed: 0 bytes in 0 blocks
==27822== Rerun with --leak-check=full to see details of leaked memory
==27822== 
==27822== For counts of detected and suppressed errors, rerun with: -v
==27822== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
