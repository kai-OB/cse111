head	1.19;
access;
symbols;
locks;
comment	@// @;


1.19
date	2021.05.23.03.58.22;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.05.23.03.51.17;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.05.23.03.38.58;	author -;	state -;
branches;
next	1.16;

1.16
date	2021.05.23.02.49.45;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.05.22.09.49.32;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.05.22.09.29.26;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.02.02.02.58.18;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.10.22.23.50.08;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.01.25.22.19.29;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.01.25.22.09.09;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.07.21.04.00.33;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.04.29.02.23.13;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.03.23.39.46;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.07.09.18.50.34;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.30.02.20.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.25.01.14.51;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.25.01.02.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.31.00.09.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.30.22.46.04;	author -;	state -;
branches;
next	;


desc
@@


1.19
log
@-
@
text
@// $Id: main.cpp,v 1.18 2021-05-22 20:51:17-07 - - $
//Kai O'Brien (kimobrie@@ucsc.edu)

#include <cstdlib>
#include <exception>
#include <iostream>
#include <string>
#include <unistd.h>
//--------
#include <cassert>
#include <cerrno>
#include <fstream>
#include <iomanip>
#include <regex>
#include <stdexcept>
#include <typeinfo>

using namespace std;

#include "listmap.h"
#include "xpair.h"
#include "util.h"

//m.insert(xpair{key,value})

using str_str_map = listmap<string,string>;
using str_str_pair = str_str_map::value_type;
str_str_map test;//listmap

void scan_options (int argc, char** argv) {
   opterr = 0;
   for (;;) {
      int option = getopt (argc, argv, "@@:");
      if (option == EOF) break;
      switch (option) {
         case '@@':
            debugflags::setflags (optarg);
            break;
         default:
            complain() << "-" << char (optopt) << ": invalid option"
                       << endl;
            break;
      }
   }
}

void whitespace(string *line){
   //trim leading whitespace and returns position of =sign or -1
   unsigned long first = 0;//0 or 1?
   while(first<line->size() &&line->at(first) == ' '){
      line->erase(first,1);//at first position
      if(line->at(first)=='='){
        
      }
      ++first;
   }
   int mid = 1;
   while(first<line->size()){
      if(line->at(first)=='='){
      }
      if(line->at(first)=='\n'){
         line->erase(first,mid);//at first position
      }
      else{
         ++mid;
      }
      ++first;
   }
   //trims trailing whitespace
    ssize_t last = line->size()-1;//0 or 1?
   while(last>0 &&line->at(last) == ' '){
      if(line->at(last)=='='){
      }
      
      line->erase(last,line->size()-1);//at first position
      --last;
   }
}

size_t eq_pos(string *line){
   size_t eq = 1234;
   size_t  first =  0;
   while(first<line->size()){
      if(line->at(first) == '='){
         eq = first;
         break;
      }
      ++first;
   }
   
   return eq;
}

//insert stuff to map when key = value not found
//just do insert because already wrote code for that
void catfile_helper (istream& infile, const string& filename) {
   static string colons (32, ':');
   cout << colons << endl << filename << endl << colons << endl;
   regex comment_regex {R"(^\s*(#.*)?$)"};
   regex key_value_regex {R"(^\s*(.*?)\s*=\s*(.*?)\s*$)"};
   regex trimmed_regex {R"(^\s*([^=]+?)\s*$)"};
   int i = 1;
   for(;;) {
      string line;
      getline (infile, line);
      whitespace(&line);//trim whitespace
      //-----regex code
 //      cout << "input: \"" << line << "\"" << endl;
      if(line.length()>0){
         smatch result;
         if (regex_search (line, result, comment_regex)) {//prints twice maybe idk
            cout<<filename<<": "<<i<<": "<<line<<endl;
            cout << "comment." << endl;
         }
         //key = value, if found, replace val, if not, insert
         else if (regex_search (line, result, key_value_regex)) {
            cout<<filename<<": "<<i<<": "<<line<<endl;
            if(line.at(line.size()-1)=='='&&test.find(result[1])!=test.end() ){
               test.erase(test.find(result[1]));//valgrind
            }
            else{
            cout<< result[1]<< " = " <<result[2]<<endl;
         // cout << "key  : \"" << result[1] << "\"" << endl;
         //   cout << "value: \"" << result[2] << "\"" << endl;
            test.insert(str_str_pair(result[1],result[2]));
            }
         }
         //  key = , =, or =value
         else if (regex_search (line, result, trimmed_regex)) {
            cout<<filename<<": "<<i<<": "<<line<<endl;
            cout<< result[1]<< endl;
            //if its the key(can be more than 1 word key
            //) and nothing else, print the value
            size_t eq_pos1 = eq_pos(&line);
            //if no eq sign
            //key 
            if(eq_pos1==1234){
               auto it = test.find(result[1]);
               if(test.find(result[1])!=test.end()){
                cout<< it->first<< " = " <<it->second<<endl;
                  
               }
               else{
                  cout<< result[1]<< ": " <<"key not found"<<endl;
               }
            }
            
           if(line.at(0)=='='){
              //if the = is the only thing
              if(line.size()==1){
                  for (auto itor = test.begin(); itor != test.end(); ++itor) {
                     cout<< itor->first<< " = " <<itor->second<<endl;
                  }
              }
              else{  //result[2] or 1? iterate and match

              }
           }
            

            //cout << "query: \"" << result[1] << "\"" << endl;
         }else {
            assert (false and "This can not happen.");
         }
         //-----
         
      // cout << line << endl;
         i++;
      }
      if (infile.eof()) break;
   }
}
// node* temp = new node(anchor(), anchor(), pair);

int main (int argc, char** argv) {
   sys_info::execname (argv[0]);
   scan_options (argc, argv);
//-------------------------matchlines
const string cin_name = "-";
int status = 0;
   string progname ( (argv[0]));
   vector<string> filenames (&argv[1], &argv[argc]);
   if (filenames.size() == 0) filenames.push_back (cin_name);
   for (const auto& filename: filenames) {
      if (filename == cin_name) catfile_helper (cin, filename);
      else {
         ifstream infile (filename);
         if (infile.fail()) {
            status = 1;
            cerr << progname << ": " << filename << ": "
                 << strerror (errno) << endl;
         }else {
            catfile_helper (infile, filename);
            infile.close();
         }
      }
   }
   return status;
  // cout << "EXIT_SUCCESS" << endl;
  // return EXIT_SUCCESS;
}

@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.16 2021-05-22 19:49:45-07 - - $
d118 1
a118 1
            if(line.at(line.size()-1)=='='&&test.find(result[1])!=test.end()){
@


1.17
log
@-
@
text
@d118 2
a119 2
            if(line.at(line.size()-1)=='='){
               test.erase(test.find(result[1]));
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.15 2021-05-22 02:49:32-07 - - $
d113 1
a113 1
           // cout << "comment." << endl;
d118 4
d123 1
a123 1
        //  cout << "key  : \"" << result[1] << "\"" << endl;
d126 1
a126 1
         
d131 1
a131 1
           // cout<< result[1]<< endl;
d139 1
a139 1
               if(test.find(result[1])){
d147 12
a158 9
            else if(eq_pos1==line.size()-1){
           //    cout<<"in else if";
               test.erase(test.find(line));
            }
            /*else{
               //str_str_pair(result[1],result[2]);
               //test.insert(   xpair{line.substr(0,eq_pos),line.substr(eq_pos,line.size())});
               test.insert(str_str_pair(result[1],result[2]));
            }*/
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.14 2021-05-22 02:29:26-07 - - $
d28 1
a45 25
/*
xpair <string, str_str_pair> regex_helper( string &line){
   regex comment_regex {R"(^\s*(#.*)?$)"};
   regex key_value_regex {R"(^\s*(.*?)\s*=\s*(.*?)\s*$)"};
   regex trimmed_regex {R"(^\s*([^=]+?)\s*$)"};
   for (;;) {
      string line;
      getline (cin, line);
      if (cin.eof()) break;
      cout << "input: \"" << line << "\"" << endl;
      smatch result;
      if (regex_search (line, result, comment_regex)) {
         cout << "Comment or empty line." << endl;
      }else if (regex_search (line, result, key_value_regex)) {
         cout << "key  : \"" << result[1] << "\"" << endl;
         cout << "value: \"" << result[2] << "\"" << endl;
      }else if (regex_search (line, result, trimmed_regex)) {
         cout << "query: \"" << result[1] << "\"" << endl;
      }else {
         assert (false and "This can not happen.");
      }
   }
   //return 0;
  
}*/
a46 1
//do a trimfile helper function
d48 1
a48 2
   //trim leading whitespace
  
d52 3
d59 2
d70 1
a70 1
    ssize_t last = 0;//0 or 1?
d72 3
d80 17
a96 1
void catfile_helper (istream& infile, const string& filename, str_str_map test) {
d108 1
a108 1
      // cout << "input: \"" << line << "\"" << endl;
d113 4
a116 2
            //cout << "comment." << endl;
         }else if (regex_search (line, result, key_value_regex)) {
d119 7
a125 3
         // cout << "key  : \"" << result[1] << "\"" << endl;
            //cout << "value: \"" << result[2] << "\"" << endl;
         }else if (regex_search (line, result, trimmed_regex)) {
d128 14
a141 6
            //if its the key print the value
            cout<<"key";
             auto it = test.find(line);
            if(it!=test.end()){
              
               cout<< it->first<< " = " <<it->second<<endl;
d143 3
a145 3
            else{
               cout<< result[1]<< ": " <<"key not found"<<endl;

d147 6
a170 2
   str_str_map test;//listmap

d178 1
a178 1
      if (filename == cin_name) catfile_helper (cin, filename,test);
d186 1
a186 3
           
             catfile_helper (infile, filename,test);
         
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.13 2021-02-01 18:58:18-08 - - $
d154 1
@


1.13
log
@-
@
text
@d1 2
a2 1
// $Id: main.cpp,v 1.12 2020-10-22 16:50:08-07 - - $
d9 8
d24 2
d45 104
d153 22
a174 13

   str_str_map test;
   cout << test << endl;
   for (char** argp = &argv[optind]; argp != &argv[argc]; ++argp) {
      str_str_pair pair (*argp, to_string<int> (argp - argv));
      cout << "Before insert: " << pair << endl;
      test.insert (pair);
   }

   cout << test.empty() << endl;
   for (str_str_map::iterator itor = test.begin();
        itor != test.end(); ++itor) {
      cout << "During iteration: " << *itor << endl;
d176 3
a178 6

   str_str_map::iterator itor = test.begin();
   test.erase (itor);

   cout << "EXIT_SUCCESS" << endl;
   return EXIT_SUCCESS;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.11 2018-01-25 14:19:29-08 - - $
d40 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.10 2018-01-25 14:09:09-08 - - $
d46 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.9 2016-07-20 21:00:33-07 - - $
d36 1
a36 1
   sys_info::set_execname (argv[0]);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.8 2015-04-28 19:23:13-07 - - $
d25 1
a25 1
            traceflags::setflags (optarg);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.7 2015-02-03 15:39:46-08 - - $
d28 1
a28 1
            complain() << "-" << (char) optopt << ": invalid option"
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.6 2014-07-09 11:50:34-07 - - $
a14 1
using str_str_pair = xpair<const string,string>;
d16 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.5 2014-05-29 19:20:19-07 - - $
d40 2
a41 2
   for (int argi = 0; argi < argc; ++argi) {
      str_str_pair pair (argv[argi], to_string<int> (argi));
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.4 2014-04-24 18:14:51-07 - - $
d15 1
a15 1
using str_str_pair = xpair<string,string>;
d52 1
a52 1
   itor.erase();
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.3 2014-04-24 18:02:55-07 - - $
d15 2
a16 2
typedef xpair<string,string> str_str_pair;
typedef listmap<string,string> str_str_map;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.2 2013-07-30 17:09:20-07 - - $
d18 1
a18 1
void scan_options (int argc, char **argv) {
d35 1
a35 1
int main (int argc, char **argv) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.1 2013-07-30 15:46:04-07 - - $
d51 3
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: main.cpp,v 1.1 2013-02-12 14:51:41-08 - - $
d15 3
d39 1
a39 1
   listmap <string, string> test;
d41 1
a41 1
      xpair <string, string> pair (argv[argi], to_string <int> (argi));
d46 2
a47 3
   listmap <string, string>::iterator itor = test.begin();
   listmap <string, string>::iterator end = test.end();
   for (; itor != end; ++itor) {
@
