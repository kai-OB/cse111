head	1.18;
access;
symbols;
locks;
comment	@// @;


1.18
date	2016.08.12.22.27.12;	author -;	state -;
branches;
next	1.17;

1.17
date	2016.08.12.22.26.33;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.08.12.22.26.02;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.08.12.22.24.49;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.08.12.22.23.34;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.08.12.22.22.53;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.08.12.22.22.33;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.08.12.22.21.48;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.08.12.22.16.46;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.08.12.22.16.20;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.08.12.21.56.54;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.08.12.21.55.45;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.08.12.21.54.24;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.08.12.21.52.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.08.12.21.52.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.08.12.21.52.02;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.08.12.21.46.22;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.08.12.21.43.15;	author -;	state -;
branches;
next	;


desc
@@


1.18
log
@-
@
text
@// $Id: insert_forward_list.cpp,v 1.17 2016-08-12 15:26:33-07 - - $

// Example of insert_ascending to a forward_list.
// This runs in O(n) time.
// Obviously there are better algorithms.

#include <forward_list>
#include <iostream>
#include <iterator>
#include <string>
#include <vector>
using namespace std;

// Insert ascending order but no duplicates.
// Can't use any equality operator, only less.
template <typename T, class Less = less<T>>
void insert_ascending (forward_list<T>& list, const T& item) {
   Less less;
   auto curr = list.begin();
   auto prev = list.end();
   while (curr != list.end()) {
      if (not (less (*curr, item))) break;
      prev = curr;
      ++curr;
   }
   if (prev == list.end()) {
      list.push_front (item);
   }else if (curr == list.end() or less (item, *curr)) {
      list.insert_after (prev, item);
   }
}

int main() {
   forward_list<string> list;
   istream_iterator<string> cin_itor (cin);
   istream_iterator<string> end_file;
   ostream_iterator<string> cout_itor (cout, "\n");
   vector<string> data (cin_itor, end_file);
   cout << endl << "Unsorted data:" << endl;
   copy (data.begin(), data.end(), cout_itor);
   for (auto& word: data) insert_ascending (list, word);
   cout << endl << "Sorted data:" << endl;
   copy (list.begin(), list.end(), cout_itor);
}

/*
//TEST// echo hello world foo bar baz qux This is some test data. \
//TEST// | insert_forward_list >insert_forward_list.out 2>&1
//TEST// mkpspdf insert_forward_list.ps insert_forward_list.cpp* \
//TEST//         insert_forward_list.out
*/
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.16 2016-08-12 15:26:02-07 - - $
d39 1
a39 1
   cout << "Unsorted data:" << endl;
a40 1
   cout << endl;
d42 1
a42 1
   cout << "Sorted data:" << endl;
a43 1
   cout << endl;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.15 2016-08-12 15:24:49-07 - - $
d37 1
a37 1
   ostream_iterator<string> cout_itor (cout, " ");
d39 1
a39 1
   cout << "Unsorted data: ";
d43 1
a43 1
   cout << "Sorted data: ";
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.14 2016-08-12 15:23:34-07 - - $
a30 1
   for (auto& i: list) cout << i << endl;
a33 1
   string word;
d42 1
a42 1
   while (cin >> word) insert_ascending (list, word);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.13 2016-08-12 15:22:53-07 - - $
d31 1
d51 1
a51 1
//TEST// echo hello world foo bar baz qux This is test data. \
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.12 2016-08-12 15:22:33-07 - - $
d40 1
d44 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.11 2016-08-12 15:21:48-07 - - $
d37 1
a37 1
   istream_iterator<string> EOF;
d39 1
a39 1
   vector<string> data (cin_itor, EOF);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.10 2016-08-12 15:16:46-07 - - $
d10 2
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.9 2016-08-12 15:16:20-07 - - $
d34 6
d41 2
a42 2
   ostream_iterator<string> out (cout, "\n");
   copy (list.begin(), list.end(), out);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.7 2016-08-12 14:55:45-07 - - $
d27 1
a27 1
      auto after = list.insert_after (prev, item);
@


1.8
log
@-
@
text
@d15 1
a15 2
void insert_ascending (forward_list<T> list, const T& item) {
   cout << "item = " << item << endl;
d26 2
a27 3
      cout << "front = " << list.front() << endl;
   }else if (less (item, *curr)) {
      list.insert_after (prev, item);
a28 1
   for (auto& i: list) cout << i << endl;
a34 2
   for (auto& i: list) cout << i << endl;
/*
a36 1
*/
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.6 2016-08-12 14:54:24-07 - - $
d31 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.5 2016-08-12 14:52:52-07 - - $
d16 1
d27 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.4 2016-08-12 14:52:36-07 - - $
d35 2
d39 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.3 2016-08-12 14:52:02-07 - - $
d27 1
a27 1
      insert_after (prev, item);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.2 2016-08-12 14:46:22-07 - - $
d27 1
a27 1
      prev.insert_after (item);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: insert_forward_list.cpp,v 1.1 2016-08-12 14:43:15-07 - - $
d12 2
d16 13
d38 7
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: insert_ascending_forward_list.cpp,v 1.1 2016-08-12 14:41:57-07 - - $
d20 1
a20 1
   ostream_iterator out (cout, '\n');
@
