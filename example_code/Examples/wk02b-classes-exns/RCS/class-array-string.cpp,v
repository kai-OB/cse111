head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2021.04.13.02.47.09;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.04.13.02.41.56;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.04.13.02.40.49;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: class-array-string.cpp,v 1.2 2021-04-12 19:41:56-07 - - $

//
// Array of string class with iterator.
//

#include <iostream>
#include <string>
using namespace std;

void trace (int line, const char* fn, const void* addr,
            size_t size, const void* data) {
   cout  << "[" << line << "] " << fn << " " << addr
         << "->(" << size << ", " << data << ")" << endl;
}
#define TRACE trace (__LINE__, __PRETTY_FUNCTION__, this, size_, data_);

class array_string {
   private:
      size_t size_;
      string* data_ {};
      array_string() = delete;
      array_string (array_string&) = delete;
      array_string (array_string&&) = delete;
      array_string& operator= (array_string&) = delete;
      array_string& operator= (array_string&&) = delete;
   public:
      class iterator;
      array_string (size_t size);
      ~array_string();
      iterator begin();
      iterator end();
      string& operator[] (size_t index);
      size_t size();
};

class array_string::iterator {
   friend class array_string;
   private:
      string* curr;
      iterator (string* item): curr(item) {}
   public:
      bool operator!= (iterator& that) { return curr != that.curr; }
      string& operator*() { return *curr; }
      iterator& operator++() { ++curr; return *this; }
};

array_string::array_string (size_t size):
              size_(size), data_(new string[size]) {
   std::fill (&data_[0], &data_[size_], nullptr);
   TRACE;
}

array_string::~array_string() {
   delete[] data_;
   data_ = nullptr;
   TRACE;
}

array_string::iterator array_string::begin() {
   TRACE;
   return iterator (&data_[0]);
}

array_string::iterator array_string::end() {
   TRACE;
   return iterator (&data_[size_]);
}

string& array_string::operator[] (size_t index) {
   TRACE;
   return data_[index];
}

size_t array_string::size() {
   TRACE;
   return size_;
}

int main (int argc, char** argv) {
   array_string arrstr (argc - 1);
   for (int index = 1; index < argc; ++index) {
      arrstr[index - 1] = argv[index];
   }
   for (auto itor = arrstr.begin(); itor != arrstr.end(); ++itor) {
      cout << *itor << endl;
   }
   for (auto& item: arrstr) cout << item << endl;
   return 0;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: class-array-string.cpp,v 1.1 2021-04-12 19:40:49-07 - - $
d88 1
a88 1
   for (auto item& : arrstr) cout << item << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arraystritor.cpp,v 1.9 2021-04-12 18:50:03-07 - - $
d43 1
a43 1
      bool operator!= (iterator& that) { return curr != thata.curr; }
@
