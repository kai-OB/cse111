head	1.30;
access;
symbols;
locks;
comment	@// @;


1.30
date	2021.04.27.22.50.20;	author -;	state -;
branches;
next	1.29;

1.29
date	2021.04.27.22.49.09;	author -;	state -;
branches;
next	1.28;

1.28
date	2021.04.27.22.46.14;	author -;	state -;
branches;
next	1.27;

1.27
date	2021.04.27.22.45.58;	author -;	state -;
branches;
next	1.26;

1.26
date	2021.04.27.22.44.40;	author -;	state -;
branches;
next	1.25;

1.25
date	2021.04.27.22.41.33;	author -;	state -;
branches;
next	1.24;

1.24
date	2021.04.27.18.11.14;	author -;	state -;
branches;
next	1.23;

1.23
date	2021.01.18.22.27.58;	author -;	state -;
branches;
next	1.22;

1.22
date	2019.04.22.23.11.21;	author -;	state -;
branches;
next	1.21;

1.21
date	2019.04.22.23.09.45;	author -;	state -;
branches;
next	1.20;

1.20
date	2019.04.22.23.07.28;	author -;	state -;
branches;
next	1.19;

1.19
date	2019.04.22.23.06.21;	author -;	state -;
branches;
next	1.18;

1.18
date	2019.04.22.23.05.21;	author -;	state -;
branches;
next	1.17;

1.17
date	2019.04.22.23.03.10;	author -;	state -;
branches;
next	1.16;

1.16
date	2019.01.31.21.50.05;	author -;	state -;
branches;
next	1.15;

1.15
date	2019.01.31.21.49.35;	author -;	state -;
branches;
next	1.14;

1.14
date	2019.01.31.21.47.07;	author -;	state -;
branches;
next	1.13;

1.13
date	2019.01.31.21.44.57;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.04.10.21.12.07;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.04.10.21.10.46;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.07.03.19.48.18;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.07.03.01.59.14;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.07.03.01.56.23;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.07.03.01.53.50;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.07.03.01.53.39;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.13.23.51.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.11.03.03.39;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.11.03.02.11;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.11.01.13.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.11.01.13.05;	author -;	state -;
branches;
next	;


desc
@@


1.30
log
@-
@
text
@// $Id: abox.cpp,v 1.29 2021-04-27 15:49:09-07 - - $

// Class abox showing default ctor, copy ctor, operator=, dtor.

#include <cstdlib>
#include <iostream>
#include <memory>
#include <string>
#include <typeinfo>
#include <vector>

using namespace std;

#define LINE "[" << __LINE__ << "] "
#define ABOX \
        cout << LINE << "ABOX{" << this << "->" << __PRETTY_FUNCTION__ \
             << ": value=" << value << "}" << endl; 
#define SHOW(STMT) \
        cout << LINE << "SHOW{" << #STMT << "}" << endl; \
        STMT \
        cout << endl; \

/////////////////////////////////////////////////////////////////
// abox.h
/////////////////////////////////////////////////////////////////

class abox {
   private:
      int value;
   public:
      abox();                          // default ctor
      abox (const abox&);              // copy ctor
      abox& operator= (const abox&);   // copy operator=
      ~abox();                         // dtor
      abox (abox&&);                   // C++11 move ctor
      abox& operator= (abox&&);        // C++11 move operator=
      abox (int);                      // implicit int->abox conv
      operator int() const;            // implicit abox->int conv
      abox& operator++();              // prefix ++
      abox operator++ (int);           // postfix ++
};

/////////////////////////////////////////////////////////////////
// abox.cpp                          // default ctor
/////////////////////////////////////////////////////////////////

abox::abox(): value(0) { // default ctor
   ABOX;
}

abox::abox (const abox& init): value(init.value) { // copy ctor
   ABOX;
}

abox& abox::operator= (const abox& that) { // copy operator=
   if (this != &that) this->value = that.value;
   ABOX;
   return *this;
}

abox::~abox() { // dtor
   ABOX;
}

abox::abox (abox&& init): value(init.value) { // C++11 move ctor
   ABOX;
}

abox& abox::operator= (abox&& that) { // C++11 move operator=
   if (this != &that) this->value = that.value;
   ABOX;
   return *this;
}

abox::abox (int init): value(init) { // implicit int->abox conv
   ABOX;
}

abox::operator int() const { // implicit abox->int conv
   ABOX;
   return value;
}

abox& abox::operator++() { // prefix ++
   ++value;
   return *this;
}

abox abox::operator++ (int) { // postfix ++
   abox result = value;
   ++value;
   return result;
}


/////////////////////////////////////////////////////////////////
// main.cpp
/////////////////////////////////////////////////////////////////

void ref_fn (const abox& that) {
   SHOW (int value = that;)
   SHOW (cout << "ref_fn, value=" << value << endl;)
}

void value_fn (const abox that) {
   SHOW (int value = that;)
   SHOW (cout << "value_fn, value=" << value << endl;)
}

int main() {
   SHOW (abox a;)
   SHOW (abox b = a;)
   SHOW (abox c (a);)
   SHOW (abox d {a};)
   SHOW (abox e = 6;)
   SHOW (b = 3;)
   SHOW (ref_fn (6);)
   SHOW (ref_fn (a);)
   SHOW (value_fn (a);)
   SHOW (abox ii = 255;)
   SHOW (int i = ii;)
   SHOW (cout << i << endl;)
   SHOW (abox *p = new abox (6);)
   SHOW (delete p;)
   SHOW (abox *bb = new abox[3];)
   SHOW (delete[] bb;)
   SHOW (vector<abox> vb;)
   SHOW (vb.push_back (6);)
   SHOW (vb.push_back (8);)
   SHOW (cout << (a = e++) << endl;)
   SHOW (cout << (a = ++e) << endl;)
   SHOW (auto sp = make_shared<abox> (98765);)
   SHOW (return EXIT_SUCCESS;)
}

//TEST// GRIND="valgrind --leak-check=full --show-reachable=yes"
//TEST// $GRIND abox >abox.lis 2>&1
//TEST// mkpspdf abox.ps abox.cpp* abox.lis*

@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.28 2021-04-27 15:46:14-07 - - $
d16 1
a16 1
        cout << LINE << "ABOX{" << this << ": " << __PRETTY_FUNCTION__ \
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.27 2021-04-27 15:45:58-07 - - $
d16 1
a16 1
        cout << LINE << "ABOX{" << this << "->" << __PRETTY_FUNCTION__ \
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.26 2021-04-27 15:44:40-07 - - $
d7 1
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.25 2021-04-27 15:41:33-07 - - $
d131 1
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.24 2021-04-27 11:11:14-07 - - $
d131 1
a131 1
   return EXIT_SUCCESS;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.23 2021-01-18 14:27:58-08 - - $
d113 2
a114 1
   SHOW (abox d = 6;)
d129 2
a130 2
   SHOW (cout << (a = d++) << endl;;)
   SHOW (cout << (a = ++d) << endl;;)
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.22 2019-04-22 16:11:21-07 - - $
d43 1
a43 2
// abox.cppbox();                          // default ctor

d55 1
a55 3
   if (this != &that) {
      this->value = that.value;
   }
d69 1
a69 3
   if (this != &that) {
      this->value = that.value;
   }
d90 1
a90 1
   value++;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.21 2019-04-22 16:09:45-07 - - $
d43 2
a44 1
// abox.cpp
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.20 2019-04-22 16:07:28-07 - - $
a124 1
   cout << '\f' << endl;
d137 2
a138 3
/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=abox.lis.grind abox >abox.lis 2>&1
a139 1
*/
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.19 2019-04-22 16:06:21-07 - - $
d15 2
a16 2
        cout << LINE << "ABOX(" << this << "->" << __PRETTY_FUNCTION__ \
             << ": value=" << value << ")" << endl; 
d18 2
a19 2
        cout << LINE << "SHOW(" << #STMT << "):" << endl; \
        STMT; \
d104 2
a105 2
   SHOW (int value = that);
   SHOW (cout << "ref_fn, value=" << value << endl);
d109 2
a110 2
   SHOW (int value = that);
   SHOW (cout << "value_fn, value=" << value << endl);
d114 11
a124 11
   SHOW (abox a);
   SHOW (abox b = a);
   SHOW (abox c (a));
   SHOW (abox d = 6);
   SHOW (b = 3);
   SHOW (ref_fn (6));
   SHOW (ref_fn (a));
   SHOW (value_fn (a));
   SHOW (abox ii = 255);
   SHOW (int i = ii);
   SHOW (cout << i << endl);
d126 9
a134 9
   SHOW (abox *p = new abox (6));
   SHOW (delete p);
   SHOW (abox *bb = new abox[3]);
   SHOW (delete[] bb);
   SHOW (vector<abox> vb);
   SHOW (vb.push_back (6));
   SHOW (vb.push_back (8));
   SHOW (cout << (a = d++) << endl;);
   SHOW (cout << (a = ++d) << endl;);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.18 2019-04-22 16:05:21-07 - - $
d14 1
a14 1
#define ABOX_SHOW \
d47 1
a47 1
   ABOX_SHOW;
d51 1
a51 1
   ABOX_SHOW;
d58 1
a58 1
   ABOX_SHOW;
d63 1
a63 1
   ABOX_SHOW;
d67 1
a67 1
   ABOX_SHOW;
d74 1
a74 1
   ABOX_SHOW;
d79 1
a79 1
   ABOX_SHOW;
d83 1
a83 1
   ABOX_SHOW;
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.17 2019-04-22 16:03:10-07 - - $
d104 2
a105 2
   int value = that;
   SHOW (cout << "ref_fn, that=" << value << endl);
d109 2
a110 2
   int value = that;
   SHOW (cout << "value_fn, that=" << value << endl);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.16 2019-01-31 13:50:05-08 - - $
d104 2
a105 1
   SHOW (cout << "ref_fn, that=" << that << endl);
d109 2
a110 1
   SHOW (cout << "value_fn, that=" << that << endl);
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.15 2019-01-31 13:49:35-08 - - $
d15 2
a16 2
        cout << LINE << this << "->" << __PRETTY_FUNCTION__ \
             << ": value=" << value << endl; 
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.14 2019-01-31 13:47:07-08 - - $
d14 7
a20 9
#define ABOX_SHOW { \
           cout << LINE << this << "->" << __PRETTY_FUNCTION__ \
                << ": value=" << value << endl; \
        }
#define SHOW(STMT) { \
           cout << LINE << "SHOW(" << #STMT << "):" << endl; \
           STMT; \
           cout << endl; \
        }
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.13 2019-01-31 13:44:57-08 - - $
d14 9
a22 7
#define ABOX_SHOW \
        cout << LINE << this \
             << "->" << __PRETTY_FUNCTION__ << ": value=" << value << endl; 
#define SHOW(STMT) \
        cout << LINE << "SHOW(" << #STMT << "):" << endl; \
        STMT; \
        cout << endl;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.12 2014-04-10 14:12:07-07 - - $
d14 2
a15 2
#define IDENT \
        cout << LINE << reinterpret_cast<const void*> (this) \
d47 1
a47 1
   IDENT;
d51 1
a51 1
   IDENT;
d58 1
a58 1
   IDENT;
d63 1
a63 1
   IDENT;
d67 1
a67 1
   IDENT;
d74 1
a74 1
   IDENT;
d79 1
a79 1
   IDENT;
d83 1
a83 1
   IDENT;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.11 2014-04-10 14:10:46-07 - - $
d14 1
a14 1
#define IDENT(name) \
d16 1
a16 1
             << "->" << name << ": value=" << value << endl; 
d47 1
a47 1
   IDENT ("abox::abox()");
d51 1
a51 1
   IDENT ("abox::abox(const abox&)");
d58 1
a58 1
   IDENT ("abox::operator= (const abox&)");
d63 1
a63 1
   IDENT ("abox::~abox()");
d67 1
a67 1
   IDENT ("abox::abox(abox&&)");
d74 1
a74 1
   IDENT ("abox::operator= (abox&&)");
d79 1
a79 1
   IDENT ("abox::abox(int)");
d83 1
a83 1
   IDENT ("abox::operator int()");
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.10 2013-07-03 12:48:18-07 - - $
d30 1
a30 1
      abox ();                         // default ctor
d33 1
a33 1
      ~abox ();                        // dtor
d37 2
a38 2
      operator int () const;           // implicit abox->int conv
      abox& operator++ ();             // prefix ++
d46 1
a46 1
abox::abox (): value(0) { // default ctor
d62 1
a62 1
abox::~abox () { // dtor
d82 2
a83 2
abox::operator int () const { // implicit abox->int conv
   IDENT ("abox::operator int ()");
d87 1
a87 1
abox& abox::operator++ () { // prefix ++
d111 1
a111 1
int main () {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.9 2013-07-02 18:59:14-07 - - $
d31 2
a32 2
      abox (const abox &);             // copy ctor
      abox &operator= (const abox &);  // copy operator=
d34 2
a35 2
      abox (abox &&);                  // C++11 move ctor
      abox &operator= (abox &&);       // C++11 move operator=
d38 1
a38 1
      abox &operator++ ();             // prefix ++
d50 2
a51 2
abox::abox (const abox &init): value(init.value) { // copy ctor
   IDENT ("abox::abox(const abox &)");
d54 1
a54 1
abox &abox::operator= (const abox &that) { // copy operator=
d58 1
a58 1
   IDENT ("abox::operator= (const abox &)");
d66 2
a67 2
abox::abox (abox &&init): value(init.value) { // C++11 move ctor
   IDENT ("abox::abox(abox &&)");
d70 1
a70 1
abox &abox::operator= (abox &&that) { // C++11 move operator=
d74 1
a74 1
   IDENT ("abox::operator= (abox &&)");
d87 1
a87 1
abox &abox::operator++ () { // prefix ++
d103 1
a103 1
void ref_fn (const abox &that) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.8 2013-07-02 18:56:23-07 - - $
d34 2
a35 2
      abox (const abox &&);            // C++11 move ctor
      abox &operator= (const abox &&); // C++11 move operator=
d66 2
a67 2
abox::abox (const abox &&init): value(init.value) { // C++11 move ctor
   IDENT ("abox::abox(const abox &&)");
d70 1
a70 1
abox &abox::operator= (const abox &&that) { // C++11 move operator=
d74 1
a74 1
   IDENT ("abox::operator= (const abox &&)");
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.7 2013-07-02 18:53:50-07 - - $
d46 1
a46 1
abox::abox (): value(0) {
d50 1
a50 1
abox::abox (const abox &init): value(init.value) {
d54 1
a54 1
abox &abox::operator= (const abox &that) {
d62 1
a62 1
abox::~abox () {
d66 1
a66 1
abox::abox (const abox &&init): value(init.value) {
d70 1
a70 1
abox &abox::operator= (const abox &&that) {
d78 1
a78 1
abox::abox (int init): value(init) {
d82 1
a82 1
abox::operator int () const {
d87 1
a87 1
abox &abox::operator++ () { // prefix
d92 1
a92 1
abox abox::operator++ (int) { // postfix
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.6 2013-07-02 18:53:39-07 - - $
d66 12
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.5 2012-04-13 16:51:30-07 - - $
d34 1
a34 1
      abox (const abos &&);            // C++11 move ctor
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.4 2012-04-10 20:03:39-07 - - $
d30 10
a39 8
      abox ();                        // default ctor
      abox (const abox &);            // copy ctor
      abox &operator= (const abox &); // operator=
      ~abox ();                       // dtor
      abox (int);                     // implicit int->abox conv
      operator int () const;          // implicit abox->int conv
      abox &operator++ ();            // prefix ++
      abox operator++ (int);          // postfix ++
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.3 2012-04-10 20:02:11-07 - - $
d53 3
a55 2
   if (this == &that) return *this;
   this->value = that.value;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.2 2012-04-10 18:13:54-07 - - $
d13 1
d15 1
a15 2
        cout << "[" << __LINE__ << "] " \
             << reinterpret_cast<const void*> (this) \
d18 1
a18 1
        cout << "SHOW(" << #STMT << "):" << endl; \
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.1 2012-04-10 18:13:05-07 - - $
d14 2
a15 1
        cout << reinterpret_cast<const void*> (this) \
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: abox.cpp,v 1.29 2012-04-10 18:11:10-07 - - $
d73 1
a73 1
   return this;
@
