head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2021.01.29.01.00.08;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.01.29.00.58.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.01.29.00.56.51;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.01.29.00.55.09;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.01.29.00.54.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.01.29.00.53.12;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.01.29.00.52.39;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.01.29.00.51.50;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.01.29.00.51.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.01.29.00.50.58;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: dynamic_pointer_cast.cpp,v 1.9 2021-01-28 16:58:57-08 - - $

// Example showing a dynamic cast.

#include <iostream>
#include <memory>
#include <string>
#include <vector>
using namespace std;

class base {
   public:
      virtual string name() const = 0;
      virtual string type() const = 0;
      virtual ~base() {}
};
using base_ptr = shared_ptr<base>;

class plain: public base {
   private:
      string name_ = "plain anonymous";
   public:
      plain() = default;
      plain (const string& name__): name_(name__) {}
      string name() const override { return name_; }
      string type() const override { return "plain"; }
};

class special: public base {
   private:
      string name_ = "special anonymous";
      string rank_ = "special rank";
   public:
      special() = default;
      special (const string& name__): name_(name__) {}
      string name() const override { return name_ + ": " + rank_; }
      string type() const override { return "special"; }
      void set_rank (const string& rank__) { rank_ = rank__; }
};
using special_ptr = shared_ptr<special>;

void display (base_ptr item) {
   cout << item->type() << ": " << item->name() << endl;
}

int main() {
   vector<base_ptr> data;
   data.push_back (make_shared<plain> ("hello"));
   {
      special_ptr next = make_shared<special> ("world");
      next->set_rank ("boss");
      data.push_back (next);
   }
   cout << endl << "first loop:" << endl;
   for (auto itor: data) display (itor);
   for (auto itor: data) {
      special_ptr item = dynamic_pointer_cast<special> (itor);
      if (item == nullptr) {
         cout << "ERROR: " << itor->name() << " is not special" << endl;
      }else {
         cout << itor->name() << " changing rank to foobar" << endl;
         item->set_rank ("foobar");
      }
   }
   cout << endl << "second loop:" << endl;
   for (auto itor: data) display (itor);
}
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic_pointer_cast.cpp,v 1.8 2021-01-28 16:56:51-08 - - $
d54 1
a54 1
   cout << "first loop:" << endl;
d65 1
a65 1
   cout << "second loop:" << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic_pointer_cast.cpp,v 1.6 2021-01-28 16:54:07-08 - - $
d54 1
d65 1
@


1.7
log
@-
@
text
@d56 1
a56 1
      special_ptr item = dynamic_pointer_cast<special_ptr> (itor);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic_pointer_cast.cpp,v 1.5 2021-01-28 16:53:12-08 - - $
d56 1
a56 1
      special_ptr item = dynamic_pointer_cast<special_ptr (itor);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic_pointer_cast.cpp,v 1.3 2021-01-28 16:51:50-08 - - $
d48 1
a48 1
   data.push_back (new plain ("hello"));
d50 1
a50 1
      special_ptr next = new special ("world");
@


1.4
log
@-
@
text
@d11 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic_pointer_cast.cpp,v 1.1 2021-01-28 16:50:58-08 - - $
a10 4
class base;
using base_ptr = shared_ptr<base>;

class base {
d16 1
d39 1
@


1.2
log
@-
@
text
@d48 1
a48 1
   vector<base_ptr data;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.10 2021-01-27 18:29:13-08 - - $
d11 1
@
