head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2021.01.28.02.29.13;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.01.28.02.26.09;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.01.28.02.24.48;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.01.28.02.23.30;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.01.28.02.23.11;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.01.28.02.22.48;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.01.28.02.22.29;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.01.28.02.21.58;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.01.28.02.18.16;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.01.28.02.17.39;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: dynamic-cast.cpp,v 1.9 2021-01-27 18:26:09-08 - - $

// Example showing a dynamic cast.

#include <iostream>
#include <string>
#include <vector>
using namespace std;

class base {
   public:
      virtual string name() const = 0;
      virtual string type() const = 0;
      virtual ~base() {}
};

class plain: public base {
   private:
      string name_ = "plain anonymous";
   public:
      plain() = default;
      plain (const string& name__): name_(name__) {}
      string name() const override { return name_; }
      string type() const override { return "plain"; }
};

class special: public base {
   private:
      string name_ = "special anonymous";
      string rank_ = "special rank";
   public:
      special() = default;
      special (const string& name__): name_(name__) {}
      string name() const override { return name_ + ": " + rank_; }
      string type() const override { return "special"; }
      void set_rank (const string& rank__) { rank_ = rank__; }
};

void display (base* item) {
   cout << item->type() << ": " << item->name() << endl;
}

int main() {
   vector<base*> data;
   data.push_back (new plain ("hello"));
   {
      special* next = new special ("world");
      next->set_rank ("boss");
      data.push_back (next);
   }
   for (auto itor: data) display (itor);
   for (auto itor: data) {
      special* item = dynamic_cast<special*> (itor);
      if (item == nullptr) {
         cout << "ERROR: " << itor->name() << " is not special" << endl;
      }else {
         cout << itor->name() << " changing rank to foobar" << endl;
         item->set_rank ("foobar");
      }
   }
   for (auto itor: data) display (itor);
}
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.8 2021-01-27 18:24:48-08 - - $
d55 1
a55 1
         cout << itor->name() << " is not special" << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.7 2021-01-27 18:23:30-08 - - $
d34 1
a34 1
      string name() const override { return name_ + ":" + rank_; }
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.6 2021-01-27 18:23:11-08 - - $
d14 1
a14 1
      virtual ~base();
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.5 2021-01-27 18:22:48-08 - - $
d53 1
a53 1
      special* item = dynamic_cast<special> (itor);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.4 2021-01-27 18:22:29-08 - - $
d53 1
a53 1
      special* item = dynamic_cast<special> (*itor);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.3 2021-01-27 18:21:58-08 - - $
d36 1
a36 1
      void set_rank (const string& rank__) { rank_ = ranke__; }
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: dynamic-cast.cpp,v 1.1 2021-01-27 18:17:39-08 - - $
d12 2
a13 2
      virtual string name() = 0;
      virtual string type() = 0;
@


1.2
log
@-
@
text
@d12 3
a14 2
      string name() = 0;
      string type() = 0;
d23 2
a24 2
      string name() { return name_; }
      string type() { return "plain"; }
d34 2
a35 1
      string name() { return name_ + ":" + rank_; }
a36 1
      string type() { return "special"; }
d50 10
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d33 1
a33 1
      string name() { return name_ + ':" + rank_; }
@
