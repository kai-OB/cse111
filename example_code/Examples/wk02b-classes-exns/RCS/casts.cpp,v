head	1.31;
access;
symbols;
locks;
comment	@// @;


1.31
date	2021.04.16.00.51.46;	author -;	state -;
branches;
next	1.30;

1.30
date	2021.04.16.00.51.30;	author -;	state -;
branches;
next	1.29;

1.29
date	2021.04.16.00.48.55;	author -;	state -;
branches;
next	1.28;

1.28
date	2020.10.22.22.34.45;	author -;	state -;
branches;
next	1.27;

1.27
date	2020.10.22.22.33.30;	author -;	state -;
branches;
next	1.26;

1.26
date	2020.10.22.22.32.43;	author -;	state -;
branches;
next	1.25;

1.25
date	2020.10.22.22.32.11;	author -;	state -;
branches;
next	1.24;

1.24
date	2020.10.22.22.31.35;	author -;	state -;
branches;
next	1.23;

1.23
date	2020.10.22.22.26.26;	author -;	state -;
branches;
next	1.22;

1.22
date	2020.10.22.22.26.12;	author -;	state -;
branches;
next	1.21;

1.21
date	2020.10.22.22.24.33;	author -;	state -;
branches;
next	1.20;

1.20
date	2020.10.22.22.23.43;	author -;	state -;
branches;
next	1.19;

1.19
date	2020.10.22.22.16.20;	author -;	state -;
branches;
next	1.18;

1.18
date	2020.10.22.22.14.26;	author -;	state -;
branches;
next	1.17;

1.17
date	2020.10.22.22.14.08;	author -;	state -;
branches;
next	1.16;

1.16
date	2020.10.22.22.11.09;	author -;	state -;
branches;
next	1.15;

1.15
date	2020.10.22.22.05.36;	author -;	state -;
branches;
next	1.14;

1.14
date	2020.10.22.22.05.11;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.10.22.22.03.39;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.10.22.22.00.18;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.10.22.21.59.03;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.10.22.21.58.43;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.10.22.21.58.16;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.22.21.56.47;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.10.22.21.56.22;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.10.22.21.56.01;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.10.22.21.55.35;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.10.22.21.54.49;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.10.22.21.51.07;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.10.22.21.47.49;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.10.22.21.46.45;	author -;	state -;
branches;
next	;


desc
@@


1.31
log
@-
@
text
@// $Id: casts.cpp,v 1.30 2021-04-15 17:51:30-07 - - $

// Show different kinds of casts.

#include <iostream>
using namespace std;

class base {
      string b = "base";
   public:
      virtual ~base() = default;
      virtual const string to_string() const { return b; }
};

class derived: public base {
      string d = "derived";
   public:
      virtual ~derived() = default;
      virtual const string to_string() const {
         return d + " + " + base::to_string(); 
      }
};

int main() {

   char c = 'A';
   int i = static_cast<int> (c);
   cout << "static_cast: " << c << " " << i << endl;

   base* b = new derived();
   derived* d = dynamic_cast<derived*> (b);
   b = d; // Does not need a cast.
   // d = b; // error: invalid conversion from 'base*' to 'derived*'
   cout << "dynamic_cast: " << d->to_string() << endl;
   delete b;

   uintptr_t st = reinterpret_cast<uintptr_t> (b);
   cout << "reinterpret_cast: " << b << " " << st << endl;

   int j = 40;
   const int* p = &j;
   // *p = 99; // error: assignment of read-only location '* p'
   *const_cast<int*> (p) = 100;
   cout << "const_cast: " << j << " " << *p << endl;

   return 0;
}
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.29 2021-04-15 17:48:55-07 - - $
d12 1
a12 1
      virtual const string& to_string() const { return b; }
d19 1
a19 1
      virtual const string& to_string() const {
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.28 2020-10-22 15:34:45-07 - - $
d12 1
a12 1
      virtual const string to_string() const { return b; }
d19 1
a19 1
      virtual const string to_string() const {
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.27 2020-10-22 15:33:30-07 - - $
d12 1
a12 1
      virtual const string to_string() { return b; }
d19 1
a19 1
      virtual const string to_string() {
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.26 2020-10-22 15:32:43-07 - - $
d35 1
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.25 2020-10-22 15:32:11-07 - - $
a34 1
   delete b;
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.24 2020-10-22 15:31:35-07 - - $
d42 1
a42 1
   *p = 99;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.23 2020-10-22 15:26:26-07 - - $
d40 2
a41 2
   int i = 40;
   const int* p = &i;
d44 1
a44 1
   cout << "const_cast: " << i << " " << *p << endl;
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.22 2020-10-22 15:26:12-07 - - $
d35 1
d40 6
a45 1
   delete b;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.21 2020-10-22 15:24:33-07 - - $
d31 1
a33 1
   derived* d = dynamic_cast<derived*> (b);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.20 2020-10-22 15:23:43-07 - - $
d31 2
a33 2
   b = d; // Does not need a cast.
   d = b;
d36 1
a36 1
   size_t st = reinterpret_cast<size_t> (b);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.19 2020-10-22 15:16:20-07 - - $
d32 2
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.18 2020-10-22 15:14:26-07 - - $
a23 7
class hello {
      size_t counter = 0;
   public:
      hello& operator++() { ++(const_cast<hello*>(this)->counter); }
      operator size_t() { return counter; }
};

a35 4

   const hello hi;
   ++hi; ++hi; ++hi;
   cout << "const_cast: " << size_t (hi) << endl;
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.17 2020-10-22 15:14:08-07 - - $
d27 1
a27 1
      hello& operator++() { ++ const_cast<hello*> (this)->counter; }
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.16 2020-10-22 15:11:09-07 - - $
d46 1
a46 1
   cout << "const_cast: " << hi << endl;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.15 2020-10-22 15:05:36-07 - - $
d25 1
a25 1
      string s = "hello";
d27 2
a28 1
      void french() { s = "bonjour"; }
d45 2
a46 1
   const_cast<hello> (hi) .french();
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.14 2020-10-22 15:05:11-07 - - $
d24 6
d42 3
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.13 2020-10-22 15:03:39-07 - - $
d35 1
a35 1
   cout << "reinterpret_cast: " << st << endl;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.12 2020-10-22 15:00:18-07 - - $
d20 1
a20 1
         return d + ": " + base::to_string(); 
d33 3
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.11 2020-10-22 14:59:03-07 - - $
d12 1
a12 3
      virtual const string to_string() {
         return "base: " + b;
      }
d20 1
a20 1
         return "derived: " + d + ": " + base::to_string(); 
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.10 2020-10-22 14:58:43-07 - - $
d9 1
a9 1
      int n = 'B';
d13 1
a13 1
         return "base: " + ::to_string (n);
d18 1
a18 1
      int m = 'D';
d22 1
a22 2
         return "derived: " + ::to_string (m) + ": "
                + base::to_string(); 
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.9 2020-10-22 14:58:16-07 - - $
d9 1
a9 1
      int n = 'B'
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.8 2020-10-22 14:56:47-07 - - $
d9 1
a9 1
      int n;
d18 1
a18 1
      int m;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.7 2020-10-22 14:56:22-07 - - $
d11 1
d20 1
d35 4
a38 2
   cout << "dynamic_cast: " << d->to_string();
   
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.6 2020-10-22 14:56:01-07 - - $
d11 1
a11 1
      const string to_string() {
d19 1
a19 1
      const string to_string() {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.5 2020-10-22 14:55:35-07 - - $
d33 1
a33 1
   cout << "dynamic_cast: " << d.to_string();
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.4 2020-10-22 14:54:49-07 - - $
d20 2
a21 1
         return "derived: " ::to_string (m) + ": " + base::to_string(); 
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.3 2020-10-22 14:51:07-07 - - $
d12 1
a12 1
         return "base: " + to_string (n);
d20 1
a20 1
         return "derived: " to_string (m) + ": " + base::to_string(); 
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.2 2020-10-22 14:47:49-07 - - $
d11 3
a13 1
      cout << "base: " << n << endl;
d19 3
a21 1
      cout << "derived: " << n << " " << m << endl;
d31 2
a32 1
   derived* d = b;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: casts.cpp,v 1.1 2020-10-22 14:46:45-07 - - $
d8 12
d26 2
a27 2
   const string hello = "hello";
   const_cast<string> (hello) = "bonjour";
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d15 1
a15 1
   hello = "bonjour";
@
