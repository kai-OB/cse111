head	1.14;
access;
symbols;
locks;
comment	@// @;


1.14
date	2021.03.30.00.42.12;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.09.02.04.40.04;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.09.02.02.17.15;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.09.02.02.14.57;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.09.02.02.12.09;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.09.02.02.10.15;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.09.02.01.57.36;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.09.02.01.48.59;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.09.02.01.47.30;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.09.02.01.46.36;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.09.02.01.46.03;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.09.02.01.45.35;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.09.02.01.45.26;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.09.02.01.44.40;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: ctype.cpp,v 1.13 2020-09-01 21:40:04-07 - - $

// Print out all characters with their <ctype> classes.

#include <cctype>
#include <iomanip>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>
using namespace std;

using isclass = int (*) (int);
vector<pair<isclass,string>> functions = {
   {isalnum , "isalnum" },
   {isalpha , "isalpha" },
   {isblank , "isblank" },
   {iscntrl , "iscntrl" },
   {isdigit , "isdigit" },
   {isgraph , "isgraph" },
   {islower , "islower" },
   {isprint , "isprint" },
   {ispunct , "ispunct" },
   {isspace , "isspace" },
   {isupper , "isupper" },
   {isxdigit, "isxdigit"},
};

unordered_map<int,string> charnames = {
   {0x00, "NUL"}, {0x01, "SOH"}, {0x02, "STX"}, {0x03, "ETX"},
   {0x04, "EOT"}, {0x05, "ENQ"}, {0x06, "ACK"}, {0x07, "BEL"},
   {0x08, "BS "}, {0x09, "HT "}, {0x0A, "LF "}, {0x0B, "VT "},
   {0x0C, "FF "}, {0x0D, "CR "}, {0x0E, "SO "}, {0x0F, "SI "},
   {0x10, "DLE"}, {0x11, "DC1"}, {0x12, "DC2"}, {0x13, "DC3"},
   {0x14, "DC4"}, {0x15, "NAK"}, {0x16, "SYN"}, {0x17, "ETB"},
   {0x18, "CAN"}, {0x19, "EM "}, {0x1A, "SUB"}, {0x1B, "ESC"},
   {0x1C, "FS "}, {0x1D, "GS "}, {0x1E, "RS "}, {0x1F, "US "},
   {0x7F, "DEL"},
};

int main() {
   for (unsigned ch = 0; ch < 0x80; ++ch) {
      cout << dec << setfill(' ') << setw(3) << ch
           << " 0" << oct << setfill('0') << setw(3) << ch
           << " 0x" << hex << uppercase << setfill('0')
           << setw(2) << ch;
      if (isprint (ch)) cout << " '" << char (ch) << "'";
      else {
         auto chname = charnames.find (ch);
         if (chname == charnames.end()) cout << " ...";
                                   else cout << " " << chname->second;
      }
      for (const auto& fn: functions) {
         if (fn.first (ch)) cout << " " << fn.second;
      }
      cout << endl;
   }
}

@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.12 2020-09-01 19:17:15-07 - - $
d44 3
a46 2
          << " 0" << oct << setfill('0') << setw(3) << ch
          << " 0x" << hex << uppercase << setfill('0') << setw(2) << ch;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.11 2020-09-01 19:14:57-07 - - $
a16 1
   {isascii , "isascii" },
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.10 2020-09-01 19:12:09-07 - - $
d44 3
a46 3
      cout << setw(3) << ch
           << " 0" << oct << setfill('0') << ch
           << " 0x" << hex << setfill('0') << ch;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.9 2020-09-01 19:10:15-07 - - $
d44 3
a46 1
      cout << "0x" << hex << setfill('0') << uppercase << setw(2) << ch;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.8 2020-09-01 18:57:36-07 - - $
d45 1
a45 1
      if (isgraph (ch)) cout << " '" << char (ch) << "'";
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.7 2020-09-01 18:48:59-07 - - $
a13 1

d30 1
a30 30
vector<pair<int,string>> charinit = {
// $Id: ctype.cpp,v 1.7 2020-09-01 18:48:59-07 - - $

// Print out all characters with their <ctype> classes.

#include <cctype>
#include <iomanip>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

using isclass = int (*) (int);
vector<pair<isclass,string>> functions = {
   {isalnum , "isalnum" },
   {isalpha , "isalpha" },
   {isascii , "isascii" },
   {isblank , "isblank" },
   {iscntrl , "iscntrl" },
   {isdigit , "isdigit" },
   {isgraph , "isgraph" },
   {islower , "islower" },
   {isprint , "isprint" },
   {ispunct , "ispunct" },
   {isspace , "isspace" },
   {isupper , "isupper" },
   {isxdigit, "isxdigit"},
};

unordered_map<int,string> = {
d43 11
a53 4
   for (unsigned ch = 0; ch < 256; ++ch) {
      cout << "0x " << hex << setfill('0') << setw(2) << ch;
      if (isgraph (ch)) cout << " " << char (ch);
                   else cout << "   ";
a56 1
};
a57 8
int main() {
   for (int ch = 0; ch < 256; ++ch) {
      cout << "0x " << hex << setfill('0') << setw(2) << ch;
      if (isgraph (ch)) cout << " ' " << char (ch) << "'";
                   else cout << "   ";
      cout << endl;
   }
}
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.6 2020-09-01 18:47:30-07 - - $
d9 1
d31 41
d74 1
a74 1
      cout << "0x" << hex << setfill('0') << setw(2) << ch;
d76 11
a86 1
                   else cout << "  ";
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.5 2020-09-01 18:46:36-07 - - $
d32 1
d34 1
a34 1
             else cout << "0x" << hex << setfill('0') << setw(2) << ch;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.4 2020-09-01 18:46:03-07 - - $
d31 3
a33 4
   for (int ch = 0; ch < 256; ++ch) {
      if (isgraph (ch)) cout << " " << ch;
      else cout << "0x" << hex << setfill('0') << setw(2)
                << unsigned (ch);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.3 2020-09-01 18:45:35-07 - - $
d35 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.2 2020-09-01 18:45:26-07 - - $
d6 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ctype.cpp,v 1.1 2020-09-01 18:44:40-07 - - $
d5 1
a5 1
#include <cctype>'
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d32 1
a32 1
      else cout << "0x" << hex << fill('0') << width(2)
@
