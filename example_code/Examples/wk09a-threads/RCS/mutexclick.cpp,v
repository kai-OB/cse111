head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2016.08.09.22.28.20;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.08.09.22.27.38;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.08.09.22.23.48;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.07.22.22.18.53;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: mutexclick.cpp,v 1.3 2016-08-09 15:27:38-07 - - $

// Hello to threads.

#include <iostream>
#include <mutex>
#include <thread>
#include <vector>
using namespace std;

constexpr size_t LOOPS = 10'000'000;

class mutex_counter {
   private:
      size_t count {0};
      mutex lock;
   public:
      mutex_counter& operator++() {
         unique_lock<mutex> unique (lock);
         ++count;
         return *this;
      }
      friend ostream& operator<< (ostream&, const mutex_counter&);
};

ostream& operator<< (ostream& out, const mutex_counter& ctr) {
   out << ctr.count;
   return out;
}

void racer (size_t id, mutex_counter* count) {
   for (size_t i = 0; i < LOOPS; ++i) ++*count;
   cout << "mutex racer " << id << " looped " << LOOPS
        << " finished mutex_counter " << *count << endl;
}

struct comma_t: numpunct<char> {
   char do_thousands_sep() const { return ','; }
   string do_grouping() const { return "\03"; }
};
locale comma (locale(), new comma_t());

int main () {
   cout.imbue (comma);
   mutex_counter count;
   cout << "main starting" << endl;
   vector<thread> vecthr;
   for (size_t i = 0; i < 4; ++i) {
      vecthr.push_back (thread (racer, i, &count));
   }
   for (auto& t: vecthr) t.join();
   cout << "main finished mutex_counter " << count << endl;
   return 0;
}


//TEST// alias TIME='/usr/bin/time -f "%E elapsed, %S kernel, %U user"'
//TEST// for i in 1 2 3 4
//TEST// do
//TEST//    TIME mutexclick >mutexclick.out$i 2>&1
//TEST// done
//TEST// more mutexclick.out* >mutexclick.lis </dev/null
//TEST// mkpspdf mutexclick.ps mutexclick.cpp* mutexclick.lis

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: mutexclick.cpp,v 1.2 2016-08-09 15:23:48-07 - - $
d56 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: mutexclick.cpp,v 1.1 2016-07-22 15:18:53-07 - - $
d13 1
a13 1
class counter {
d18 1
a18 1
      counter& operator++() {
d23 1
a23 1
      friend ostream& operator<< (ostream&, const counter&);
d26 1
a26 3
ostream& operator<< (ostream& out, const counter& ctr) {
   // Possible read-only race conditioin.
   // Can not lock it unless ctr is non-const.
d31 1
a31 1
void racer (size_t id, counter* count) {
d33 2
a34 2
   cout << "racer " << id << " looped " << LOOPS
        << " finished counter " << *count << endl;
d45 1
a45 1
   counter count;
d52 1
a52 1
   cout << "main finished counter " << count << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: mutexclick.cpp,v 1.9 2016-05-23 14:30:12-07 - - $
d11 1
a11 1
constexpr size_t LOOPS = 1'000'000;
a33 1
   cout << "racer " << id << " looping " << LOOPS << " times" << endl;
d35 2
a36 1
   cout << "racer " << id << " finished counter " << *count << endl;
d39 6
d46 1
@
