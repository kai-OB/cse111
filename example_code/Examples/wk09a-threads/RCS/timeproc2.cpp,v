head	1.5;
access;
symbols;
locks;
comment	@// @;


1.5
date	2020.12.08.22.15.26;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.12.08.22.15.07;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.12.08.22.14.34;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.12.08.22.13.24;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.12.08.22.13.04;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: timeproc2.cpp,v 1.4 2020-12-08 14:15:07-08 - - $

//
// NAME
//    proctime - print time used by process
//
// SYNOPSIS
//    proctime prog [args...]
//
// DESCRIPTION
//    Runs the program as a child process and when finished
//    prints the elapsed, kernel, and user times used.
//

#include <chrono>
#include <cstring>
#include <iomanip>
#include <iostream>
using namespace std;

#include <sys/resource.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

using high_res_clock = chrono::high_resolution_clock;

string execname;

void sysfail (const string& object) {
   cerr << execname << ": " << object << ": " << strerror (errno)
        << endl;
   exit (errno | 0x80);
}

void usage() {
   cerr << "Usage: " << execname << " prog [args...]" << endl;
   exit (1);
}

double seconds (const struct timeval& time) {
   return double (time.tv_sec) + double (time.tv_usec) / 1.0e6;
}

double diff_seconds (high_res_clock::duration time) {
   return chrono::duration<double> (time).count();
}

void printstatus (const char* prog, int status) {
   cout << execname << ": " << prog << ": ";
   if (status & 0xFF) {
      cout << strsignal (status & 0x7F);
      if (status & 0x8F) cout << " (core dumped)";
   }else {
      cout << "exit " << ((status >> 8) & 0xFF);
   }
   cout << endl;
}

void runprog (char** argv) {
   if (argv[0] == nullptr) usage();
   int pid = fork();
   if (pid < 0) sysfail ("fork()");
   if (pid == 0) {
      int exec = execvp (argv[0], argv);
      if (exec < 0) sysfail (string ("execvp(") + argv[0] + ")");
   }
   int status;
   waitpid (pid, &status, 0);
   printstatus (argv[0], status);
}

void printusage (double elapsed, double kernel, double user) {
  cout << execname << ": seconds: " << std::fixed
       << setprecision(6) << elapsed << " elapsed, "
       << setprecision(6) << kernel << " kernel, "
       << setprecision(6) << user << " user." << endl;
}

int main (int, char** argv) {
   execname = basename (argv[0]);
   struct rusage usage;
   high_res_clock::time_point start = high_res_clock::now();
   runprog (&argv[1]);
   getrusage (RUSAGE_CHILDREN, &usage);
   high_res_clock::time_point finish = high_res_clock::now();
   printusage (diff_seconds (finish - start),
               seconds (usage.ru_stime),
               seconds (usage.ru_utime));
}

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: timeproc2.cpp,v 1.3 2020-12-08 14:14:34-08 - - $
d84 1
a84 1
   high_res_clock::time_point start = high_res_clock::new();
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: timeproc2.cpp,v 1.2 2020-12-08 14:13:24-08 - - $
d84 1
a84 1
   ::time_point start = high_res_clock::new();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: timeproc2.cpp,v 1.1 2020-12-08 14:13:04-08 - - $
d27 1
a27 1
using clock = chrono::high_resolution_clock;
d46 1
a46 1
double diff_seconds (clock::duration time) {
d84 1
a84 1
   ::time_point start = clock::new();
d87 1
a87 1
   clock::time_point finish = clock::now();
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: timeproc.cpp,v 1.1 2020-12-06 18:58:52-08 - - $
d88 1
a88 1
   printusage (to_seconds (finish - start),
@
