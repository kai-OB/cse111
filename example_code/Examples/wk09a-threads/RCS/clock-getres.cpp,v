head	1.15;
access;
symbols;
locks;
comment	@// @;


1.15
date	2021.03.05.12.02.12;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.03.05.12.00.18;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.03.05.12.00.03;	author -;	state -;
branches;
next	1.12;

1.12
date	2021.03.05.11.59.40;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.03.05.11.59.24;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.03.05.01.15.48;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.03.05.01.15.18;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.03.05.01.14.50;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.03.05.01.10.53;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.03.05.01.09.48;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.03.05.01.08.27;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.03.05.01.07.45;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.03.05.01.07.18;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.03.05.01.07.06;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.03.05.01.06.55;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@// $Id: clock-getres.cpp,v 1.14 2021-03-05 04:00:18-08 - - $

#include <cstring>
#include <ctime>
#include <iomanip>
#include <iostream>
using namespace std;

// 
// CLOCK_REALTIME
//    System-wide clock that measures real (i.e.,
//    wall-clock) time.  Setting this clock requires
//    appropriate privileges.  This clock is affected by
//    discontinuous jumps in the system time (e.g., if the
//    system administrator manually changes the clock), and
//    by the incremental  adjustments performed by adjtime(3)
//    and NTP.
// 
// CLOCK_REALTIME_COARSE (since Linux 2.6.32; Linux-specific)
//    A  faster  but  less  precise version of CLOCK_REALTIME.
//    Use when you need very fast, but not fine-grained
//    timestamps.
// 
// CLOCK_MONOTONIC
//    Clock that cannot be set and represents monotonic time
//    since some unspecified starting point.  This clock  is
//    not affected by discontinuous jumps in the system time
//    (e.g., if the system  administrator  manually changes the
//    clock), but is affected by the incremental adjustments
//    performed by  adjtime(3) and NTP.
// 
// CLOCK_MONOTONIC_COARSE  (since  Linux 2.6.32; Linux-specific)
//    A faster but less precise version of  CLOCK_MONOTONIC.
//    Use  when  you  need  very fast, but not fine-grained
//    timestamps.
// 
// CLOCK_MONOTONIC_RAW (since Linux 2.6.28; Linux-specific)
//    Similar to CLOCK_MONOTONIC, but  provides  access to
//    a raw hardware-based time that is not subject to NTP
//    adjustments or the incremental adjustments performed
//    by adjtime(3).
// 
// CLOCK_BOOTTIME (since Linux 2.6.39; Linux-specific)
//    Identical  to  CLOCK_MONOTONIC,  except  it  also
//    includes any time that the system  is  suspended.  This
//    allows  applications to get a suspend-aware monotonic
//    clock without having to deal  with  the complications
//    of  CLOCK_REALTIME, which may have discontinuities if
//    the time is changed using settimeofday(2).
// 
// CLOCK_PROCESS_CPUTIME_ID
//    High-resolution per-process timer from the CPU.
// 
// CLOCK_THREAD_CPUTIME_ID
//    Thread-specific CPU-time clock.
// 

struct comma_t: numpunct<char> {
   char do_thousands_sep() const { return ','; }
   string do_grouping() const { return "\03"; }
};
locale comma (locale(), new comma_t());

void display (int clock_id, const char* clock_name) {
   cout << clock_name << ": ";
   struct timespec spec;
   int rc = clock_getres (clock_id, &spec);
   if (rc != 0) {
      cout << strerror (errno) << endl;
   }else {
      double resolution = double (spec.tv_sec) + spec.tv_nsec / 1.0e9;
      cout << resolution << " seconds" << endl;
   }
}

int main() {
   cout.imbue (comma);
   display (CLOCK_THREAD_CPUTIME_ID, "CLOCK_THREAD_CPUTIME_ID");
   display (CLOCK_PROCESS_CPUTIME_ID, "CLOCK_PROCESS_CPUTIME_ID");
   display (CLOCK_BOOTTIME, "CLOCK_BOOTTIME");
   display (CLOCK_MONOTONIC_RAW, "CLOCK_MONOTONIC_RAW");
   display (CLOCK_MONOTONIC_COARSE, "CLOCK_MONOTONIC_COARSE");
   display (CLOCK_MONOTONIC, "CLOCK_MONOTONIC");
   display (CLOCK_REALTIME_COARSE, "CLOCK_REALTIME_COARSE");
   display (CLOCK_REALTIME, "CLOCK_REALTIME");
}
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.13 2021-03-05 04:00:03-08 - - $
d65 1
a65 1
   cout << setw(20) << clock_name << ": ";
d71 2
a72 2
      double resolution = spec.tv_sec * 1.0e9 + spec.tv_nsec;
      cout << resolution << " nanoseconds" << endl;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.12 2021-03-05 03:59:40-08 - - $
a2 1
#incldue <iomanip>
d5 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.11 2021-03-05 03:59:24-08 - - $
d65 1
a65 1
   cout << setw(20) clock_name << ": ";
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.10 2021-03-04 17:15:48-08 - - $
d3 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.9 2021-03-04 17:15:18-08 - - $
d64 1
a64 1
   cout << clock_name << ": ";
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.8 2021-03-04 17:14:50-08 - - $
d71 1
a71 1
      cout << fixed << resolution << " nanoseconds" << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.7 2021-03-04 17:10:53-08 - - $
d71 1
a71 1
      cout << resolution << " nanoseconds" << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.6 2021-03-04 17:09:48-08 - - $
d57 6
d76 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.5 2021-03-04 17:08:27-08 - - $
d64 2
a65 2
      double resolution = spec.tv_sec + spec.tv_nsec / 1.0e9;
      cout << resolution * 10e6 << " microseconds" << endl;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.4 2021-03-04 17:07:45-08 - - $
d65 1
a65 1
      cout << resolution << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.3 2021-03-04 17:07:18-08 - - $
d65 1
a65 1
      cout << clock_name << resolution << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.2 2021-03-04 17:07:06-08 - - $
d61 1
a61 1
   if (rc !~= 0) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: clock-getres.cpp,v 1.1 2021-03-04 17:06:55-08 - - $
d3 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d59 1
a59 1
   int rc = clock_getres (clodk_id, &spec);
@
