head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2016.08.09.22.21.43;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.08.09.22.21.24;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.08.09.22.21.07;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.08.09.22.19.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.08.09.22.19.25;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.07.22.22.19.29;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: atomicclick.cpp,v 1.5 2016-08-09 15:21:24-07 - - $

// Hello to threads.

#include <atomic>
#include <iostream>
#include <thread>
#include <vector>
using namespace std;

constexpr size_t LOOPS = 10'000'000;

void clicker (size_t id, atomic<size_t>& atomic_counter) {
   for (size_t i = 0; i < LOOPS; ++i) ++atomic_counter;
   cout << "clicker " << id << " looped " << LOOPS
        << " finished atomic_counter " << atomic_counter << endl;
}

struct comma_t: numpunct<char> {
   char do_thousands_sep() const { return ','; }
   string do_grouping() const { return "\03"; }
};
locale comma (locale(), new comma_t());

int main () {
   cout.imbue (comma);
   atomic<size_t> atomic_counter {0};
   cout << "main starting" << endl;
   vector<thread> vecthr;
   for (size_t i = 0; i < 4; ++i) {
      vecthr.push_back (thread (clicker, i, ref (atomic_counter)));
   }
   for (auto& t: vecthr) t.join();
   cout << "main finished atomic_counter " << atomic_counter << endl;
   return 0;
}

//TEST// alias TIME='/usr/bin/time -f "%E elapsed, %S kernel, %U user"'
//TEST// for i in 1 2 3 4
//TEST// do
//TEST//    TIME atomicclick >atomicclick.out$i 2>&1
//TEST// done
//TEST// more atomicclick.out* >atomicclick.lis </dev/null
//TEST// mkpspdf atomicclick.ps atomicclick.cpp* atomicclick.lis

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: atomicclick.cpp,v 1.4 2016-08-09 15:21:07-07 - - $
d15 1
a15 1
   cout << "clicker " << id << "looped " << LOOPS
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: atomicclick.cpp,v 1.3 2016-08-09 15:19:43-07 - - $
a13 1
   cout << "clicker " << id << " looping " << LOOPS << " times" << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: atomicclick.cpp,v 1.2 2016-08-09 15:19:25-07 - - $
d16 2
a17 2
   cout << "clicker " << id << " finished atomic_counter "
        << atomic_counter << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: atomicclick.cpp,v 1.1 2016-07-22 15:19:29-07 - - $
d11 1
a11 1
constexpr size_t LOOPS = 1'000'000;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: atomicclick.cpp,v 1.4 2016-07-22 15:03:00-07 - - $
d20 6
d27 1
@
