head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2021.03.05.00.17.09;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.03.05.00.08.57;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.03.05.00.07.39;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.03.05.00.05.49;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.12.08.22.19.34;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.12.08.22.17.28;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: highrestime.cpp,v 1.5 2021-03-04 16:08:57-08 - - $

//
// NAME
//    proctime - print time used by process
//
// SYNOPSIS
//    proctime prog [args...]
//
// DESCRIPTION
//    Runs the program as a child process and when finished
//    prints the real_time, sys_time, and user_time used.
//

#include <chrono>
#include <cstring>
#include <iomanip>
#include <iostream>
using namespace std;

#include <sys/resource.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

using high_res_clock = chrono::high_resolution_clock;

string execname;

void sysfail (const string& object) {
   cerr << execname << ": " << object << ": " << strerror (errno)
        << endl;
   exit (errno | 0x80);
}

void usage() {
   cerr << "Usage: " << execname << " prog [args...]" << endl;
   exit (1);
}

double seconds (const struct timeval& time) {
   return double (time.tv_sec) + double (time.tv_usec) / 1.0e6;
}

int runprog (char** argv) {
   int pid = fork();
   if (pid < 0) sysfail ("fork()");
   if (pid == 0) {
      int exec = execvp (argv[0], argv);
      if (exec < 0) sysfail (argv[0]);
   }
   int status;
   waitpid (pid, &status, 0);
   return status;
}

void print_usage (double real_time, double sys_time, double user_time) {
  cout << std::fixed
       << setprecision(6) << real_time << " real, "
       << setprecision(6) << sys_time << " sys, "
       << setprecision(6) << user_time << " user.";
}

int main (int argc, char** argv) {
   execname = basename (argv[0]);
   if (argc < 2) usage();
   struct rusage child_usage;
   high_res_clock::time_point start = high_res_clock::now();
   int status = runprog (&argv[1]);
   getrusage (RUSAGE_CHILDREN, &child_usage);
   high_res_clock::time_point finish = high_res_clock::now();
   print_usage (chrono::duration<double> (finish - start).count(),
                seconds (child_usage.ru_stime),
                seconds (child_usage.ru_utime));
   status = status & 0x7F ? (status & 0x7F) | 0x80
                          : (status >> 8) & 0xFF;
   if (status) cout << " $?=" << status;
   cout << endl;
   return status;
}

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: highrestime.cpp,v 1.4 2021-03-04 16:07:39-08 - - $
d46 1
a46 2
void runprog (char** argv) {
   if (argv[0] == nullptr) usage();
d51 1
a51 1
      if (exec < 0) sysfail (string ("execvp(") + argv[0] + ")");
d55 1
a55 1
   printstatus (argv[0], status);
d59 1
a59 1
  cout << execname << ": seconds: " << std::fixed
d65 1
a65 1
int main (int, char** argv) {
d67 2
a68 1
   struct rusage usage;
d70 2
a71 2
   runprog (&argv[1]);
   getrusage (RUSAGE_CHILDREN, &usage);
d74 2
a75 2
                seconds (usage.ru_stime),
                seconds (usage.ru_utime));
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: highrestime.cpp,v 1.3 2021-03-04 16:05:49-08 - - $
a45 11
void printstatus (const char* prog, int status) {
   cout << execname << ": " << prog << ": ";
   if (status & 0xFF) {
      cout << strsignal (status & 0x7F);
      if (status & 0x8F) cout << " (core dumped)";
   }else {
      cout << "exit " << ((status >> 8) & 0xFF);
   }
   cout << endl;
}

d63 1
a63 1
       << setprecision(6) << user_time << " user." << endl;
d76 5
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: highrestime.cpp,v 1.2 2020-12-08 14:19:34-08 - - $
d84 1
a84 1
   print_usage (chrono::duration<double> (finish - start).count();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: highrestime.cpp,v 1.1 2020-12-08 14:17:28-08 - - $
d12 1
a12 1
//    prints the elapsed, kernel, and user times used.
d70 1
a70 1
void printusage (double elapsed, double kernel, double user) {
d72 3
a74 3
       << setprecision(6) << elapsed << " elapsed, "
       << setprecision(6) << kernel << " kernel, "
       << setprecision(6) << user << " user." << endl;
d84 3
a86 3
   printusage (chrono::duration<double> (finish - start).count();
               seconds (usage.ru_stime),
               seconds (usage.ru_utime));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: timeproc2.cpp,v 1.5 2020-12-08 14:15:26-08 - - $
a45 4
double diff_seconds (high_res_clock::duration time) {
   return chrono::duration<double> (time).count();
}

d84 1
a84 1
   printusage (diff_seconds (finish - start),
@
