head	1.53;
access;
symbols;
locks;
comment	@// @;


1.53
date	2020.10.13.19.10.07;	author -;	state -;
branches;
next	1.52;

1.52
date	2020.10.12.17.12.29;	author -;	state -;
branches;
next	1.51;

1.51
date	2020.10.12.17.11.22;	author -;	state -;
branches;
next	1.50;

1.50
date	2020.10.12.16.45.09;	author -;	state -;
branches;
next	1.49;

1.49
date	2020.10.12.16.43.38;	author -;	state -;
branches;
next	1.48;

1.48
date	2020.10.12.16.42.49;	author -;	state -;
branches;
next	1.47;

1.47
date	2019.04.25.00.54.40;	author -;	state -;
branches;
next	1.46;

1.46
date	2019.04.25.00.52.38;	author -;	state -;
branches;
next	1.45;

1.45
date	2019.02.14.23.44.45;	author -;	state -;
branches;
next	1.44;

1.44
date	2019.02.14.23.43.19;	author -;	state -;
branches;
next	1.43;

1.43
date	2019.02.14.23.42.25;	author -;	state -;
branches;
next	1.42;

1.42
date	2019.02.14.23.42.07;	author -;	state -;
branches;
next	1.41;

1.41
date	2019.02.14.23.40.42;	author -;	state -;
branches;
next	1.40;

1.40
date	2019.02.14.23.39.32;	author -;	state -;
branches;
next	1.39;

1.39
date	2019.02.14.23.37.49;	author -;	state -;
branches;
next	1.38;

1.38
date	2019.02.14.23.36.19;	author -;	state -;
branches;
next	1.37;

1.37
date	2019.02.14.23.33.57;	author -;	state -;
branches;
next	1.36;

1.36
date	2019.02.14.23.32.01;	author -;	state -;
branches;
next	1.35;

1.35
date	2019.02.14.23.31.26;	author -;	state -;
branches;
next	1.34;

1.34
date	2019.02.14.23.31.05;	author -;	state -;
branches;
next	1.33;

1.33
date	2019.02.14.23.29.49;	author -;	state -;
branches;
next	1.32;

1.32
date	2019.02.14.23.29.22;	author -;	state -;
branches;
next	1.31;

1.31
date	2019.02.14.23.29.06;	author -;	state -;
branches;
next	1.30;

1.30
date	2019.02.14.23.27.29;	author -;	state -;
branches;
next	1.29;

1.29
date	2019.02.14.23.26.56;	author -;	state -;
branches;
next	1.28;

1.28
date	2019.02.14.23.26.34;	author -;	state -;
branches;
next	1.27;

1.27
date	2019.02.14.23.26.19;	author -;	state -;
branches;
next	1.26;

1.26
date	2019.02.14.23.25.13;	author -;	state -;
branches;
next	1.25;

1.25
date	2019.02.14.23.24.39;	author -;	state -;
branches;
next	1.24;

1.24
date	2019.02.14.23.22.17;	author -;	state -;
branches;
next	1.23;

1.23
date	2019.02.14.23.21.41;	author -;	state -;
branches;
next	1.22;

1.22
date	2019.02.14.23.19.48;	author -;	state -;
branches;
next	1.21;

1.21
date	2019.02.14.23.19.41;	author -;	state -;
branches;
next	1.20;

1.20
date	2016.07.22.02.31.42;	author -;	state -;
branches;
next	1.19;

1.19
date	2016.07.22.02.31.12;	author -;	state -;
branches;
next	1.18;

1.18
date	2016.07.22.02.30.07;	author -;	state -;
branches;
next	1.17;

1.17
date	2016.07.22.02.28.20;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.07.21.04.20.11;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.07.20.23.48.25;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.07.20.23.48.10;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.07.20.23.45.37;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.07.20.23.43.54;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.07.20.23.43.31;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.05.19.22.18.07;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.02.06.03.05.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.02.06.03.04.37;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.06.03.04.26;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.02.06.03.04.05;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.06.03.02.17;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.06.03.01.53;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.06.02.59.18;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.06.02.59.07;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.06.12.22.20.21;	author -;	state -;
branches;
next	;


desc
@@


1.53
log
@-
@
text
@// $Id: demangle.cpp,v 1.52 2020-10-12 10:12:29-07 - - $

// Demangle a typeid(X).name() string

#include <cstdlib>
#include <iostream>
#include <list>
#include <map>
#include <memory>
#include <string>
#include <typeinfo>
#include <vector>
using namespace std;

#include <cxxabi.h>
template <typename type>
string demangle (const type &object) {
   const char *const name = typeid (object).name();
   int status = 0;
   using deleter = void (*) (void*);
   unique_ptr<char,deleter> result {
      abi::__cxa_demangle (name, nullptr, nullptr, &status),
      std::free,
   };
   return status == 0 ? result.get() : name; 
}

class foo { }; 
class bar: foo { }; 
class baz: bar { }; 
template <typename T> class tmpl { T x; };

template <typename type>
void print_demangled (const string &str) {
   type obj {};
   cout << str << ": sizeof = " << sizeof obj << endl;
   cout << "   mangled:   " << typeid(obj).name() << endl;
   cout << "   demangled: " << demangle (obj) << endl;
}

template <typename type>
void print_demangled (const string &str, const type& obj) {
   print_demangled<type> (str);
   cout << "   value: (" << obj << ")" << endl;
}


#define DEMANGLE_T(X) print_demangled<X> (#X)
#define DEMANGLE_V(X) print_demangled (#X, X)
int main() {
   DEMANGLE_T (bool);
   DEMANGLE_T (char);
   DEMANGLE_T (signed char);
   DEMANGLE_T (unsigned char);
   DEMANGLE_T (short);
   DEMANGLE_T (signed short);
   DEMANGLE_T (unsigned short);
   DEMANGLE_T (int);
   DEMANGLE_T (signed int);
   DEMANGLE_T (unsigned int);
   DEMANGLE_T (long);
   DEMANGLE_T (signed long);
   DEMANGLE_T (unsigned long);
   DEMANGLE_T (long long);
   DEMANGLE_T (float);
   DEMANGLE_T (double);
   DEMANGLE_T (long double);
   DEMANGLE_T (size_t);
   cout << "\f" << endl;
   DEMANGLE_T (foo);
   DEMANGLE_T (bar);
   DEMANGLE_T (baz);
   DEMANGLE_T (tmpl<int>);
   DEMANGLE_T (vector<string>);
   DEMANGLE_T (vector<int>);
   DEMANGLE_T (decltype(vector<int>().size()));
   DEMANGLE_T (decltype(vector<int>().begin()));
   DEMANGLE_T (list<vector<long>>);
   DEMANGLE_T (decltype(map<string,int>()));
   DEMANGLE_V (__FILE__);
   DEMANGLE_V (__LINE__);
   DEMANGLE_V (__DATE__);
   DEMANGLE_V (__TIME__);
   DEMANGLE_V (__func__);
   DEMANGLE_V (__PRETTY_FUNCTION__);
   return 0;
}

//TEST// ./demangle >demangle.out 2>&1
//TEST// mkpspdf demangle.ps demangle.cpp* demangle.out

@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.51 2020-10-12 10:11:22-07 - - $
d76 1
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.47 2019-04-24 17:54:40-07 - - $
a12 1

a50 1
   using map_string_int = map<string,int>;
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.48 2020-10-12 09:42:49-07 - - $
d52 1
d78 1
d80 1
a80 3
   using map_string_int = map<string,int>;
   DEMANGLE_T (map_string_int);
//   DEMANGLE_T ((map<string,int>));
@


1.49
log
@-
@
text
@d80 1
a80 1
   DEMANGLE_T ((map<string,int>));
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.47 2019-04-24 17:54:40-07 - - $
d78 1
a79 1
   using map_string_int = map<string,int>;
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.46 2019-04-24 17:52:38-07 - - $
a51 1
   using map_string_int = map<string,int>;
d79 2
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.45 2019-02-14 15:44:45-08 - - $
d45 1
a45 1
   cout << "   value: " << obj << endl;
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.44 2019-02-14 15:43:19-08 - - $
d37 1
a37 1
   cout << str << " => " << sizeof obj << endl;
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.43 2019-02-14 15:42:25-08 - - $
d44 1
a44 1
   print_demangled (str);
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.42 2019-02-14 15:42:07-08 - - $
d44 1
a44 3
   cout << str << " => " << sizeof obj << endl;
   cout << "   mangled:   " << typeid(obj).name() << endl;
   cout << "   demangled: " << demangle (obj) << endl;
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.41 2019-02-14 15:40:42-08 - - $
d82 6
a87 6
   //DEMANGLE_V (__FILE__);
   //DEMANGLE_V (__LINE__);
   //DEMANGLE_V (__DATE__);
   //DEMANGLE_V (__TIME__);
   //DEMANGLE_V (__func__);
   //DEMANGLE_V (__PRETTY_FUNCTION__);
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.40 2019-02-14 15:39:32-08 - - $
d42 8
d52 1
a52 1
//#define DEMANGLE_V(X) print_demangled (#X, X)
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.39 2019-02-14 15:37:49-08 - - $
d49 1
a50 1
   DEMANGLE_T (signed char);
d52 1
d55 1
d58 1
d60 1
d63 1
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.38 2019-02-14 15:36:19-08 - - $
d35 2
a36 2
void print_demangled (const string &str, const type& obj = {}) {
   //type obj {};
a39 1
   cout << "   value: " << obj << endl;
d44 1
a44 1
#define DEMANGLE_V(X) print_demangled (#X, X)
d69 6
a74 6
   DEMANGLE_V (__FILE__);
   DEMANGLE_V (__LINE__);
   DEMANGLE_V (__DATE__);
   DEMANGLE_V (__TIME__);
   DEMANGLE_V (__func__);
   DEMANGLE_V (__PRETTY_FUNCTION__);
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.37 2019-02-14 15:33:57-08 - - $
d40 1
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.36 2019-02-14 15:32:01-08 - - $
d35 2
a36 2
void print_demangled (const string &str) {
   type obj {};
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.35 2019-02-14 15:31:26-08 - - $
d35 2
a36 1
void print_demangled (const string &str, const type &obj) {
d43 1
a43 1
#define DEMANGLE_T(X) print_demangled (#X, X())
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.34 2019-02-14 15:31:05-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, static_cast<X>())
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.33 2019-02-14 15:29:49-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, static_cast<X>(0))
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.32 2019-02-14 15:29:22-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, static_cast<X>({}))
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.31 2019-02-14 15:29:06-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, (X){})
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.30 2019-02-14 15:27:29-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, (X)())
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.29 2019-02-14 15:26:56-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, X())
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.28 2019-02-14 15:26:34-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, (X)0)
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.27 2019-02-14 15:26:19-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, (X))
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.26 2019-02-14 15:25:13-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, X)
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.25 2019-02-14 15:24:39-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, X{})
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.24 2019-02-14 15:22:17-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, X())
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.23 2019-02-14 15:21:41-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, (X)())
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.22 2019-02-14 15:19:48-08 - - $
d42 1
a42 1
#define DEMANGLE_T(X) print_demangled (#X, X())
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.21 2019-02-14 15:19:41-08 - - $
a44 2
   using schar = signed char;
   using uchar = unsigned char;
d48 2
a49 2
   DEMANGLE_T (uchar);
   DEMANGLE_T (schar);
d51 1
a51 1
   DEMANGLE_T (ushort);
d53 1
a53 1
   DEMANGLE_T (uint);
d55 1
a55 1
   DEMANGLE_T (ulong);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.20 2016-07-21 19:31:42-07 - - $
a46 1
   using ulong = unsigned long;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.19 2016-07-21 19:31:12-07 - - $
a46 2
   using ushort = unsigned short;
   using uint = unsigned int;
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.18 2016-07-21 19:30:07-07 - - $
d64 1
a64 1
   cout << "\f";
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.17 2016-07-21 19:28:20-07 - - $
d64 1
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.16 2016-07-20 21:20:11-07 - - $
d41 1
d72 4
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.15 2016-07-20 16:48:25-07 - - $
d76 1
a76 1
//TEST// demangle >demangle.out 2>&1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.14 2016-07-20 16:48:10-07 - - $
d41 2
a42 1
#define DEMANGLE(X) print_demangled (#X, X())
d50 23
a72 23
   DEMANGLE (bool);
   DEMANGLE (char);
   DEMANGLE (uchar);
   DEMANGLE (schar);
   DEMANGLE (short);
   DEMANGLE (ushort);
   DEMANGLE (int);
   DEMANGLE (uint);
   DEMANGLE (long);
   DEMANGLE (ulong);
   DEMANGLE (float);
   DEMANGLE (double);
   DEMANGLE (size_t);
   DEMANGLE (foo);
   DEMANGLE (bar);
   DEMANGLE (baz);
   DEMANGLE (tmpl<int>);
   DEMANGLE (vector<string>);
   DEMANGLE (vector<int>);
   DEMANGLE (list<vector<long>>);
   DEMANGLE (map_string_int);
   DEMANGLE (__func__);
   DEMANGLE (__PRETTY_FUNCTION__);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.13 2016-07-20 16:45:37-07 - - $
d41 1
a41 1
#define DEMANGLE(X) print_demangled (#X, (X))
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.12 2016-07-20 16:43:54-07 - - $
d41 1
a41 1
#define DEMANGLE(X) print_demangled (#X, X())
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.10 2015-05-19 15:18:07-07 - - $
d70 2
@


1.11
log
@-
@
text
@a16 1

d43 5
d51 2
a52 2
   DEMANGLE (unsigned char);
   DEMANGLE (signed char);
d54 1
a54 1
   DEMANGLE (unsigned short);
d56 1
a56 1
   DEMANGLE (unsigned int);
d58 1
a58 1
   DEMANGLE (unsigned long);
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.9 2015-02-05 19:05:17-08 - - $
d17 1
a43 5
   using schar = signed char;
   using uchar = unsigned char;
   using ushort = unsigned short;
   using uint = unsigned int;
   using ulong = unsigned long;
d47 2
a48 2
   DEMANGLE (uchar);
   DEMANGLE (schar);
d50 1
a50 1
   DEMANGLE (ushort);
d52 1
a52 1
   DEMANGLE (uint);
d54 1
a54 1
   DEMANGLE (ulong);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.8 2015-02-05 19:04:37-08 - - $
d20 7
a26 6
   int status;
   char* demangled = abi::__cxa_demangle (name, nullptr, 0, &status);
   if (demangled == nullptr) return name;
   string result {status == 0 ? demangled : name};
   free (demangled);
   return result;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.7 2015-02-05 19:04:26-08 - - $
d23 1
a23 1
   string result {status != 0 ? demangled : name};
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.6 2015-02-05 19:04:05-08 - - $
d21 1
a21 1
   char* demangled = abi::__cxa_demangle (name, nullptr, 0, &statusi);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.1 2014-06-12 15:20:21-07 - - $
d21 1
a21 2
   const char* demangled =
               abi::__cxa_demangle (name, nullptr, 0, &statusi);
@


1.5
log
@-
@
text
@d21 6
a26 4
   unique_ptr<char*,void(*)(void*)> demangled {
               abi::__cxa_demangle (name, nullptr, 0, &statusi), free};
   if (status != 0 || demangled == nullptr) return name;
   return *demangled;
@


1.4
log
@-
@
text
@d21 1
a21 1
   unique_ptr<char,void(*)(void*)> demangled {
@


1.3
log
@-
@
text
@d24 1
a24 1
   return demangled;
@


1.2
log
@-
@
text
@d24 1
a24 1
   return *demangled;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: demangle.cpp,v 1.8 2014-06-12 14:19:43-07 - - $
d22 3
a24 3
               abi::__cxa_demangle (name, NULL, 0, &statusi), free};
   if (status != 0 || demangled == NULL) return name;
   return demangled;
@
