head	1.25;
access;
symbols;
locks;
comment	@// @;


1.25
date	2021.03.08.07.22.46;	author -;	state -;
branches;
next	1.24;

1.24
date	2021.03.08.07.16.18;	author -;	state -;
branches;
next	1.23;

1.23
date	2021.03.08.07.15.19;	author -;	state -;
branches;
next	1.22;

1.22
date	2021.03.08.07.12.01;	author -;	state -;
branches;
next	1.21;

1.21
date	2021.03.08.07.11.32;	author -;	state -;
branches;
next	1.20;

1.20
date	2021.03.08.07.11.03;	author -;	state -;
branches;
next	1.19;

1.19
date	2021.03.08.07.10.18;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.03.08.07.08.10;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.03.08.07.05.32;	author -;	state -;
branches;
next	1.16;

1.16
date	2021.03.08.07.05.06;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.03.08.07.04.02;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.03.08.07.03.02;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.03.08.07.02.17;	author -;	state -;
branches;
next	1.12;

1.12
date	2021.03.08.07.01.18;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.03.08.07.00.55;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.03.08.06.51.56;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.03.08.06.51.40;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.03.08.06.50.08;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.03.08.06.49.52;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.03.08.06.43.34;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.03.08.06.40.18;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.03.08.06.02.45;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.03.08.05.54.40;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.03.08.05.53.06;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.03.08.05.32.14;	author -;	state -;
branches;
next	;


desc
@@


1.25
log
@-
@
text
@// $RCSfile: httpget.cpp,v $$Revision: 1.24 $

//
// httpget - get a web page from some host
//
// usage:
//    httpget [-p port] http_host pathname
//
// Default port is 80.  Gets the given page from the given host.
//

#include <cerrno>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <string>
using namespace std;

#include <libgen.h>
#include <netdb.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#define DEFAULT_PORT 80

struct program_options {
   const char* execname;
   int status = EXIT_SUCCESS;
   const char* host;
   in_port_t port = DEFAULT_PORT;
   const char* path;
   void init (int argc, char** argv);
   void usage();
} program;

void program_options::init (int argc, char** argv) {
   execname = argv[0];
   cout << "Command:";
   for (int argi = 0; argi != argc; ++argi) cout << " " << argv[argi];
   cout << endl;
   for(;;) {
      int opt = getopt (argc, argv, "p:");
      if (opt == EOF) break;
      switch (opt) {
         case 'p': port = atol (optarg); break;
         default: usage();
      }
   }
   if (optind + 2 != argc) usage();
   host = argv[optind];
   path = argv[optind + 1];
}

void program_options::usage() {
   cerr << "Usage: " << execname << " [-p port] [host [path]]" << endl;
   exit (EXIT_FAILURE);
}

struct http_socket {
   const char* host;
   in_port_t port;
   int sock_fd = 0;
   struct hostent* hostent_ptr = nullptr;
   http_socket (const char*, in_port_t);
   ~http_socket() { close (sock_fd); }
   http_socket (const http_socket&) = delete;
   http_socket& operator= (const http_socket&) = delete;
   void open();
   struct error: public runtime_error {
      error (const string& object, const char* message): 
                  runtime_error (object + ": " + message) {
      }
   };
};

http_socket::http_socket (const char* host_, in_port_t port_):
            host (host_), port (port_) {
   hostent_ptr = gethostbyname (host);
   if (not hostent_ptr) throw error (host, hstrerror (h_errno));
   cout << "host:port = " << host << ":"
        << port << endl;
   cout << "host_name = " << hostent_ptr->h_name << endl;
   for (char** alias = hostent_ptr->h_aliases;
        *alias != nullptr; ++alias) {
      cout << "host_alias = " << *alias << endl;
   }
   for (char** addr = hostent_ptr->h_addr_list;
        *addr != nullptr; ++addr) {
      cout << "host_addr = ";
      for (size_t byte = 0; byte < 4; ++byte) {
         if (byte > 0) cout << ".";
         cout << ((*addr)[byte] & 0xFF);
      }
      cout << endl;
   }
}

void http_socket::open() {

   // create a socket to connect to other machine
   string error_obj = "connect("s + host + ":" + to_string (port) + ")";
   sock_fd = socket (AF_INET, SOCK_STREAM, 0);
   if (sock_fd < 0) throw error (error_obj, strerror (errno));

   // create a struct sockaddr and connect it to the socket
   struct sockaddr_in sock;
   sock.sin_family = AF_INET; 
   sock.sin_port = htons (port);
   sock.sin_addr = *reinterpret_cast<in_addr*> (hostent_ptr->h_addr);
   int rc = connect (sock_fd, reinterpret_cast<sockaddr*> (&sock),
                     sizeof sock);
   if (rc < 0) throw error (error_obj, strerror (errno));
}

int main (int argc, char** argv) {
   program.init (argc, argv);
   try {
      http_socket server (program.host, program.port);
      server.open();

      // read info from the remote and convert to host format
      string getmsg = "GET "s + program.path + "\r\n";
      cout << getmsg;
      write (server.sock_fd, getmsg.c_str(), getmsg.size());
      for(;;){
         char buffer[4096];
         int nbytes = read (server.sock_fd, &buffer, sizeof buffer - 1);
         if (nbytes == 0) break;
         buffer[nbytes] = '\0';
         printf ("%s", buffer);
      }

   }catch (http_socket::error& error) {
      cerr << program.execname << ": " << error.what() << endl;
      program.status = EXIT_FAILURE;
   }
   return program.status;
}

//TEST// echo $0: Running httpget tests: >httpget.out
//TEST// ./httpget >>httpget.out 2>&1
//TEST// ./httpget Unknown.Host >>httpget.out 2>&1
//TEST// ./httpget soe.ucsc.edu >>httpget.out 2>&1
//TEST// ./httpget www2.ucsc.edu /courses/cmps109-wm/ >>httpget.out 2>&1
//TEST// mkpspdf httpget.ps httpget.c* httpget.out

@


1.24
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.23 $
d124 1
a124 1
      string getmsg = "GET "s + program.path + "\n";
@


1.23
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.22 $
d72 2
a73 2
      error (const char* object, const char* message): 
                  runtime_error (object + ": "s + message) {
@


1.22
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.21 $
d73 1
a73 1
                  runtime_error (object + " "s + message) {
d103 1
d105 1
a105 1
   if (sock_fd < 0) throw error ("socket()", strerror (errno));
d114 1
a114 1
   if (rc < 0) throw error ("connect()", strerror (errno));
@


1.21
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.20 $
d70 1
a70 1
   void open (in_port_t);
d120 1
a120 1
      server.open(.port);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.19 $
d78 2
a79 2
http_socket::http_socket (const char* host, in_port_t port):
            host (host), port (port) {
@


1.19
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.17 $
d79 1
a79 1
            hostname (host), portnum (port) {
@


1.18
log
@-
@
text
@d62 2
a63 1
   const char* hostname;
d78 2
a79 2
http_socket::http_socket (const char* host, in_port_t port) {
   hostname = host;
d100 1
a100 1
void http_socket::open (in_port_t port) {
d120 1
a120 1
      server.open (program.port);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.16 $
d62 1
d78 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.15 $
d132 1
a132 1
      cerr << program.name << ": " << error.what() << endl;
a134 1
   // all done
@


1.15
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.13 $
d62 1
a62 1
   int socket_fd = 0;
d65 1
a65 1
   ~http_socket() { close (socket_fd); }
d100 2
a101 2
   socket_fd = socket (AF_INET, SOCK_STREAM, 0);
   if (socket_fd < 0) throw error ("socket()", strerror (errno));
d108 1
a108 1
   int rc = connect (socket_fd, reinterpret_cast<sockaddr*> (&sock),
d122 1
a122 1
      write (server.socket_fd, getmsg.c_str(), getmsg.size());
d125 1
a125 2
         int nbytes = server.read (server.socket_fd,
                     &buffer, sizeof buffer - 1);
@


1.14
log
@-
@
text
@d125 2
a126 1
         nbytes = server.read (socket_fd, &buffer, sizeof buffer - 1);
d134 1
a134 1
      program.status = EXIT_FAIILURE;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.12 $
d120 3
a122 3
      string getmsg = "GET "s + program.path;
      cout << getmsg << endl;
      write (server.socket_fd, getmsg.str() + "\n", getmsg.size() + 1);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.11 $
d16 1
d122 1
a122 1
      write (server.socket_fd, string.str() + "\n", string.size() + 1);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.10 $
d121 1
a121 1
      write (server.sockfd, string.str() + "\n", string.size() + 1);
d124 1
a124 1
         nbytes = server.read (sockfd, &buffer, sizeof buffer - 1);
@


1.10
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.5 $
d29 1
d114 15
a128 14
   http_socket server (program.host, program.port);
   server.open (program.port);

// // read info from the remote and convert to host format
// char buffer[4096];
// int nbytes = sprintf (buffer, "GET %s\n", program.path);
// printf ("request: %s", buffer);
// write (sockfd, buffer, nbytes);
// for(;;){
//    nbytes = read (sockfd, &buffer, sizeof buffer - 1);
//    if (nbytes == 0) break;
//    buffer[nbytes] = '\0';
//    printf ("%s", buffer);
// }
d130 4
d135 1
a135 1
   return EXIT_SUCCESS;
@


1.9
log
@-
@
text
@d89 1
a89 1
         cout << (*addr)[byte] & 0xFF;
@


1.8
log
@-
@
text
@d87 1
a87 1
      for (size_t byte = 0; byte < 3; ++byte) {
d89 1
a89 1
         cout << unsigned ((*addr)[byte]);
@


1.7
log
@-
@
text
@d80 1
a80 1
   for (const char** alias = hostent_ptr->h_aliases;
d84 1
a84 1
   for (const char** addr = hostent_ptr->h_addr_list;
@


1.6
log
@-
@
text
@d80 1
a80 1
   for (char** alias = hostent_ptr->h_aliases;
d83 9
@


1.5
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.cpp,v $$Revision: 1.1 $
d79 1
a79 1
   cout << "host_name = " << hostent_ptr << endl;
@


1.4
log
@-
@
text
@d29 1
d31 1
a31 2
   const char* host;
   const char* pathname;
d51 1
a51 1
   pathname = argv[optind + 1];
d55 1
a55 1
   cerr << "Usage: " << execname << " [-port] [host [path]]" << endl;
d59 20
a78 13
struct socket_info {
   struct hostent* hostent_ptr;
   void init();
   void crash (const char* object, const char* message);
} http_hostinfo;

void socket_info::init() {
   hostent_ptr = gethostbyname (program.host);
   if (hostent_ptr == nullptr) {
      crash (program.host, hstrerror (h_errno));
   }
   cout << "host:port = " << program.host << ":"
        << program.port << endl;
d81 1
a81 1
        alias != nullptr; ++alias) {
d86 1
a86 9
void socket_info::crash (const char *object, const char *message) {
   cerr << program.execname << ": " << object
        << ": " << message << endl;
   exit (EXIT_FAILURE);
}

int main (int argc, char** argv) {
   program.init (argc, argv);
   http_hostinfo.init();
d89 2
a90 2
   int sockfd = socket (AF_INET, SOCK_STREAM, 0);
   if (sockfd < 0) program.crash ("socket()", strerror (errno));
d95 23
a117 16
   sock.sin_port = htons (program.port);
   sock.sin_addr = *(struct in_addr *) hostp->h_addr;
   int rc = connect (sockfd, (struct sockaddr *) &sock, sizeof sock);
   if (rc < 0) socket_info.crash ("connect()", strerror (errno));

   // read info from the remote and convert to host format
   char buffer[4096];
   int nbytes = sprintf (buffer, "GET %s\n", http_path);
   printf ("request: %s", buffer);
   write (sockfd, buffer, nbytes);
   for(;;){
      nbytes = read (sockfd, &buffer, sizeof buffer - 1);
      if (nbytes == 0) break;
      buffer[nbytes] = '\0';
      printf ("%s", buffer);
   }
a119 1
   close (sockfd);
@


1.3
log
@-
@
text
@d30 1
a30 1
   const char* http_host;
d32 1
a32 1
   init (int argc, char** argv);
a33 1
   void crash (const char* object, const char* message);
d36 1
a36 1
program_options::init (int argc, char** argv) {
d50 1
a50 1
   http_host = argv[optind];
a58 5
void program_options::crash (const char *object, const char *message) {
   cerr << execname << ": " << object << ": " << message << endl;
   exit (EXIT_FAILURE);
}

d62 1
d66 1
a66 1
   hostent_ptr = gethostbyname (program.http_host);
d68 1
a68 1
      program.crash (program.http_host, hstrerror (h_errno));
d70 2
a71 2
   cout << "host:port = " << progname.http_host << ":"
        << progname.port << endl;
d73 1
a73 1
   for (const char** alias = hostent_ptr->h_aliases;
d79 6
d99 1
a99 1
   if (rc < 0) program.crash ("connect()", strerror (errno));
@


1.2
log
@-
@
text
@d46 1
a46 1
         case 'p': atol (optarg); break;
d76 1
a76 1
        << progname.http_port << endl;
a81 1
   
d90 1
a90 1
   if (sockfd < 0) crash ("socket()", strerror (errno));
d95 1
a95 1
   sock.sin_port = htons (http_port);
d98 1
a98 1
   if (rc < 0) crash ("connect()", strerror (errno));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $RCSfile: httpget.c,v $$Revision: 1.2 $
d13 1
a13 1
#include <cstdio>
a20 1
#include <stdlib.h>
d34 1
d60 2
a61 4
void crash (const char *object, const char *message) {
   fflush (stdout);
   fprintf (stderr, "%s: %s: %s\n", exec_name, object, message);
   fflush (stderr);
d65 9
a73 6
void print_host_port (char *http_host, struct hostent *hostp,
                      int http_port) {
   printf ("host = %s = %s =", http_host, hostp->h_name);
   for (int i = 0; i < 4; i++) {
      printf ("%c%d", i == 0 ? ' ' : '.',
              (unsigned char) hostp->h_addr[i]);
d75 8
a82 1
   printf ("\nport = %d\n", http_port);
a84 1

d87 1
a87 9
   if (argc > 0 && **argv == '-') http_port = atoi ((argc--, *argv++));
   char *http_host = argc > 0 ? (argc--, *argv++) : "localhost";
   char *http_path = argc > 0 ? (argc--, *argv++) : "/";
   if (argc != 0) usage();

   // get inet address of host and print it
   struct hostent *hostp = gethostbyname (http_host);
   if (hostp == 0) crash (http_host, hstrerror (h_errno));
   print_host_port (http_host, hostp, http_port);
@
