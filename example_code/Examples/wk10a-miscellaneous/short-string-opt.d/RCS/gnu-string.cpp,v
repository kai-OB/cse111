head	1.21;
access;
symbols;
locks;
comment	@// @;


1.21
date	2016.08.03.23.23.58;	author -;	state -;
branches;
next	1.20;

1.20
date	2016.08.03.23.23.28;	author -;	state -;
branches;
next	1.19;

1.19
date	2016.08.03.23.22.24;	author -;	state -;
branches;
next	1.18;

1.18
date	2016.08.03.23.15.38;	author -;	state -;
branches;
next	1.17;

1.17
date	2016.08.03.23.11.24;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.08.03.23.02.07;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.08.03.23.00.34;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.08.03.22.59.33;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.08.03.22.58.08;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.08.03.22.57.38;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.08.03.22.54.11;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.08.03.22.52.33;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.08.03.22.52.19;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.08.03.22.36.02;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.08.03.22.33.22;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.08.03.22.31.03;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.08.03.22.29.59;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.08.03.22.25.43;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.08.03.22.23.22;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.08.03.21.55.11;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.08.03.21.54.33;	author -;	state -;
branches;
next	;


desc
@@


1.21
log
@-
@
text
@// $Id: gnu-string.cpp,v 1.20 2016-08-03 16:23:28-07 - - $

// G++ basic_string for gcc 4.*.
// Documentation taken from source code.
// Code cleaned up a little.

#include <cstring>
#include <iostream>
using namespace std;

template <typename char_type>
struct basic_gnustr {
   struct repr_ {
      size_t size_;
      size_t capacity_;
      size_t refcount_;
   }; // NOTE:  not a field.
   static constexpr size_t repr_size = sizeof (repr_);
   static constexpr size_t char_size = sizeof (char_type);
   static constexpr size_t repr_chars = repr_size / char_size;
   char_type* pointer_;

   repr_* repr() {
      repr_* repr_addr = reinterpret_cast<repr_*>(pointer_);
      return &repr_addr[-1];
   }

   size_t size() { return repr()->size_; }
   size_t capacity() { return repr()->capacity_; }
   char_type& operator[] (size_t index) { return pointer_[index]; }
   const char_type* c_str() { return pointer_; }

   basic_gnustr(): pointer_(nullptr) {}
   ~basic_gnustr() { if (pointer_) delete[] repr(); }

   basic_gnustr (size_t size) {
      pointer_ = new char_type[repr_chars + size + 1] + repr_chars;
      repr()->size_ = size;
      repr()->capacity_ = size + 1;
      repr()->refcount_ = 1;
      pointer_[0] = 0;
   }

   basic_gnustr (const char_type* str): basic_gnustr (
      [](const char_type* begin) {
         const char_type* end = begin;
         while(*end++) continue;
         return end - begin;
      }(str)
   ) {
      memcpy (pointer_, str, sizeof (char_type) * size());
      pointer_[size()] = 0;
   }

};


using gnu_string = basic_gnustr<char>;

#define SHOW(X) cout << #X << " = " << X << endl;
int main() {
   gnu_string s ("Hello");
   SHOW (s.repr());
   SHOW (static_cast<void*>(s.pointer_));
   SHOW (s.repr()->size_);
   SHOW (s.repr()->capacity_);
   SHOW (s.repr()->refcount_);
   SHOW (s.pointer_);
   SHOW (s.c_str());
}

//TEST// valgrind gnu-string >gnu-string.out 2>gnu-string.err
//TEST// more gnu-string.out gnu-string.err >gnu-string.lis </dev/null
//TEST// rm gnu-string.out gnu-string.err
//TEST// mkpspdf gnu-string.ps gnu-string.cpp* gnu-string.lis

/**
* @@class basic_string basic_string.h <string>
* @@brief  Managing sequences of characters and character-like objects.
*
* @@ingroup strings
* @@ingroup sequences
*
* @@tparam _CharT  Type of character
* @@tparam _Traits  Traits for character type, defaults to
*                  char_traits<_CharT>.
* @@tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
*
* Meets the requirements of a <a href="tables.html#65">container</a>, a
* <a href="tables.html#66">reversible container</a>, and a
* <a href="tables.html#67">sequence</a>.  Of the
* <a href="tables.html#68">optional sequence requirements</a>, only
* @@c push_back, @@c at, and @@c %array access are supported.
*
* @@doctodo
*
*
* Documentation?  What's that?
* Nathan Myers <ncm@@cantrip.org>.
*

* A string looks like this:
*
* @@code
*                                       [_Rep]
*                                       _M_length
*  [basic_string<char_type>]            _M_capacity
*  _M_dataplus                          _M_refcount
*  _M_p ---------------->               unnamed array of char_type
* @@endcode
*
* Where the _M_p points to the first character in the string, and
* you cast it to a pointer-to-_Rep and subtract 1 to get a
* pointer to the header.
*
* This approach has the enormous advantage that a string object
* requires only one allocation.  All the ugliness is confined
* within a single %pair of inline functions, which each compile to
* a single @@a add instruction: _Rep::_M_data(), and
* string::_M_rep(); and the allocation function which gets a
* block of raw bytes and with room enough and constructs a _Rep
* object at the front.
*
* The reason you want _M_data pointing to the character %array and
* not the _Rep is so that the debugger can see the string
* contents. (Probably we should add a non-inline member to get
* the _Rep for the debugger to use, so users can check the actual
* string length.)
*
* Note that the _Rep object is a POD so that you can have a
* static <em>empty string</em> _Rep object already @@a constructed before
* static constructors have run.  The reference-count encoding is
* chosen so that a 0 indicates one reference, so you never try to
* destroy the empty-string _Rep object.
*
* All but the last paragraph is considered pretty conventional
* for a C++ string implementation.
*/
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.19 2016-08-03 16:22:24-07 - - $
d47 1
a47 1
         while(*end++);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.18 2016-08-03 16:15:38-07 - - $
d46 1
a46 1
         char_type* end = begin;
d49 1
a49 1
      }
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.17 2016-08-03 16:11:24-07 - - $
d44 7
a50 7
   size_t strlen (const char* str) {
      size_t len = 0;
      while (*str++) ++len;
      return len;
   }

   basic_gnustr (const char_type* str): basic_gnustr (strlen (str)) {
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.16 2016-08-03 16:02:07-07 - - $
d73 1
a73 1
//TEST// more gnu-string.out gnu-string.err >gnu-string.lis
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.15 2016-08-03 16:00:34-07 - - $
d72 4
a75 2
//TEST// valgrind gnu-string >gnu-string.out 2>&1
//TEST// mkpspdf gnu-string.ps gnu-string.cpp* gnu-string.out
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.14 2016-08-03 15:59:33-07 - - $
d99 1
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.13 2016-08-03 15:58:08-07 - - $
d64 1
a64 1
   SHOW (&s.pointer_);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.12 2016-08-03 15:57:38-07 - - $
d65 3
a67 3
   SHOW (s.size_);
   SHOW (s.capacity_);
   SHOW (s.refcount_);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.11 2016-08-03 15:54:11-07 - - $
d60 1
a60 1
#define SHOW(X) cout << #X << ": " << &X << "->" << X << endl;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.10 2016-08-03 15:52:33-07 - - $
d60 1
d63 7
a69 1
   cout << s.c_str() << "(" << s.size() << ")" << endl;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.9 2016-08-03 15:52:19-07 - - $
d36 4
a39 4
   basic_gnustr (size_t capacity) {
      pointer_ = new char_type[repr_chars + capacity + 1] + repr_chars;
      repr()->size_ = 0;
      repr()->capacity_ = capacity;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.8 2016-08-03 15:36:02-07 - - $
d24 1
a24 1
      repr_* repr_addr reinterpret_cast<repr_*>(pointer_);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.7 2016-08-03 15:33:22-07 - - $
d13 1
a13 1
   struct repr {
d18 1
a18 1
   static constexpr size_t repr_size = sizeof (repr);
d23 3
a25 3
   repr* repr_addr() {
      repr* repr_ptr = reinterpret_cast<repr*>(pointer_);
      return &repr_ptr[-1];
d28 2
a29 2
   size_t size() { return repr_addr()->size_; }
   size_t capacity() { return repr_addr()->capacity_; }
d34 1
a34 1
   ~basic_gnustr() { if (pointer_) delete[] repr_addr(); }
d37 4
a40 4
      pointer_ = new char_type[repr_chars + capacity + 1] - repr_chars;
      repr_addr()->size_ = 0;
      repr_addr()->capacity_ = capacity;
      repr_addr()->refcount_ = 1;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.6 2016-08-03 15:31:03-07 - - $
d24 2
a25 1
      return &(reinterpret_cast<repr*>(pointer_)[-1]);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.5 2016-08-03 15:29:59-07 - - $
d36 1
a36 1
      pointer_ = new char_type[repr_chars + capacity + 1];
a39 1
      pointer_ += repr_size;
d55 2
a66 1

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.4 2016-08-03 15:25:43-07 - - $
d40 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.3 2016-08-03 15:23:22-07 - - $
d18 3
a20 2
   static constexpr size_t repr_chars
               = sizeof (repr) / sizeof (char_type);
d36 1
a36 1
      pointer_ = new char_type[size() + repr_chars];
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: gnu-string.cpp,v 1.1 2016-08-03 14:54:33-07 - - $
d7 1
d35 1
a35 1
      pointer_ = new char_type[size + repr_chars];
a52 2
   const char_type* c_str() { return pointer_; }

d58 1
a58 1
   cout << s.c_str() << endl;
d61 3
d66 2
a67 2
*  @@class basic_string basic_string.h <string>
*  @@brief  Managing sequences of characters and character-like objects.
d69 2
a70 2
*  @@ingroup strings
*  @@ingroup sequences
d72 50
a121 50
*  @@tparam _CharT  Type of character
*  @@tparam _Traits  Traits for character type, defaults to
*                   char_traits<_CharT>.
*  @@tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
*
*  Meets the requirements of a <a href="tables.html#65">container</a>, a
*  <a href="tables.html#66">reversible container</a>, and a
*  <a href="tables.html#67">sequence</a>.  Of the
*  <a href="tables.html#68">optional sequence requirements</a>, only
*  @@c push_back, @@c at, and @@c %array access are supported.
*
*  @@doctodo
*
*
*  Documentation?  What's that?
*  Nathan Myers <ncm@@cantrip.org>.
*
*  A string looks like this:
*
*  @@code
*                                        [_Rep]
*                                        _M_length
*   [basic_string<char_type>]            _M_capacity
*   _M_dataplus                          _M_refcount
*   _M_p ---------------->               unnamed array of char_type
*  @@endcode
*
*  Where the _M_p points to the first character in the string, and
*  you cast it to a pointer-to-_Rep and subtract 1 to get a
*  pointer to the header.
*
*  This approach has the enormous advantage that a string object
*  requires only one allocation.  All the ugliness is confined
*  within a single %pair of inline functions, which each compile to
*  a single @@a add instruction: _Rep::_M_data(), and
*  string::_M_rep(); and the allocation function which gets a
*  block of raw bytes and with room enough and constructs a _Rep
*  object at the front.
*
*  The reason you want _M_data pointing to the character %array and
*  not the _Rep is so that the debugger can see the string
*  contents. (Probably we should add a non-inline member to get
*  the _Rep for the debugger to use, so users can check the actual
*  string length.)
*
*  Note that the _Rep object is a POD so that you can have a
*  static <em>empty string</em> _Rep object already @@a constructed before
*  static constructors have run.  The reference-count encoding is
*  chosen so that a 0 indicates one reference, so you never try to
*  destroy the empty-string _Rep object.
d123 2
a124 2
*  All but the last paragraph is considered pretty conventional
*  for a C++ string implementation.
@


1.2
log
@-
@
text
@d7 3
d11 1
a11 1
struct basic_gnu_string {
d17 2
a18 1
   constexpr n_chars = sizeof repr / sizeof char_type;
d22 1
a22 1
      return reinterpret_cast<repr*>(pointer)[-1];
d30 2
a31 2
   basic_gnu_string(): pointer_(nullptr_) {}
   ~basic_gnu_string() { if (pointer_) delete[] repr_addr(); }
d33 2
a34 2
   basic_gnu_string (size_t capacity) {
      pointer_ = new char_type[size + n_chars];
d41 1
a41 1
   size_t basic_strlen (const char* str) {
d47 3
a49 2
   basic_gnu_string (const char_type* str):
               basic_gnu_string (basic_strlen (str))    {
d52 2
d55 1
a55 1
using gnu_string = basic_gnu_string<char>;
d58 2
a59 1
   gnu_string s;
d63 61
a123 61
  /**
   *  @@class basic_string basic_string.h <string>
   *  @@brief  Managing sequences of characters and character-like objects.
   *
   *  @@ingroup strings
   *  @@ingroup sequences
   *
   *  @@tparam _CharT  Type of character
   *  @@tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *  @@tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
   *
   *  Meets the requirements of a <a href="tables.html#65">container</a>, a
   *  <a href="tables.html#66">reversible container</a>, and a
   *  <a href="tables.html#67">sequence</a>.  Of the
   *  <a href="tables.html#68">optional sequence requirements</a>, only
   *  @@c push_back, @@c at, and @@c %array access are supported.
   *
   *  @@doctodo
   *
   *
   *  Documentation?  What's that?
   *  Nathan Myers <ncm@@cantrip.org>.
   *
   *  A string looks like this:
   *
   *  @@code
   *                                        [_Rep]
   *                                        _M_length
   *   [basic_string<char_type>]            _M_capacity
   *   _M_dataplus                          _M_refcount
   *   _M_p ---------------->               unnamed array of char_type
   *  @@endcode
   *
   *  Where the _M_p points to the first character in the string, and
   *  you cast it to a pointer-to-_Rep and subtract 1 to get a
   *  pointer to the header.
   *
   *  This approach has the enormous advantage that a string object
   *  requires only one allocation.  All the ugliness is confined
   *  within a single %pair of inline functions, which each compile to
   *  a single @@a add instruction: _Rep::_M_data(), and
   *  string::_M_rep(); and the allocation function which gets a
   *  block of raw bytes and with room enough and constructs a _Rep
   *  object at the front.
   *
   *  The reason you want _M_data pointing to the character %array and
   *  not the _Rep is so that the debugger can see the string
   *  contents. (Probably we should add a non-inline member to get
   *  the _Rep for the debugger to use, so users can check the actual
   *  string length.)
   *
   *  Note that the _Rep object is a POD so that you can have a
   *  static <em>empty string</em> _Rep object already @@a constructed before
   *  static constructors have run.  The reference-count encoding is
   *  chosen so that a 0 indicates one reference, so you never try to
   *  destroy the empty-string _Rep object.
   *
   *  All but the last paragraph is considered pretty conventional
   *  for a C++ string implementation.
  */
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d7 2
a8 1
struct basic_gnu_string<char_type> {
@
