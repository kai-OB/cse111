head	1.5;
access;
symbols;
locks;
comment	@// @;


1.5
date	2020.11.14.07.22.28;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.08.03.00.51.49;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.08.03.00.50.48;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.08.03.00.50.35;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.08.03.00.48.47;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: template_string.cpp,v 1.4 2016-08-02 17:51:49-07 - - $

#include <iostream>
using namespace std;

template <typename char_type>
struct template_string {

   struct long_str {
      size_t capacity_;
      size_t size_;
      char_type* data_;
   };

   static constexpr size_t CHAR_COUNT = (sizeof (long_str) - 1)
                                       / sizeof (char_type);
   static constexpr size_t MIN_CAP = CHAR_COUNT > 2 ? CHAR_COUNT : 2;

   struct short_str {
      union {
         unsigned char size_;
         char_type padding_;
      };
      char_type data_[MIN_CAP];
   };

   union str_rep {
      long_str long_;
      short_str short_;
   } rep_;

   bool is_long_str() const {
      return rep_.short_.size_ & 1;
   }

};


int offset (const void* base, const void* field) {
   return static_cast<const char*> (field)
        - static_cast<const char*> (base);
}

#define SHOW(X) cout << #X << " = " << X << endl;
template <typename char_type_t>
void print_info (const string& char_type) {
   template_string<char_type_t> v;
   SHOW (char_type);
   SHOW (sizeof (char_type_t));
   SHOW (sizeof v);
   SHOW (sizeof v.rep_);
   SHOW (sizeof v.rep_.long_);
   SHOW (sizeof v.rep_.long_.capacity_);
   SHOW (sizeof v.rep_.long_.size_);
   SHOW (sizeof v.rep_.long_.data_);
   SHOW (sizeof v.rep_.short_);
   SHOW (sizeof v.rep_.short_.size_);
   SHOW (sizeof v.rep_.short_.padding_);
   SHOW (sizeof v.rep_.short_.data_);
   SHOW (v.CHAR_COUNT);
   SHOW (v.MIN_CAP);
   SHOW (offset (&v, &v));
   SHOW (offset (&v, &v.rep_));
   SHOW (offset (&v, &v.rep_.long_));
   SHOW (offset (&v, &v.rep_.long_.capacity_));
   SHOW (offset (&v, &v.rep_.long_.size_));
   SHOW (offset (&v, &v.rep_.long_.data_));
   SHOW (offset (&v, &v.rep_.short_));
   SHOW (offset (&v, &v.rep_.short_.size_));
   SHOW (offset (&v, &v.rep_.short_.padding_));
   SHOW (offset (&v, &v.rep_.short_.data_));
}

#define PRINT(C) print_info<C>(#C);
int main() {
   PRINT(char);
   cout << "\f" << endl;
   PRINT(wchar_t);
   cout << "\f" << endl;
   PRINT(char16_t);
   cout << "\f" << endl;
   PRINT(char32_t);
}

/*
//TEST// ./template_string >template_string.out
//TEST// mkpspdf template_string.ps template_string.cpp* \
//TEST//         template_string.out
*/

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: template_string.cpp,v 1.3 2016-08-02 17:50:48-07 - - $
d15 1
a15 1
   static constexpr size_t char_count = (sizeof (long_str) - 1)
d17 1
a17 1
   static constexpr size_t min_cap = char_count > 2 ? char_count : 2;
d24 1
a24 1
      char_type data_[min_cap];
d60 2
a61 2
   SHOW (v.char_count);
   SHOW (v.min_cap);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: template_string.cpp,v 1.2 2016-08-02 17:50:35-07 - - $
d85 1
d87 3
a89 1
//TEST// mkpspdf template_string.ps template_string.cpp* template_string.out
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: template_string.cpp,v 1.1 2016-08-02 17:48:47-07 - - $
a61 1
   SHOW (v.n_words);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: vstring.cpp,v 1.33 2016-08-02 17:35:20-07 - - $
d7 1
a7 1
struct vstring {
a14 2
   static constexpr size_t short_mask = 1;
   static constexpr size_t long_mask = 1UL;
a26 11
   static constexpr size_t max (size_t a, size_t b) {
      return a > b ? a : b;
   }
   static constexpr size_t n_words
                    = max (sizeof (long_str), sizeof (short_str))
                      / sizeof (size_t);

   struct raw_str {
      size_t words_ [n_words];
   };

a29 1
      raw_str raw_;
d33 1
a33 1
      return rep_.short_.size_ & short_mask;
d47 1
a47 1
   vstring<char_type_t> v;
a59 2
   SHOW (sizeof v.rep_.raw_);
   SHOW (sizeof v.rep_.raw_.words_);
a72 2
   SHOW (offset (&v, &v.rep_.raw_));
   SHOW (offset (&v, &v.rep_.raw_.words_));
d86 2
a87 2
//TEST// ./vstring >vstring.out
//TEST// mkpspdf vstring.ps vstring.cpp* vstring.out
@
