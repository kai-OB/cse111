head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2016.08.03.20.16.57;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.08.03.20.15.58;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.08.03.20.15.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.08.03.20.15.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.08.03.20.13.37;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.08.03.20.12.06;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.08.03.20.11.21;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: shortstring2.cpp,v 1.6 2016-08-03 13:15:58-07 - - $

// Alternate short string optimization.

#include <iostream>
using namespace std;

struct opt_string {
   char* pointer_;
   size_t size_;
   union {
      char data_[16];
      size_t capacity_;
   };

   bool is_long() const {
      return pointer_ != data_;
   }

   size_t size() const {
      return size_;
   }

   size_t capacity() const {
      return is_long() ? capacity_ : sizeof data_ - 1;
   }

   opt_string(): pointer_(data_), size_(0) {
      data_[0] = '\0';
   }

   ~opt_string() {
      if (is_long() and pointer_) delete[] pointer_;
   }

};

int offset (void* base, void* field) {
   return static_cast<char*> (field) - static_cast<char*> (base);
}

#define SHOW(X) cout << #X << " = " << X << endl;
int main() {
   opt_string u;
   SHOW (sizeof u);
   SHOW (sizeof u.pointer_);
   SHOW (sizeof u.size_);
   SHOW (sizeof u.data_);
   SHOW (sizeof u.capacity_);
   SHOW (offset (&u, &u.pointer_));
   SHOW (offset (&u, &u.size_));
   SHOW (offset (&u, &u.data_));
   SHOW (offset (&u, &u.capacity_));
}

//TEST// ./shortstring2 >shortstring2.out
//TEST// mkpspdf shortstring2.ps shortstring2.cpp* shortstring2.out

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: shortstring2.cpp,v 1.5 2016-08-03 13:15:45-07 - - $
d28 3
a30 1
   opt_string(): pointer_(data_), size_(0), data_({}) {}
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: shortstring2.cpp,v 1.4 2016-08-03 13:15:36-07 - - $
d28 1
a28 1
   opt_string(): pointer_(data_), size_(0), data_(0) {}
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: shortstring2.cpp,v 1.3 2016-08-03 13:13:37-07 - - $
d28 1
a28 1
   opt_string(): pointer_(data_), size_(0), data_("") {}
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: shortstring2.cpp,v 1.2 2016-08-03 13:12:06-07 - - $
d9 1
a9 1
   char* data_;
d12 1
a12 1
      char short_data_[16];
d17 1
a17 1
      return data_ != short_data_;
d25 1
a25 1
      return is_long() ? capacity_ : sizeof short_data_ - 1;
d28 1
a28 3
   opt_string(): data_(short_data_), size_(0) {
      short_data_[0] = '\0';
   }
d31 1
a31 1
      if (is_long() and data_) delete[] data_;
d44 2
a46 2
   SHOW (sizeof u.size_);
   SHOW (sizeof u.short_data_);
d48 2
a50 2
   SHOW (offset (&u, &u.size_));
   SHOW (offset (&u, &u.short_data_));
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: shortstring2.cpp,v 1.1 2016-08-03 13:11:21-07 - - $
d17 1
a17 1
      return data_ == short_data_;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: shortstring.cpp,v 1.25 2016-08-03 12:54:41-07 - - $
d17 1
a17 1
      return data_ = short_data_;
d48 1
a48 1
   SHOW (sizeof u.short_data);
d52 1
a52 1
   SHOW (offset (&u, &u.short_data));
@
