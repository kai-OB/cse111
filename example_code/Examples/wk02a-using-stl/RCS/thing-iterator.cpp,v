head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2021.04.16.00.14.04;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.04.16.00.12.48;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.04.16.00.11.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.04.16.00.09.46;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.04.16.00.09.12;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.04.16.00.08.37;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.04.15.01.52.45;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: thing-iterator.cpp,v 1.6 2021-04-15 17:12:48-07 - - $

// Illustrate usage of iteration over a container.
// Show minimal operations needed to implement an iterator.

#include <iostream>
#include <vector>
using namespace std;

struct thing {
   int array[5] {1, 2, 3, 4, 5};

   struct iterator {
         int* itor = nullptr;
         iterator (int* i): itor(i) {}
         iterator& operator++() { ++this->itor; return *this; }
         int& operator*() { return *this->itor; }
         bool operator!= (iterator i) { return this->itor != i.itor; }
   };

   size_t size() { return sizeof array / sizeof *array; }
   iterator begin() { return iterator(&array[0]); }
   iterator end() { return iterator(&array[size()]); }
   int& operator[] (size_t i) { return array[i]; }
};

int main() {
   thing a;
   for (size_t i = 0; i != a.size(); ++i) cout << " " << a[i];
   cout << endl;
   for (auto p = a.begin(); p != a.end(); ++p) cout << " " << *p;
   cout << endl;
   for (auto& i: a) cout << " " << i;
   cout << endl;
}

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: thing-iterator.cpp,v 1.5 2021-04-15 17:11:19-07 - - $
d24 1
d29 2
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: thing-iterator.cpp,v 1.4 2021-04-15 17:09:46-07 - - $
a11 1
   size_t size = sizeof array / sizeof *array;
d21 1
d23 1
a23 1
   iterator end() { return iterator(&array[size]); }
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: thing-iterator.cpp,v 1.2 2021-04-15 17:08:37-07 - - $
d17 3
a19 3
         iterator& operator++() { ++itor; return *this; }
         int& operator*() { return *itor; }
         bool operator!= (iterator i) { return itor != i.itor; }
d22 2
a23 2
   iterator begin() { return &array[0]; }
   iterator end() { return &array[size]; }
@


1.3
log
@-
@
text
@d28 4
a31 2
   for (auto p = a.begin(); p != a.end(); ++p) cout << *p << endl;
   for (auto& i: a) cout << i << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: thing-iterator.cpp,v 1.1 2021-04-14 18:52:45-07 - - $
d28 2
a29 2
   for (const auto p = a.begin(); p != a.end(); ++p) cout << *p << endl;
   for (const auto& i: a) cout << i << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: intiterator.cpp,v 1.7 2021-04-14 07:24:22-07 - - $
d28 1
@
