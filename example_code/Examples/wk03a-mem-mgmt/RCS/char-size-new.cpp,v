head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2021.04.28.01.35.59;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.20.22.17.09;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.10.20.22.16.35;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.10.20.22.14.00;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.10.20.22.12.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.10.20.20.44.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.10.20.20.40.42;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.10.20.20.39.09;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.10.20.20.25.52;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: char-size-new.cpp,v 1.8 2020-10-20 15:17:09-07 - - $

#include <iostream>
using namespace std;

const void* cast (const char* p) {
   return static_cast<const void*> (p);
}

int main() {
   const char* p = new char;
   cout << cast (p) << endl;
   for (size_t i = 0; i < 15; ++i) {
      const char* q = new char;
      cout << cast (q) << " " << (q - p) << endl;
      p = q;
   }
   return 0;
}

// 
// Diagram of memory allocated by new char
// 
//          +---+---+---+---+---+---+---+---+
// prev<----|       boundary tag            |
//          +---+---+---+---+---+---+---+---+
//          |       boundary tag            |---->next
//          +---+---+---+---+---+---+---+---+
//          | x |   padding                 |
//          +---+---+---+---+---+---+---+---+
//          |       padding                 |
//          +---+---+---+---+---+---+---+---+
// 
// x is a single byte allocated.
// Smallest chunk of heap memory is 32 bytes.
// 
// Memory always allocted on a 16-byte boundary.
// Memory request rounded up to 16 bytes by padding.
// Actual allocated memory = n chunks of 16 bytes
//                         + 1 boundary tag
// A boundary tag has two pointers, one to the
// previously allocated chunk, and one to the next,
// sorted by address.
// 
// Memory:
//      1 KiB = 2^10 bytes = 1024
//     64 KiB = 2^16 bytes = 65536 (16-bit address)
// Mega 1 MiB = 2^20 byres = 1048576
// Giga 1 GiB = 2^30 bytes = 1073741824
//      4 GiB = 2^32 bytes = 4294967296 (32-bit address)
// Tera 1 TiB = 2^40 bytes = 1099511627776 (new PC SSD?)
// Peta 1 PiB = 2^50 byres = 1125899906842624
// Exa  1 EiB = 2^60 bytes = 1152921504606846976
//     15 EiB = Total estimated data held by Google (May 2018)
//     16 EiB = 2^64 bytes = 18446744073709551616 (64-bit address)
// Zetta
// Yotta
//
// https://www.howtogeek.com/353116/
// how-big-are-gigabytes-terabytes-and-petabytes/
//
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.7 2020-10-20 15:16:35-07 - - $
d46 10
a55 10
//      1 KB = 2^10 bytes = 1024
//     64 KB = 2^16 bytes = 65536 (16-bit address)
// Mega 1 MB = 2^20 byres = 1048576
// Giga 1 GB = 2^30 bytes = 1073741824
//      4 GB = 2^32 bytes = 4294967296 (32-bit address)
// Tera 1 TB = 2^40 bytes = 1099511627776 (new PC SSD?)
// Peta 1 PB = 2^50 byres = 1125899906842624
// Exa  1 EB = 2^60 bytes = 1152921504606846976
//     15 EB = Total estimated data held by Google (May 2018)
//     16 EB = 2^64 bytes = 18446744073709551616 (64-bit address)
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.6 2020-10-20 15:14:00-07 - - $
d12 1
a12 1
   cout << cast (q) << endl;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.5 2020-10-20 15:12:19-07 - - $
d6 4
d11 2
a12 1
   char* p = nullptr;
d14 2
a15 2
      char* q = new char;
      cout << static_cast<void*> (q) << " " << (q - p) << endl;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.4 2020-10-20 13:44:36-07 - - $
d20 1
a20 1
//     <----|       boundary tag            |
d22 1
a22 1
//          |       boundary tag            |---->
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.3 2020-10-20 13:40:42-07 - - $
d46 1
a46 1
// Tera 1 TB = 2^40 bytes = 1099511627776 (new PC disk?)
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.2 2020-10-20 13:39:09-07 - - $
d41 10
a50 9
//      1 KiB = 2^10 byres = 1024
// Mega 1 MiB = 2^20 byres = 1048576
// Giga 1 GiB = 2^30 bytes = 1073741824
//      4 GiB = 2^32 bytes = 4294967296
// Tera 1 TiB = 2^40 bytes = 1099511627776 (new PC disk?)
// Peta 1 PiB = 2^50 byres = 1125899906842624
// Exa  1 EiB - 2^60 bytes = 1152921504606846976
//     15 EB  = Total estimated data held by Google (May 2018)
//     16 EiB = 2^64 bytes = 18446744073709551616
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: char-size-new.cpp,v 1.1 2020-10-20 13:25:52-07 - - $
d45 1
a45 1
// Tera 1 TiB = 2^40 bytes = 1099511627776
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: new-char-size.cpp,v 1.3 2020-10-20 13:17:29-07 - - $
d40 16
a55 1

@
