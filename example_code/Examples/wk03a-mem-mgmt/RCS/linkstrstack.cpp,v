head	1.26;
access;
symbols;
locks;
comment	@// @;


1.26
date	2021.04.30.00.18.37;	author -;	state -;
branches;
next	1.25;

1.25
date	2021.04.30.00.17.38;	author -;	state -;
branches;
next	1.24;

1.24
date	2021.04.30.00.17.02;	author -;	state -;
branches;
next	1.23;

1.23
date	2021.04.30.00.16.47;	author -;	state -;
branches;
next	1.22;

1.22
date	2021.04.30.00.12.57;	author -;	state -;
branches;
next	1.21;

1.21
date	2020.10.29.23.53.11;	author -;	state -;
branches;
next	1.20;

1.20
date	2020.10.29.04.37.27;	author -;	state -;
branches;
next	1.19;

1.19
date	2020.10.29.04.36.23;	author -;	state -;
branches;
next	1.18;

1.18
date	2020.10.29.04.34.11;	author -;	state -;
branches;
next	1.17;

1.17
date	2020.10.29.04.33.58;	author -;	state -;
branches;
next	1.16;

1.16
date	2020.10.29.04.33.43;	author -;	state -;
branches;
next	1.15;

1.15
date	2020.10.29.04.33.22;	author -;	state -;
branches;
next	1.14;

1.14
date	2020.10.29.04.32.58;	author -;	state -;
branches;
next	1.13;

1.13
date	2020.10.29.01.24.18;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.10.29.01.24.01;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.10.29.01.23.14;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.10.29.01.22.26;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.10.29.01.19.33;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.29.01.08.56;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.10.29.01.05.44;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.10.29.01.05.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2017.07.12.22.04.22;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.08.21.45.56;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.07.06.02.34.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.02.16.01.13.19;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.14.01.24.23;	author -;	state -;
branches;
next	;


desc
@@


1.26
log
@-
@
text
@// $Id: linkstrstack.cpp,v 1.25 2021-04-29 17:17:38-07 - - $

//
// linkstrstack - show the linked list implementation of a stack
// not a template class.  poor locality of reference.
//

#include <cstddef>
#include <iostream>
#include <stdexcept>
#include <string>

using namespace std;

/////////////////////////////////////////////////////////////////
// linkstrstack.h
/////////////////////////////////////////////////////////////////

class linkstrstack {
   private:
      struct node {
         string item;
         node* link;
         node (const string& itm, node* lnk): item(itm), link(lnk) {};
      };
      node* topnode = nullptr;
      size_t count = 0;
      void delete_this();
      void copy_from (const linkstrstack&);
      void move_from (linkstrstack&&);
   public:
      linkstrstack() = default;
      ~linkstrstack() { delete_this(); }
      linkstrstack (const linkstrstack&);
      linkstrstack& operator= (const linkstrstack&);
      linkstrstack (linkstrstack&&);
      linkstrstack& operator= (linkstrstack&&);
      void push (const string& );
      void pop();
      string& top() { return topnode->item; }
      const string& top() const { return topnode->item; }
      size_t size() const { return count; }
      bool empty() const { return size() == 0; }
      operator bool() const { return not empty(); }
};


/////////////////////////////////////////////////////////////////
// linkstrstack.cpp
/////////////////////////////////////////////////////////////////

void linkstrstack::delete_this() {
   while (not empty()) pop();
}

void linkstrstack::copy_from (const linkstrstack& that) {
   node** thisptr = &topnode;
   for (node* ptr = that.topnode; ptr != nullptr; ptr = ptr->link) {
      *thisptr = new node (ptr->item, nullptr);
      thisptr = &((*thisptr)->link);
   }
   count = that.count;
}

void linkstrstack::move_from (linkstrstack&& that) {
   topnode = that.topnode;
   count = that.count;
   that.topnode = nullptr;
   that.count = 0;
}

linkstrstack::linkstrstack (const linkstrstack& that) {
   copy_from (that);
}

linkstrstack& linkstrstack::operator= (const linkstrstack& that) {
   if (this == &that) return *this;
   delete_this();
   copy_from (that);
   return *this;
}

linkstrstack::linkstrstack (linkstrstack&& that) {
   move_from (std::move (that));
}

linkstrstack& linkstrstack::operator= (linkstrstack&& that) {
   if (this == &that) return *this;
   delete_this();
   move_from (std::move (that));
   return *this;
}


void linkstrstack::push (const string& item) {
   topnode = new node (item, topnode);
   ++count;
}

void linkstrstack::pop() {
   node* tmp = topnode;
   topnode = topnode->link;
   delete tmp;
   --count;
}


/////////////////////////////////////////////////////////////////
// main.cpp
/////////////////////////////////////////////////////////////////

int main (int argc, char** argv) {

   linkstrstack stkstr;
   for (int argi = 1; argi < argc; ++argi) {
      stkstr.push (argv[argi]);
   }
   while (stkstr.size() > size_t (argc / 2)) {
      cout << "loop 1: " << stkstr.top() << endl;
      stkstr.pop();
   }

   linkstrstack newstack = std::move (stkstr);
   while (not stkstr.empty()) {
      cout << "loop stkstr: " << stkstr.top() << endl;
      stkstr.pop();
   }

   linkstrstack other = newstack;
   while (newstack) {
      cout << "loop newstack: " << newstack.top() << endl;
      newstack.pop();
   }

   return 0;
}

/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       linkstrstack this is some test data for the stack \
//TEST//       >linkstrstack.out 2>&1
//TEST// mkpspdf linkstrstack.ps linkstrstack.cpp* linkstrstack.out*
*/

@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.22 2021-04-29 17:12:57-07 - - $
d40 2
a41 2
      string& top();
      const string& top() const;
a100 1
   if (empty()) throw out_of_range ("linkstrstack::pop()");
a104 10
}

string& linkstrstack::top() {
   if (empty()) throw out_of_range ("linkstrstack::top()");
   return topnode->item;
}

const string& linkstrstack::top() const {
   if (empty()) throw out_of_range ("linkstrstack::top()");
   return topnode->item;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.23 2021-04-29 17:16:47-07 - - $
d40 1
a40 69
      string& top() { return topnode->item; }
      const string& top() const; { return topnode->item; }
      size_t size() const { return count; }
      bool empty() const { return size() == 0; }
      operator bool() const { return not empty(); }
};


/////////////////////////////////////////////////////////////////
// linkstrstack.cpp
/////////////////////////////////////////////////////////////////

void linkstrstack::delete_this() {
   while (not empty()) pop();
}

void linkstrstack::copy_from (const linkstrstack& that) {
   node** thisptr = &topnode;
   for (node* ptr = that.topnode; ptr != nullptr; ptr = ptr->link) {
      *thisptr = new node (ptr->item, nullptr);
      thisptr = &((*thisptr)->link);
   }
   count = that.count;
}

void linkstrstack::move_from (linkstrstack&& that) {
   topnode = that.topnode;
   count = that.count;
   that.topnode = nullptr;
   that.count = 0;
}

linkstrstack::linkstrstack (const linkstrstack& that) {
   copy_from (that);
}

linkstrstack& linkstrstack::operator= (const linkstrstack& that) {
   if (this == &that) return *this;
   delete_this();
   copy_from (that);
   return *this;
}

linkstrstack::linkstrstack (linkstrstack&& that) {
   move_from (std::move (that));
}

linkstrstack& linkstrstack::operator= (linkstrstack&& that) {
   if (this == &that) return *this;
   delete_this();
   move_from (std::move (that));
   return *this;
}


void linkstrstack::push (const string& item) {
   topnode = new node (item, topnode);
   ++count;
}

void linkstrstack::pop() {
   node* tmp = topnode;
   topnode = topnode->link;
   delete tmp;
   --count;
}

const string& linkstrstack::top() const {
   
d101 1
d109 1
d114 1
a114 68
   
      const string& top() const;
      size_t size() const { return count; }
      bool empty() const { return size() == 0; }
      operator bool() const { return not empty(); }
};


/////////////////////////////////////////////////////////////////
// linkstrstack.cpp
/////////////////////////////////////////////////////////////////

void linkstrstack::delete_this() {
   while (not empty()) pop();
}

void linkstrstack::copy_from (const linkstrstack& that) {
   node** thisptr = &topnode;
   for (node* ptr = that.topnode; ptr != nullptr; ptr = ptr->link) {
      *thisptr = new node (ptr->item, nullptr);
      thisptr = &((*thisptr)->link);
   }
   count = that.count;
}

void linkstrstack::move_from (linkstrstack&& that) {
   topnode = that.topnode;
   count = that.count;
   that.topnode = nullptr;
   that.count = 0;
}

linkstrstack::linkstrstack (const linkstrstack& that) {
   copy_from (that);
}

linkstrstack& linkstrstack::operator= (const linkstrstack& that) {
   if (this == &that) return *this;
   delete_this();
   copy_from (that);
   return *this;
}

linkstrstack::linkstrstack (linkstrstack&& that) {
   move_from (std::move (that));
}

linkstrstack& linkstrstack::operator= (linkstrstack&& that) {
   if (this == &that) return *this;
   delete_this();
   move_from (std::move (that));
   return *this;
}


void linkstrstack::push (const string& item) {
   topnode = new node (item, topnode);
   ++count;
}

void linkstrstack::pop() {
   node* tmp = topnode;
   topnode = topnode->link;
   delete tmp;
   --count;
}

const string& linkstrstack::top() const {
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.22 2021-04-29 17:12:57-07 - - $
a244 4
}

string& linkstrstack::top() {
   return topnode->item;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.21 2020-10-29 16:53:11-07 - - $
d40 141
a180 1
      string& top();
a240 1
   if (empty()) throw out_of_range ("linkstrstack::pop()");
a247 1
   if (empty()) throw out_of_range ("linkstrstack::top()");
a251 1
   if (empty()) throw out_of_range ("linkstrstack::top()");
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.20 2020-10-28 21:37:27-07 - - $
d33 1
a33 1
      ~linkstrstack();
a69 4
}

linkstrstack::~linkstrstack() {
   delete_this();
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.19 2020-10-28 21:36:23-07 - - $
d44 1
d145 1
a145 1
   while (not newstack.empty()) {
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.18 2020-10-28 21:34:11-07 - - $
a153 1
//TEST//       --log-file=linkstrstack.out.grind \
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.17 2020-10-28 21:33:58-07 - - $
d97 1
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.16 2020-10-28 21:33:43-07 - - $
d83 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.15 2020-10-28 21:33:22-07 - - $
d57 1
a57 1
   for (node* ptr = that.topnode; ptr != null; ptr = ptr->link) {
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.14 2020-10-28 21:32:58-07 - - $
d29 1
a29 1
      void copy_from (linkstrstack&);
d55 1
a55 1
void linkstrstack::copy_from (linkstrstack& that) {
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.13 2020-10-28 18:24:18-07 - - $
d59 1
a59 1
      thisptr = &(thisptr->link);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.12 2020-10-28 18:24:01-07 - - $
d28 2
a29 2
      linkstrstack (const linkstrstack&) = delete;
      linkstrstack& operator= (const linkstrstack&) = delete;
a30 1
      void delete_this();
d34 2
d51 13
d71 6
a76 2
void linkstrstack::delete_this() {
   while (not empty()) pop();
d79 2
a80 1
linkstrstack::~linkstrstack() {
d82 1
d140 2
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.11 2020-10-28 18:23:14-07 - - $
d122 1
a122 1
      newstak.pop();
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.10 2020-10-28 18:22:26-07 - - $
d121 2
a122 2
      cout << "loop newstack: " << stkstr.top() << endl;
      stkstr.pop();
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.9 2020-10-28 18:19:33-07 - - $
d120 1
a120 1
   while (not stkstr.empty()) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.6 2020-10-28 18:05:06-07 - - $
d111 1
a111 1
      cout << stkstr.top() << endl;
d114 1
d116 8
@


1.8
log
@-
@
text
@d66 1
a66 1
   move_from (that);
d72 2
a73 1
   move_from (that);
@


1.7
log
@-
@
text
@d69 1
a69 1
linkstrstack::linkstrstack& operator= (linkstrstack&& that) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.5 2017-07-12 15:04:22-07 - - $
d50 1
a50 1
linkstrstack::move_from (linkstrstack&& that) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.4 2013-08-08 14:45:56-07 - - $
d26 6
a31 6
      node* topnode {};
      int count {};
      linkstrstack (const linkstrstack &) = delete;
      linkstrstack (linkstrstack &&) = delete;
      linkstrstack &operator= (const linkstrstack &) = delete;
      linkstrstack &operator= (linkstrstack &&) = delete;
d35 3
a37 1
      void push (const string &);
d39 2
a40 2
      string &top();
      const string &top() const;
d50 11
d62 11
a72 1
   while (not empty()) pop();
d75 1
a75 1
void linkstrstack::push (const string &item) {
d88 1
a88 1
string &linkstrstack::top() {
d93 1
a93 1
const string &linkstrstack::top() const {
d113 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.3 2013-07-05 19:34:26-07 - - $
d4 2
a5 1
// linkstrstack - show the linked list implementation of a stackk
d23 2
a24 1
         node *link;
d26 2
a27 2
      node *topnode;
      int count;
d33 1
a33 1
      linkstrstack();
d39 2
a40 2
      size_t size() const;
      bool empty() const;
a47 3
linkstrstack::linkstrstack(): topnode (NULL), count(0) {
}

d53 1
a53 4
   node *tmp = new node();
   tmp->item = item;
   tmp->link = topnode;
   topnode = tmp;
d59 1
a59 1
   node *tmp = topnode;
a74 8
size_t linkstrstack::size() const {
   return count;
}

bool linkstrstack::empty() const {
   return count == 0;
}

d80 1
a80 1
int main (int argc, char **argv) {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.2 2013-02-15 17:13:19-08 - - $
d50 1
a50 1
   while (! empty()) pop();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.1 2012-04-13 18:24:23-07 - - $
d27 1
d29 1
d46 2
a47 1
linkstrstack::linkstrstack(): topnode (0), count(0) { }
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: linkstrstack.cpp,v 1.1 2012-04-13 12:40:11-07 - - $
d26 2
a27 2
      linkstrstack (const linkstrstack &); // Disabled.
      linkstrstack &operator= (const linkstrstack &); // Disabled.
@
