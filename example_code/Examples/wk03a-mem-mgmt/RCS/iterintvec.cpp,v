head	1.64;
access;
symbols;
locks;
comment	@// @;


1.64
date	2018.07.18.22.21.29;	author -;	state -;
branches;
next	1.63;

1.63
date	2018.07.18.22.21.13;	author -;	state -;
branches;
next	1.62;

1.62
date	2018.07.18.22.21.02;	author -;	state -;
branches;
next	1.61;

1.61
date	2018.07.18.22.18.56;	author -;	state -;
branches;
next	1.60;

1.60
date	2018.07.18.22.17.22;	author -;	state -;
branches;
next	1.59;

1.59
date	2018.07.18.22.14.51;	author -;	state -;
branches;
next	1.58;

1.58
date	2018.07.18.22.12.58;	author -;	state -;
branches;
next	1.57;

1.57
date	2018.07.18.22.12.32;	author -;	state -;
branches;
next	1.56;

1.56
date	2018.07.18.22.10.29;	author -;	state -;
branches;
next	1.55;

1.55
date	2018.07.18.22.10.15;	author -;	state -;
branches;
next	1.54;

1.54
date	2018.07.18.22.08.10;	author -;	state -;
branches;
next	1.53;

1.53
date	2018.07.18.22.06.08;	author -;	state -;
branches;
next	1.52;

1.52
date	2018.07.18.22.05.42;	author -;	state -;
branches;
next	1.51;

1.51
date	2018.07.18.21.59.10;	author -;	state -;
branches;
next	1.50;

1.50
date	2018.07.18.21.56.21;	author -;	state -;
branches;
next	1.49;

1.49
date	2017.07.12.21.49.15;	author -;	state -;
branches;
next	1.48;

1.48
date	2017.07.12.21.47.46;	author -;	state -;
branches;
next	1.47;

1.47
date	2017.07.12.21.44.00;	author -;	state -;
branches;
next	1.46;

1.46
date	2017.07.12.21.43.47;	author -;	state -;
branches;
next	1.45;

1.45
date	2017.07.12.21.39.54;	author -;	state -;
branches;
next	1.44;

1.44
date	2017.07.12.21.39.21;	author -;	state -;
branches;
next	1.43;

1.43
date	2017.07.12.21.37.01;	author -;	state -;
branches;
next	1.42;

1.42
date	2016.07.22.01.57.43;	author -;	state -;
branches;
next	1.41;

1.41
date	2016.04.14.23.09.31;	author -;	state -;
branches;
next	1.40;

1.40
date	2016.04.14.23.08.35;	author -;	state -;
branches;
next	1.39;

1.39
date	2016.04.14.23.06.44;	author -;	state -;
branches;
next	1.38;

1.38
date	2016.04.14.23.00.28;	author -;	state -;
branches;
next	1.37;

1.37
date	2016.04.14.23.00.11;	author -;	state -;
branches;
next	1.36;

1.36
date	2016.04.14.22.57.29;	author -;	state -;
branches;
next	1.35;

1.35
date	2016.04.14.22.50.42;	author -;	state -;
branches;
next	1.34;

1.34
date	2016.04.14.22.50.11;	author -;	state -;
branches;
next	1.33;

1.33
date	2016.04.14.22.49.58;	author -;	state -;
branches;
next	1.32;

1.32
date	2016.04.14.22.49.34;	author -;	state -;
branches;
next	1.31;

1.31
date	2016.04.14.22.48.31;	author -;	state -;
branches;
next	1.30;

1.30
date	2015.04.14.20.25.24;	author -;	state -;
branches;
next	1.29;

1.29
date	2015.04.14.20.24.01;	author -;	state -;
branches;
next	1.28;

1.28
date	2015.04.14.20.19.47;	author -;	state -;
branches;
next	1.27;

1.27
date	2015.04.14.20.19.21;	author -;	state -;
branches;
next	1.26;

1.26
date	2015.04.14.20.18.51;	author -;	state -;
branches;
next	1.25;

1.25
date	2015.04.14.20.18.25;	author -;	state -;
branches;
next	1.24;

1.24
date	2015.04.14.20.16.37;	author -;	state -;
branches;
next	1.23;

1.23
date	2015.04.14.20.15.58;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.07.03.01.15.47;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.05.30.23.45.52;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.04.14.20.31.46;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.04.14.20.28.58;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.04.14.20.28.12;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.04.11.02.36.16;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.07.09.00.04.25;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.07.08.20.18.39;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.07.08.20.17.49;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.07.08.20.17.02;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.07.08.20.16.35;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.07.08.20.15.43;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.07.08.20.06.28;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.07.08.20.05.38;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.07.08.19.58.39;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.07.08.19.57.43;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.07.08.19.56.26;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.07.06.02.53.11;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.07.06.02.50.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.07.06.02.50.03;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.06.02.48.57;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.06.02.43.29;	author -;	state -;
branches;
next	;


desc
@@


1.64
log
@-
@
text
@// $Id: iterintvec.cpp,v 1.63 2018-07-18 15:21:13-07 - - $

//
// iterintvec - implementation of an int vector with iterator.
//

#include <algorithm>
#include <iostream>
#include <stdexcept>
using namespace std;

/////////////////////////////////////////////////////////////////
// iterintvec.h
/////////////////////////////////////////////////////////////////

class iterintvec {
   public:
      using value_type = int;
      using reference = int&;
      using const_reference = const int&;
      using pointer = int*;
      using const_pointer = const int*;
      using difference_type = ptrdiff_t;
      using size_type = size_t;
   private:
      size_type size_ {};
      value_type *data_ {};
   public:
      class iterator {
         private:
            pointer curr;
            friend class iterintvec;
            iterator (pointer init): curr(init) {};
         public:
            iterator(): curr(nullptr) {};
            pointer operator->() { return curr; }
            reference operator*() { return *curr; }
            const_reference operator*() const { return *curr; }
            iterator& operator++() { ++curr; return *this; }
            iterator operator++ (value_type) {
               iterator tmp {*this};
               ++curr;
               return tmp;
            }
            bool operator== (const iterator that) {
               return curr == that.curr; 
            }
            bool operator!= (const iterator that) {
               return not (*this == that); 
            }
            operator bool() { return curr != nullptr; }
      };
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }

      iterintvec() = default;                    // default ctor
      iterintvec (const iterintvec&);            // copy ctor
      iterintvec (iterintvec&&);                 // move ctor
      iterintvec& operator= (const iterintvec&); // copy operator=
      iterintvec& operator= (iterintvec&&);      // move operator=
      ~iterintvec();                             // dtor
      explicit iterintvec (size_type size);
      size_type size() const { return size_; }
      reference operator[] (size_type index) { return data_[index]; }
      const_reference operator[] (size_type index) const {
         return data_[index];
      }
};


/////////////////////////////////////////////////////////////////
// iterintvec.cpp
/////////////////////////////////////////////////////////////////

// Copy constructor.
iterintvec::iterintvec (const iterintvec& that):
            size_(that.size_), data_ (new value_type[that.size_]) {
   std::copy (&that.data_[0], &that.data_[that.size_], &data_[0]);
}

// Move constructor.
iterintvec::iterintvec (iterintvec&& that):
            size_(that.size_), data_ (that.data_) {
   that.size_ = 0;
   that.data_ = nullptr;
}

// Copy operator=
iterintvec& iterintvec::operator= (const iterintvec& that){
   if (this == &that) return *this;
   if (data_ != nullptr) delete[] data_;
   size_ = that.size_;
   data_ = new value_type[that.size_];
   std::copy (&that.data_[0], &that.data_[that.size_], &data_[0]);
   return *this;
}

// Move operator=
iterintvec& iterintvec::operator= (iterintvec&& that){
   if (this == &that) return *this;
   if (data_ != nullptr) delete[] data_;
   size_ = that.size_;
   data_ = that.data_;
   that.size_ = 0;
   that.data_ = nullptr;
   return *this;
}

// Destructor.
iterintvec::~iterintvec() {
   if (data_ != nullptr) delete[] data_;
}

// Fixed-size allocator.
iterintvec::iterintvec (size_type size):
               size_(size), data_ (new value_type[size_]) {
   std::fill (&data_[0], &data_[size_], 0);
}


/////////////////////////////////////////////////////////////////
// main.cpp
/////////////////////////////////////////////////////////////////

int main() {
   iterintvec v1(10);
   v1[3] = 99;
   int x = v1[3];
   cout << x << endl;
   cout << "v1[999] = " << v1[999] << endl;
   iterintvec v2 = v1;
   v2[3] = 1234;
   cout << v1[3] << " " << v2[3] << endl;
   v2 = v1;
   cout << v1[3] << " " << v2[3] << endl;
   for (iterintvec::iterator i = v1.begin(); i != v1.end(); ++i) {
      cout << " " << *i;
   }
   cout << endl;
   for (const auto& n: v1) { cout << " " << n; }
   cout << endl;
   for_each (v1.begin(), v1.end(), [](int n){ cout << " " << n; });
   cout << endl;
   return 0;
}

//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind iterintvec >iterintvec.out 2>&1
//TEST// mkpspdf iterintvec.ps iterintvec.cpp* iterintvec.out*

@


1.63
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.62 2018-07-18 15:21:02-07 - - $
a9 1

a10 1

@


1.62
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.61 2018-07-18 15:18:56-07 - - $
d135 1
a135 1
   cout << v1[3) << " " << v2[3] << endl;
@


1.61
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.60 2018-07-18 15:17:22-07 - - $
d129 2
a130 2
   v1.at(3) = 99;
   int x = v1.at(3);
d132 1
a132 5
   try {
      v1.at(999);
   }catch (out_of_range error) {
      cerr << error.what() << endl;
   }
d134 2
a135 2
   v2.at(3) = 1234;
   cout << v1.at(3) << " " << v2.at(3) << endl;
d137 1
a137 1
   cout << v1.at(3) << " " << v2.at(3) << endl;
d142 1
a142 3
   for (const auto& n: v1) {
      cout << " " << n;
   }
d144 1
a144 1
   for_each (v1.begin(), v1.end(), [](int n){cout << " " << n;});
@


1.60
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.59 2018-07-18 15:14:51-07 - - $
d47 1
a47 1
            bool operator== (const iterator& that) {
d50 1
a50 1
            bool operator!= (const iterator& that) {
a65 2
      reference at (size_type index);
      const_reference at (size_type index) const;
a110 5

/////////////////////////////////////////////////////////////////
// iterintvec.cpp
/////////////////////////////////////////////////////////////////

a119 12
}

iterintvec::reference
iterintvec::at (iterintvec::size_type index) {
   if (index >= size_) throw out_of_range ("iterintvec::at");
   return data_[index];
}

iterintvec::const_reference
iterintvec::at (iterintvec::size_type index) const {
   if (index >= size_) throw out_of_range ("iterintvec::at");
   return data_[index];
@


1.59
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.58 2018-07-18 15:12:58-07 - - $
d55 3
a71 2
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }
@


1.58
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.57 2018-07-18 15:12:32-07 - - $
d48 1
a48 1
               return curr == that.curr;
d51 1
a51 1
               return not (*this == that);
d69 2
a70 2
      iterator begin();
      iterator end();
a109 8
}

iterintvec::iterator iterintvec::begin() {
   return iterator (&data_[0]);
}   
    
iterintvec::iterator iterintvec::end() {
   return iterator (&data_[size_]);
@


1.57
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.56 2018-07-18 15:10:29-07 - - $
d31 1
a31 1
      class iterintvec::iterator {
@


1.56
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.55 2018-07-18 15:10:15-07 - - $
d31 24
a54 1
      class iterator;
a70 42
};


/////////////////////////////////////////////////////////////////
// iterintvec.h
/////////////////////////////////////////////////////////////////

class iterintvec;
class iterintvec::iterator {
   private:
      pointer curr;
      friend class iterintvec;
      iterator (pointer init): curr(init) {};
   public:
      iterator(): curr(nullptr) {};
      pointer operator->() {
         return curr;
      }
      reference operator*() {
         return *curr;
      }
      const_reference operator*() const {
         return *curr;
      }
      iterator& operator++() {
         ++curr;
         return *this;
      }
      iterator operator++ (value_type) {
         iterator tmp {*this};
         ++curr;
         return tmp;
      }
      bool operator== (const iterator& that) {
         return curr == that.curr;
      }
      bool operator!= (const iterator& that) {
         return not (*this == that);
      }
      operator bool() {
         return curr != nullptr;
      }
@


1.55
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.54 2018-07-18 15:08:10-07 - - $
d31 1
@


1.54
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.53 2018-07-18 15:06:08-07 - - $
d45 2
a46 2
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }
d128 8
@


1.53
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.52 2018-07-18 15:05:42-07 - - $
d13 37
a89 37

/////////////////////////////////////////////////////////////////
// iterintvec.h
/////////////////////////////////////////////////////////////////

class iterintvec {
   public:
      using value_type = int;
      using reference = int&;
      using const_reference = const int&;
      using pointer = int*;
      using const_pointer = const int*;
      using difference_type = ptrdiff_t;
      using size_type = size_t;
   private:
      size_type size_ {};
      value_type *data_ {};
   public:
      iterintvec() = default;                    // default ctor
      iterintvec (const iterintvec&);            // copy ctor
      iterintvec (iterintvec&&);                 // move ctor
      iterintvec& operator= (const iterintvec&); // copy operator=
      iterintvec& operator= (iterintvec&&);      // move operator=
      ~iterintvec();                             // dtor
      explicit iterintvec (size_type size);
      size_type size() const { return size_; }
      reference at (size_type index);
      const_reference at (size_type index) const;
      reference operator[] (size_type index) { return data_[index]; }
      const_reference operator[] (size_type index) const {
         return data_[index];
      }
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }
};


@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.51 2018-07-18 14:59:10-07 - - $
a66 1
      class iterator;
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.50 2018-07-18 14:56:21-07 - - $
d17 1
a17 37
class iterintvec {
   public:
      using value_type = int;
      using reference = int&;
      using const_reference = const int&;
      using pointer = int*;
      using const_pointer = const int*;
      using difference_type = ptrdiff_t;
      using size_type = size_t;
      class iterator;
   private:
      size_type size_ {};
      value_type *data_ {};
   public:
      iterintvec() = default;                    // default ctor
      iterintvec (const iterintvec&);            // copy ctor
      iterintvec (iterintvec&&);                 // move ctor
      iterintvec& operator= (const iterintvec&); // copy operator=
      iterintvec& operator= (iterintvec&&);      // move operator=
      ~iterintvec();                             // dtor
      explicit iterintvec (size_type size);
      size_type size() const { return size_; }
      reference at (size_type index);
      const_reference at (size_type index) const;
      reference operator[] (size_type index) { return data_[index]; }
      const_reference operator[] (size_type index) const {
         return data_[index];
      }
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }
};


/////////////////////////////////////////////////////////////////
// iterintvec.h
/////////////////////////////////////////////////////////////////

d53 38
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.49 2017-07-12 14:49:15-07 - - $
d38 1
a38 1
      size_type size() const;
d45 2
a46 2
      iterator begin();
      iterator end();
d58 1
a58 2
      iterator (pointer init): curr(init) {
      };
a144 4
iterintvec::size_type iterintvec::size() const {
   return size_;
}

a154 8
}

iterintvec::iterator iterintvec::begin() {
   return iterator (&data_[0]);
}

iterintvec::iterator iterintvec::end() {
   return iterator (&data_[size_]);
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.48 2017-07-12 14:47:46-07 - - $
d111 5
a115 6
   if (this != &that) {
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = new value_type[that.size_];
      std::copy (&that.data_[0], &that.data_[that.size_], &data_[0]);
   }
d121 6
a126 7
   if (this != &that) {
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = that.data_;
      that.size_ = 0;
      that.data_ = nullptr;
   }
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.47 2017-07-12 14:44:00-07 - - $
d41 1
a41 1
      reference operator[] (size_type index) { return &data_[index]; }
d43 1
a43 1
         return &data_[index];
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.46 2017-07-12 14:43:47-07 - - $
d41 4
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.41 2016-04-14 16:09:31-07 - - $
d28 2
a29 2
      size_type size_ {}
      value_type *data_ {}
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.43 2017-07-12 14:37:01-07 - - $
d17 33
a49 1
class iterintvec;
d54 1
a54 1
      explicit iterator (pointer init): curr(init) {
a88 36
// iterintvec.h
/////////////////////////////////////////////////////////////////

class iterintvec {
   public:
      using value_type = int;
      using reference = int&;
      using const_reference = const int&;
      using pointer = int*;
      using const_pointer = const int*;
      using difference_type = ptrdiff_t;
      using size_type = size_t;
   private:
      size_type size_ {};
      value_type *data_ {};
   public:
      iterintvec() = default;                    // default ctor
      iterintvec (const iterintvec&);            // copy ctor
      iterintvec (iterintvec&&);                 // move ctor
      iterintvec& operator= (const iterintvec&); // copy operator=
      iterintvec& operator= (iterintvec&&);      // move operator=
      ~iterintvec();                             // dtor
      explicit iterintvec (size_type size);
      size_type size() const { return size_; }
      reference at (size_type idx);
      const_reference at (size_type idx) const;
      reference operator[] (size_type idx) { return data_[idx]; }
      const_reference operator[] (size_type idx) const {
         return data_[idx];
      }
      iterator begin() { return &data_[0]; }
      iterator end() { return &data_[size_]; };
};


/////////////////////////////////////////////////////////////////
d107 6
a112 5
   if (this == &that) return *this;
   if (data_ != nullptr) delete[] data_;
   size_ = that.size_;
   data_ = new value_type[that.size_];
   std::copy (&that.data_[0], &that.data_[that.size_], &data_[0]);
d118 7
a124 6
   if (this == &that) return *this;
   if (data_ != nullptr) delete[] data_;
   size_ = that.size_;
   data_ = that.data_;
   that.size_ = 0;
   that.data_ = nullptr;
d144 4
d158 8
@


1.44
log
@-
@
text
@a68 1
      class iterator;
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.42 2016-07-21 18:57:43-07 - - $
d17 1
a17 37
class iterintvec {
   public:
      using value_type = int;
      using reference = int&;
      using const_reference = const int&;
      using pointer = int*;
      using const_pointer = const int*;
      using difference_type = ptrdiff_t;
      using size_type = size_t;
      class iterator;
   private:
      size_type size_ {};
      value_type *data_ {};
   public:
      iterintvec() = default;                    // default ctor
      iterintvec (const iterintvec&);            // copy ctor
      iterintvec (iterintvec&&);                 // move ctor
      iterintvec& operator= (const iterintvec&); // copy operator=
      iterintvec& operator= (iterintvec&&);      // move operator=
      ~iterintvec();                             // dtor
      explicit iterintvec (size_type size);
      size_type size() const { return size_; }
      reference at (size_type idx);
      const_reference at (size_type idx) const;
      reference operator[] (size_type idx) { return data_[idx]; }
      const_reference operator[] (size_type idx) const {
         return data_[idx];
      }
      iterator begin() { return &data_[0]; }
      iterator end() { return &data_[size_]; };
};


/////////////////////////////////////////////////////////////////
// iterintvec.h
/////////////////////////////////////////////////////////////////

d53 37
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.41 2016-04-14 16:09:31-07 - - $
d28 2
a29 2
      size_type size_;
      value_type *data_;
d31 1
a31 1
      iterintvec();                              // default ctor
d38 9
a46 5
      size_type size() const;
      reference at (size_type index);
      const_reference at (size_type index) const;
      iterator begin();
      iterator end();
d62 3
a95 4
// Default ctor.
iterintvec::iterintvec(): size_(0), data_(nullptr) {
}

d111 5
a115 6
   if (this != &that) {
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = new value_type[that.size_];
      std::copy (&that.data_[0], &that.data_[that.size_], &data_[0]);
   }
d121 6
a126 7
   if (this != &that) {
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = that.data_;
      that.size_ = 0;
      that.data_ = nullptr;
   }
a145 4
iterintvec::size_type iterintvec::size() const {
   return size_;
}

a155 8
}

iterintvec::iterator iterintvec::begin() {
   return iterator (&data_[0]);
}

iterintvec::iterator iterintvec::end() {
   return iterator (&data_[size_]);
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.40 2016-04-14 16:08:35-07 - - $
d54 1
a54 1
      iterator (pointer init): curr(init) {
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.39 2016-04-14 16:06:44-07 - - $
d54 2
a55 1
      iterator (pointer init): curr(init) {};
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.38 2016-04-14 16:00:28-07 - - $
d57 10
a66 3
      reference operator*() { return *curr; }
      const_reference operator*() const { return *curr; }
      iterator& operator++() { ++curr; return *this; }
d78 3
a80 1
      operator bool() { return curr != nullptr; }
d196 1
a196 1
   for_each (v1.begin(), v1.end(), [](int i){cout << " " << i;});
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.37 2016-04-14 16:00:11-07 - - $
a29 1
      void range_check (size_type index) const;
d39 2
a40 2
      reference operator[] (size_type index);
      const_reference operator[] (size_type index) const;
d46 4
a78 5
// Private.
void iterintvec::range_check (size_type index) const {
   if (index >= size_) throw out_of_range ("iterintvec::range_check");
}

d120 4
d140 2
a141 2
iterintvec::operator[] (iterintvec::size_type index) {
   range_check (index);
d146 2
a147 2
iterintvec::operator[] (iterintvec::size_type index) const {
   range_check (index);
d166 2
a167 2
   v1[3] = 99;
   int x = v1[3];
d170 1
a170 1
      v1[999];
d175 2
a176 2
   v2[3] = 1234;
   cout << v1[3] << " " << v2[3] << endl;
d178 1
a178 1
   cout << v1[3] << " " << v2[3] << endl;
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.36 2016-04-14 15:57:29-07 - - $
d185 1
a185 1
   for_each (v1.begin(), v1.end(), [](int i){cout << " " << I;});
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.35 2016-04-14 15:50:42-07 - - $
d181 6
a186 1
   for (const auto& i: v1) cout << " " << i << endl;
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.34 2016-04-14 15:50:11-07 - - $
d40 2
a41 2
      value_type get (size_type index) const;
      void put (size_type index, value_type value);
d82 2
a83 1
iterintvec::iterintvec(): size_(0), data_(nullptr){}
d137 2
a138 1
iterintvec::value_type iterintvec::get (size_type index) const {
d143 2
a144 1
void iterintvec::put (size_type index, value_type value) {
d146 1
a146 1
   data_[index] = value;
d164 2
a165 2
   v1.put (3, 99);
   int x = v1.get (3);
d168 1
a168 1
      v1.get (999);
d173 2
a174 2
   v2.put (3, 1234);
   cout << v1.get (3) << " " << v2.get (3) << endl;
d176 1
a176 1
   cout << v1.get (3) << " " << v2.get (3) << endl;
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.33 2016-04-14 15:49:58-07 - - $
d132 1
a132 1
size_type iterintvec::size() const {
d136 1
a136 1
value_type iterintvec::get (size_type index) const {
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.31 2016-04-14 15:48:31-07 - - $
d103 1
a103 1
      std::copy (&that.data_[0], &that.data[that.size_], &data_[0]);
@


1.32
log
@-
@
text
@d87 1
a87 1
   std::copy (&that.data_[0], &that.data[that.size_], &data_[0]);
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.30 2015-04-14 13:25:24-07 - - $
d26 1
a26 1
      friend class iterator;
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.29 2015-04-14 13:24:01-07 - - $
d7 1
a17 5
   private:
      size_t _size;
      int *_data;
      void copy_data (int *data);
      void range_check (size_t index) const;
d26 7
a32 3
      class iterator;
      friend class iterintvec::iterator;
      iterintvec ();                             // default ctor
d38 4
a41 4
      explicit iterintvec (size_t size);
      size_t size() const;
      int get (size_t index) const;
      void put (size_t index, int value);
d51 1
a51 1
      iterator (pointer init): curr (init) {};
d53 8
a60 6
      iterator(): curr (nullptr) {};
      reference operator* () { return *curr; }
      const_reference operator* () const { return *curr; }
      iterator& operator++ () { ++curr; return *this; }
      iterator operator++ (int) {
         iterator tmp {*this}; ++curr; return tmp;
d77 2
a78 9
void iterintvec::copy_data (int *data) {
   for (size_t index = 0; index < _size; ++index) {
      _data[index] = data[index];
   }
}

// Private.
void iterintvec::range_check (size_t index) const {
   if (index >= _size) throw out_of_range ("iterintvec::range_check");
d82 1
a82 1
iterintvec::iterintvec(): _size(0), _data(nullptr){}
d86 2
a87 2
            _size(that._size), _data (new int[that._size]) {
   copy_data (that._data);
d92 3
a94 3
            _size(that._size), _data (that._data) {
   that._size = 0;
   that._data = nullptr;
d100 4
a103 4
      if (_data != nullptr) delete[] _data;
      _size = that._size;
      _data = new int[that._size];
      copy_data (that._data);
d111 5
a115 5
      if (_data != nullptr) delete[] _data;
      _size = that._size;
      _data = that._data;
      that._size = 0;
      that._data = nullptr;
d123 1
a123 1
   if (_data != nullptr) delete[] _data;
d127 3
a129 5
iterintvec::iterintvec (size_t size):
               _size(size), _data (new int[_size]) {
   for (size_t index = 0; index < _size; ++index) {
      _data[index] = 0;
   }
d132 2
a133 2
size_t iterintvec::size() const {
   return _size;
d136 1
a136 1
int iterintvec::get (size_t index) const {
d138 1
a138 1
   return _data[index];
d141 1
a141 1
void iterintvec::put (size_t index, int value) {
d143 1
a143 1
   _data[index] = value;
d147 1
a147 1
   return iterator (&_data[0]);
d151 1
a151 1
   return iterator (&_data[_size]);
d159 1
a159 1
int main () {
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.28 2015-04-14 13:19:47-07 - - $
d181 2
a182 3
   for (iterintvec::iterator i = v1.begin();
        i != v1.end(); ++i) {
      cout << *i << endl;
d184 2
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.22 2014-07-02 18:15:47-07 - - $
d66 1
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.26 2015-04-14 13:18:51-07 - - $
a15 24
class iterintvec;
class iterintvec::iterator;
class iterintvec::iterator {
   private:
      pointer curr;
      friend class iterintvec;
      iterator (pointer init): curr (init) {};
   public:
      iterator(): curr (nullptr) {};
      reference operator* () { return *curr; }
      const_reference operator* () const { return *curr; }
      iterator& operator++ () { ++curr; return *this; }
      iterator operator++ (int) {
         iterator tmp {*this}; ++curr; return tmp;
      }
      bool operator== (const iterator& that) {
         return curr == that.curr;
      }
      bool operator!= (const iterator& that) {
         return not (*this == that);
      }
      operator bool() { return curr != nullptr; }
};

d18 3
a20 3
      size_t size_;
      int* data_;
      void copydata_ (int* data);
d42 24
a65 2
      iterator begin() { return iterator (&data_[0]); }
      iterator end() { return iterator (&data_[size_]); }
d74 3
a76 3
void iterintvec::copydata_ (int* data) {
   for (size_t index = 0; index < size_; ++index) {
      data_[index] = data[index];
d82 1
a82 1
   if (index >= size_) throw out_of_range ("iterintvec::range_check");
d86 1
a86 1
iterintvec::iterintvec(): size_(0), data_(nullptr){}
d90 2
a91 2
            size_(that.size_), data_ (new int[that.size_]) {
   copydata_ (that.data_);
d96 3
a98 3
            size_(that.size_), data_ (that.data_) {
   that.size_ = 0;
   that.data_ = nullptr;
d104 4
a107 4
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = new int[that.size_];
      copydata_ (that.data_);
d115 5
a119 5
      if (data_ != nullptr) delete[] data_;
      size_ = that.size_;
      data_ = that.data_;
      that.size_ = 0;
      that.data_ = nullptr;
d127 1
a127 1
   if (data_ != nullptr) delete[] data_;
d132 3
a134 3
               size_(size), data_ (new int[size_]) {
   for (size_t index = 0; index < size_; ++index) {
      data_[index] = 0;
d139 1
a139 1
   return size_;
d144 1
a144 1
   return data_[index];
d149 9
a157 1
   data_[index] = value;
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.25 2015-04-14 13:18:25-07 - - $
d17 1
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.24 2015-04-14 13:16:37-07 - - $
d16 1
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.23 2015-04-14 13:15:58-07 - - $
d16 22
a68 23
class iterintvec::iterator {
   private:
      pointer curr;
      friend class iterintvec;
      iterator (pointer init): curr (init) {};
   public:
      iterator(): curr (nullptr) {};
      reference operator* () { return *curr; }
      const_reference operator* () const { return *curr; }
      iterator& operator++ () { ++curr; return *this; }
      iterator operator++ (int) {
         iterator tmp {*this}; ++curr; return tmp;
      }
      bool operator== (const iterator& that) {
         return curr == that.curr;
      }
      bool operator!= (const iterator& that) {
         return not (*this == that);
      }
      operator bool() { return curr != nullptr; }
};


@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.22 2014-07-02 18:15:47-07 - - $
d42 2
a43 2
      iterator begin() { return &data_[0]; }
      iterator end() { return &data_[size_]; }
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.21 2014-05-30 16:45:52-07 - - $
d18 3
a20 3
      size_t _size;
      int *_data;
      void copy_data (int *data);
d42 2
a43 2
      iterator begin();
      iterator end();
d66 1
d75 3
a77 3
void iterintvec::copy_data (int *data) {
   for (size_t index = 0; index < _size; ++index) {
      _data[index] = data[index];
d83 1
a83 1
   if (index >= _size) throw out_of_range ("iterintvec::range_check");
d87 1
a87 1
iterintvec::iterintvec(): _size(0), _data(nullptr){}
d91 2
a92 2
            _size(that._size), _data (new int[that._size]) {
   copy_data (that._data);
d97 3
a99 3
            _size(that._size), _data (that._data) {
   that._size = 0;
   that._data = nullptr;
d105 4
a108 4
      if (_data != nullptr) delete[] _data;
      _size = that._size;
      _data = new int[that._size];
      copy_data (that._data);
d116 5
a120 5
      if (_data != nullptr) delete[] _data;
      _size = that._size;
      _data = that._data;
      that._size = 0;
      that._data = nullptr;
d128 1
a128 1
   if (_data != nullptr) delete[] _data;
d133 3
a135 3
               _size(size), _data (new int[_size]) {
   for (size_t index = 0; index < _size; ++index) {
      _data[index] = 0;
d140 1
a140 1
   return _size;
d145 1
a145 1
   return _data[index];
d150 1
a150 9
   _data[index] = value;
}

iterintvec::iterator iterintvec::begin() {
   return iterator (&_data[0]);
}

iterintvec::iterator iterintvec::end() {
   return iterator (&_data[_size]);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.20 2014-04-14 13:31:46-07 - - $
d32 1
a32 1
      iterintvec ();                              // default ctor
d37 1
a37 1
      ~iterintvec();                              // dtor
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.19 2014-04-14 13:28:58-07 - - $
d23 7
a29 7
      typedef int value_type;
      typedef int &reference;
      typedef const int &const_reference;
      typedef int *pointer;
      typedef const int *const_pointer;
      typedef ptrdiff_t difference_type;
      typedef size_t size_type;
d33 4
a36 4
      iterintvec (const iterintvec &);            // copy ctor
      iterintvec (iterintvec &&);                 // move ctor
      iterintvec &operator= (const iterintvec &); // copy operator=
      iterintvec &operator= (iterintvec &&);      // move operator=
d56 1
a56 1
      iterator &operator++ () { ++curr; return *this; }
d60 1
a60 1
      bool operator== (const iterator &that) {
d63 1
a63 1
      bool operator!= (const iterator &that) {
d89 1
a89 1
iterintvec::iterintvec (const iterintvec &that):
d95 1
a95 1
iterintvec::iterintvec (iterintvec &&that):
d102 1
a102 1
iterintvec &iterintvec::operator= (const iterintvec &that){
d113 1
a113 1
iterintvec &iterintvec::operator= (iterintvec &&that){
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.18 2014-04-14 13:28:12-07 - - $
d58 2
a59 1
                        iterator tmp (*this); ++curr; return tmp; }
d61 5
a65 3
      return curr == that.curr; }
      inline bool operator!= (const iterator &that) {
                        return not (*this == that); }
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.17 2014-04-10 19:36:16-07 - - $
d46 1
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.16 2013-07-08 17:04:25-07 - - $
d183 2
a184 4
/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=iterintvec.out.grind \
//TEST//       iterintvec >iterintvec.out 2>&1
a185 1
*/
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.15 2013-07-08 13:18:39-07 - - $
d32 1
a32 1
      iterintvec () = delete;                     // default ctor
d50 1
a50 1
      inline iterator (pointer init): curr (init) {};
d52 5
a56 5
      inline iterator(): curr (NULL) {};
      inline reference operator* () { return *curr; }
      inline const_reference operator* () const { return *curr; }
      inline iterator &operator++ () { ++curr; return *this; }
      inline iterator operator++ (int) {
d58 2
a59 2
      inline bool operator== (const iterator &that) {
                        return curr == that.curr; }
d81 3
d94 1
a94 1
   that._data = NULL;
d100 1
a100 1
      if (_data != NULL) delete[] _data;
d111 1
a111 1
      if (_data != NULL) delete[] _data;
d115 1
a115 1
      that._data = NULL;
d123 1
a123 1
   if (_data != NULL) delete[] _data;
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.14 2013-07-08 13:17:49-07 - - $
d97 1
a97 1
      delete[] _data;
d108 1
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.13 2013-07-08 13:17:02-07 - - $
d4 1
a4 3
// iterintvec - implementation of an int vector, similar to 
// Stroustrup, ch.17 example.
// Same as intvec example, except trivial iterators added.
a37 1
      // Other members.
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.12 2013-07-08 13:16:35-07 - - $
a48 1

a55 3
      inline iterator (const iterator &) = default;
      inline iterator &operator= (const iterator &) = default;
      inline ~iterator () = default;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.11 2013-07-08 13:15:43-07 - - $
d49 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.9 2013-07-08 13:05:38-07 - - $
a56 1
      inline iterator (iterator &&) = default;
a57 1
      inline iterator &operator= (iterator &&) = default;
@


1.10
log
@-
@
text
@d33 1
d52 1
d64 6
a69 3
      inline iterator operator++ (int) { iterator tmp (*this); ++curr; return tmp; }
      inline bool operator== (const iterator &that) { return curr == that.curr; }
      inline bool operator!= (const iterator &that) { return not (*this == that); }
d153 1
a153 1
   return &_data[0];
d157 1
a157 1
   return &_data[_size];
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.8 2013-07-08 12:58:39-07 - - $
d177 1
a177 1
      cout << i << "->" << *i << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.7 2013-07-08 12:57:43-07 - - $
d64 1
a64 1
      inline bool operator!= (const iterator &that) { return not (*this == that; }
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.6 2013-07-08 12:56:26-07 - - $
d65 1
a65 1
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.5 2013-07-05 19:53:11-07 - - $
a32 1
      class const_iterator;
a44 2
      const_iterator begin() const;
      const_iterator cbegin() const;
a45 2
      const_iterator end() const;
      const_iterator cend() const;
a150 8
iterintvec::const_iterator iterintvec::begin() const {
   return &_data[0];
}

iterintvec::const_iterator iterintvec::cbegin() const {
   return &_data[0];
}

a154 8
iterintvec::const_iterator iterintvec::end() const {
   return &_data[_size];
}

iterintvec::const_iterator iterintvec::cend() const {
   return &_data[_size];
}

d175 2
a176 2
   for (iterintvec::const_iterator i = v1.cbegin();
        i != v1.cend(); ++i) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.4 2013-07-05 19:50:36-07 - - $
a29 2
      typedef pointer iterator;
      typedef const_pointer const_iterator;
d32 2
d53 19
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.3 2013-07-05 19:50:03-07 - - $
d177 4
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.2 2013-07-05 19:48:57-07 - - $
d112 2
a113 1
iterintvec::iterintvec (size_t size): _size(size), _data (new int[_size]) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.1 2013-07-05 19:43:29-07 - - $
d132 1
a132 1
iterator iterintvec::begin() {
d136 1
a136 1
const_iterator iterintvec::begin() const {
d140 1
a140 1
const_iterator iterintvec::cbegin() const {
d144 1
a144 1
iterator iterintvec::end() {
d148 1
a148 1
const_iterator iterintvec::end() const {
d152 1
a152 1
const_iterator iterintvec::cend() const {
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: intvec.cpp,v 1.20 2013-07-05 19:32:37-07 - - $
d27 1
a27 1
      typedef const int &reference;
d45 6
d132 24
@
