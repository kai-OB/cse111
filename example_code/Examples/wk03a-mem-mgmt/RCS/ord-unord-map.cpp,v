head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2021.02.04.19.17.05;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.02.04.19.15.27;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.02.04.19.13.30;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.02.04.18.57.05;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.02.04.18.56.31;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.02.04.18.55.26;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: ord-unord-map.cpp,v 1.5 2021-02-04 11:15:27-08 - - $

#include <iostream>
#include <map>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>
using namespace std;

#ifdef __GNUG__

#include <cxxabi.h>
template <typename type>
string demangle (const type &object) {
   const char *const name = typeid (object).name();
   int status = 0;
   using deleter = void (*) (void*);
   unique_ptr<char,deleter> result {
      abi::__cxa_demangle (name, nullptr, nullptr, &status),
      std::free,
   };
   return status == 0 ? result.get() : name; 
}

#else

template <typename type>
string demangle (const type& object) {
   return typeid (object).name();
}

#endif

vector<string> vec {"foo", "bar", "baz", "qux", "hello", "world"};

template <typename map_t>
void dump_map (const string& label, const map_t& cont) {
   cout << "**** " << label << " ****" << endl;
   for (const auto& item: cont) {
      cout << item.first << ": " << item.second << endl;
   }
}

template <typename map_t>
void test_map (map_t&& cont) {
   cout << endl;
   cout << typeid (cont).name() << endl;
   cout << demangle (cont) << endl;
   for (size_t isub = 0; isub < vec.size(); ++isub) {
      cont.emplace (vec[isub], isub);
   }
   dump_map ("emplaced", cont);
   for (size_t isub = 0; isub < vec.size() / 2; ++isub) {
      cont.erase (vec[isub]);
   }
   dump_map ("erased", cont);
}

int main() {
   for (size_t isub = 0; isub < vec.size(); ++isub) {
      cout << isub << ": " << vec[isub] << "; ";
   }
   cout << endl;
   test_map (map<string,size_t>());
   test_map (unordered_map<string,size_t>());
   return EXIT_SUCCESS;
}

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: ord-unord-map.cpp,v 1.4 2021-02-04 11:13:30-08 - - $
d62 1
a62 1
      cout << isub << ": " << vec[isub] << endl;
d64 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ord-unord-map.cpp,v 1.1 2021-02-04 10:55:26-08 - - $
d61 3
@


1.3
log
@-
@
text
@d5 1
d11 25
a35 1
vector<string> data {"foo", "bar", "baz", "qux", "hello", "world"};
d38 2
a39 2
void dump_map (const map_t& cont) {
   cout << typeid (cont) << endl;
d46 6
a51 3
void exercise (map_t& cont) {
   for (size_t isub = 0; isub < data.size(); ++isub) {
      cont.emplace ({data[isub],isub});
d53 3
a55 3
   dump_map (cont);
   for (size_t isub = 0; isub < data.size() / 2; ++isub) {
      cont.erase (data[isub]);
d57 1
a57 1
   dump_map (cont);
d61 4
a64 2
   map<string,size_t> mss;
   unordered_map<string,size_t> umss;
a65 1
}
@


1.2
log
@-
@
text
@d14 1
a14 1
   cout << typeid cont << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d14 1
a14 1
   cout << typeof cont << endl;
@
