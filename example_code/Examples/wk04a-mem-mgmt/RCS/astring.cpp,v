head	1.82;
access;
symbols;
locks;
comment	@// @;


1.82
date	2019.10.26.01.17.11;	author -;	state -;
branches;
next	1.81;

1.81
date	2019.10.26.01.06.52;	author -;	state -;
branches;
next	1.80;

1.80
date	2019.10.26.01.06.27;	author -;	state -;
branches;
next	1.79;

1.79
date	2019.10.26.01.00.04;	author -;	state -;
branches;
next	1.78;

1.78
date	2019.10.26.00.58.13;	author -;	state -;
branches;
next	1.77;

1.77
date	2019.10.26.00.55.38;	author -;	state -;
branches;
next	1.76;

1.76
date	2019.10.26.00.54.43;	author -;	state -;
branches;
next	1.75;

1.75
date	2019.10.26.00.51.11;	author -;	state -;
branches;
next	1.74;

1.74
date	2019.10.26.00.50.38;	author -;	state -;
branches;
next	1.73;

1.73
date	2019.10.26.00.49.35;	author -;	state -;
branches;
next	1.72;

1.72
date	2019.10.26.00.46.49;	author -;	state -;
branches;
next	1.71;

1.71
date	2019.10.26.00.42.31;	author -;	state -;
branches;
next	1.70;

1.70
date	2019.10.26.00.41.05;	author -;	state -;
branches;
next	1.69;

1.69
date	2019.10.26.00.40.18;	author -;	state -;
branches;
next	1.68;

1.68
date	2019.10.26.00.37.31;	author -;	state -;
branches;
next	1.67;

1.67
date	2019.10.26.00.36.05;	author -;	state -;
branches;
next	1.66;

1.66
date	2019.10.26.00.35.46;	author -;	state -;
branches;
next	1.65;

1.65
date	2019.10.26.00.30.02;	author -;	state -;
branches;
next	1.64;

1.64
date	2019.10.26.00.28.47;	author -;	state -;
branches;
next	1.63;

1.63
date	2019.10.26.00.28.33;	author -;	state -;
branches;
next	1.62;

1.62
date	2019.10.26.00.26.09;	author -;	state -;
branches;
next	1.61;

1.61
date	2019.10.26.00.25.06;	author -;	state -;
branches;
next	1.60;

1.60
date	2019.10.26.00.24.43;	author -;	state -;
branches;
next	1.59;

1.59
date	2019.10.26.00.22.13;	author -;	state -;
branches;
next	1.58;

1.58
date	2019.10.26.00.21.30;	author -;	state -;
branches;
next	1.57;

1.57
date	2019.10.26.00.20.06;	author -;	state -;
branches;
next	1.56;

1.56
date	2019.10.26.00.18.11;	author -;	state -;
branches;
next	1.55;

1.55
date	2019.10.26.00.17.05;	author -;	state -;
branches;
next	1.54;

1.54
date	2019.10.26.00.15.09;	author -;	state -;
branches;
next	1.53;

1.53
date	2019.10.26.00.14.48;	author -;	state -;
branches;
next	1.52;

1.52
date	2019.10.26.00.11.20;	author -;	state -;
branches;
next	1.51;

1.51
date	2019.10.26.00.09.53;	author -;	state -;
branches;
next	1.50;

1.50
date	2019.10.26.00.09.24;	author -;	state -;
branches;
next	1.49;

1.49
date	2019.10.26.00.08.56;	author -;	state -;
branches;
next	1.48;

1.48
date	2019.10.26.00.08.47;	author -;	state -;
branches;
next	1.47;

1.47
date	2019.10.26.00.08.34;	author -;	state -;
branches;
next	1.46;

1.46
date	2019.10.26.00.07.06;	author -;	state -;
branches;
next	1.45;

1.45
date	2019.10.26.00.06.41;	author -;	state -;
branches;
next	1.44;

1.44
date	2019.10.26.00.04.00;	author -;	state -;
branches;
next	1.43;

1.43
date	2019.10.26.00.02.18;	author -;	state -;
branches;
next	1.42;

1.42
date	2019.10.26.00.01.42;	author -;	state -;
branches;
next	1.41;

1.41
date	2019.10.25.23.57.33;	author -;	state -;
branches;
next	1.40;

1.40
date	2019.10.25.23.53.06;	author -;	state -;
branches;
next	1.39;

1.39
date	2019.10.25.23.51.10;	author -;	state -;
branches;
next	1.38;

1.38
date	2019.10.25.23.37.52;	author -;	state -;
branches;
next	1.37;

1.37
date	2019.10.25.23.37.28;	author -;	state -;
branches;
next	1.36;

1.36
date	2019.10.25.23.36.18;	author -;	state -;
branches;
next	1.35;

1.35
date	2019.10.25.23.29.45;	author -;	state -;
branches;
next	1.34;

1.34
date	2019.10.25.23.29.24;	author -;	state -;
branches;
next	1.33;

1.33
date	2019.10.25.23.29.07;	author -;	state -;
branches;
next	1.32;

1.32
date	2019.10.25.23.25.01;	author -;	state -;
branches;
next	1.31;

1.31
date	2019.10.25.23.24.44;	author -;	state -;
branches;
next	1.30;

1.30
date	2015.01.26.22.28.34;	author -;	state -;
branches;
next	1.29;

1.29
date	2015.01.26.22.25.43;	author -;	state -;
branches;
next	1.28;

1.28
date	2015.01.26.22.25.27;	author -;	state -;
branches;
next	1.27;

1.27
date	2015.01.26.22.24.30;	author -;	state -;
branches;
next	1.26;

1.26
date	2015.01.26.22.22.35;	author -;	state -;
branches;
next	1.25;

1.25
date	2013.07.18.00.02.02;	author -;	state -;
branches;
next	1.24;

1.24
date	2013.07.13.02.34.03;	author -;	state -;
branches;
next	1.23;

1.23
date	2013.07.13.02.33.20;	author -;	state -;
branches;
next	1.22;

1.22
date	2013.07.13.02.32.43;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.07.13.02.32.00;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.07.13.02.31.08;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.07.13.02.30.48;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.07.13.02.30.18;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.07.13.02.27.15;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.07.13.02.26.23;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.07.13.02.25.50;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.07.13.02.25.38;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.07.13.02.22.57;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.07.13.02.22.15;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.07.13.02.22.01;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.07.13.02.21.48;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.07.13.02.21.34;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.07.13.02.19.50;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.01.26.02.55.03;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.01.26.02.53.41;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.01.26.02.52.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.26.02.52.31;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.26.02.51.46;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.26.02.51.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.21.01.05.42;	author -;	state -;
branches;
next	;


desc
@@


1.82
log
@-
@
text
@// $Id: astring.cpp,v 1.81 2019-10-25 18:06:52-07 - - $

//
// NAME
//    astring - trivial implementation of a string using an array
//
// DESCRIPTION
//    We show how to implement a simple string class.
//

#include <algorithm>
#include <cstring>
#include <iostream>
using namespace std;

/////////////////////////////////////////////////////////////////
// astring.h
/////////////////////////////////////////////////////////////////

class astring {
   friend ostream& operator<< (ostream&, const astring&);
   private:
      static constexpr size_t DEFAULT_CAPACITY = 16;
      size_t capacity_;
      size_t size_;
      char* cstr_;
   public:

      // override implicit members
      astring();                                // default ctor
      astring (const astring&);                 // copy ctor
      astring& operator= (const astring&);      // operator=
      ~astring();                               // dtor
      astring (astring&&);                      // move ctor
      astring& operator= (astring&&);           // move operator=

      // other members
      astring (const char*);                // "" ctor
      explicit astring (size_t);            // length reservation
      astring& operator= (const char*);     // operator=
      astring& operator+= (const astring&); // += astring&
      astring& operator+= (const char);     // += char
      astring& operator+= (const char*);    // += char* 
      void reserve (size_t);                // ensure buffer size;
      const char& operator[] (size_t pos) const { return cstr_[pos]; }
      char& operator[] (size_t pos) { return cstr_[pos]; }
      size_t size() const { return size_; }
      size_t capacity() const { return capacity_; }
};

astring& operator+ (const astring&, const astring&);
astring& operator+ (const astring&, const char);
astring& operator+ (const astring&, const char*);
astring& operator+ (const char*, const astring&);

/////////////////////////////////////////////////////////////////
// astring.cpp
/////////////////////////////////////////////////////////////////

astring::astring(): capacity_ (DEFAULT_CAPACITY),
                    size_ (0),
                    cstr_ (new char[DEFAULT_CAPACITY]) {
   cstr_[size_] = '\0';
}

astring::astring (const astring& that):
                  capacity_ (that.capacity_),
                  size_ (that.size_),
                  cstr_ (new char[that.capacity_]) {
   strncpy (cstr_, that.cstr_, size_ + 1);
}

astring& astring::operator= (const astring& that) {
   if (this == &that) return *this;
   reserve (that.size_ + 1);
   size_ = that.size_;
   strncpy (cstr_, that.cstr_, size_ + 1);
   return *this;
}

astring::astring (astring&& that) {
   *this = that;
}

astring& astring::operator= (astring&& that) {
   if (this == &that) return *this;
   capacity_ = that.capacity_;
   size_ = that.size_;
   cstr_ = that.cstr_;
   that.size_ = that.capacity_ = 0;
   that.cstr_ = nullptr;
   return *this;
}

astring::~astring() {
   if (cstr_ != nullptr) delete[] cstr_;
}


astring::astring (const char* that) {
   size_ = strlen (that);
   capacity_ = max (DEFAULT_CAPACITY, size_ + 1);
   cstr_ = new char [capacity_];
   strncpy (cstr_, that, size_ + 1);
}

astring::astring (size_t capacity): capacity_ (capacity), size_ (0),
                    cstr_ (new char[size_]) {
   cstr_[size_] = '\0';
}

astring& astring::operator= (const char* that) {
   size_ = strlen (that);
   reserve (size_ + 1);
   strncpy (cstr_, that, size_ + 1);
   return *this;
}

astring& astring::operator+= (const astring& that) {
   return *this += that.cstr_;
}

astring& astring::operator+= (const char achar) {
   ++size_;
   reserve (size_ + 1);
   cstr_[size_ - 1] = achar;
   cstr_[size_] = '\0';
   return *this;
}

astring& astring::operator+= (const char* that) {
   size_t prev_size = size_;
   size_t that_size = strlen (that);
   size_ += that_size;
   reserve (size_ + 1);
   strncpy (&cstr_[prev_size], that, that_size + 1);
   return *this;
}

void astring::reserve (size_t capacity) {
   if (capacity < capacity_) return;
   capacity_ = max ({DEFAULT_CAPACITY, capacity, capacity_ * 2});
   char* old_cstr = cstr_;
   cstr_ = new char[capacity_];
   strncpy (cstr_, old_cstr, size_ + 1);
   delete[] old_cstr;
}


ostream& operator<< (ostream& out, const astring& that) {
   out << that.cstr_;
   return out;
}

astring& operator+ (const astring& left, const astring& right) {
   astring result (left);
   return result += right;
}

astring& operator+ (const astring& left, const char right) {
   astring result (left);
   return result += right;
}

astring& operator+ (const astring& left, const char* right) {
   astring result (left);
   return result += right;
}

astring& operator+ (const char* left, const astring& right) {
   astring result (left);
   return result += right;
}


/////////////////////////////////////////////////////////////////
// main.cpp
/////////////////////////////////////////////////////////////////

void print (const astring& str) {
   cout << str.size() << " " << str.capacity()
        << " \"" << str << "\"" << endl;
}

int main (int argc, char** argv) {
   astring first = "Hello, World!";
   cout << "first=" << first << endl;
   astring second;
   second = first;
   second += 'x'; second += 'y';
   for (int i = 0; i < 3; ++i) second[i] = i + '1';
   cout << "second=" << second << endl;
   for (size_t i = 5; i < second.size(); ++i) {
      cout << second[i] << endl;
   }
   astring allargs = "argv:";
   for (char** arg = &argv[0]; arg != &argv[argc]; ++arg) {
      print (allargs);
      ((allargs += " [") += *arg) += ']';
   }
   print (allargs);
   return EXIT_SUCCESS;
}

/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//          astring foo bar baz qux hello world \
//TEST//          >astring.out 2>&1
//TEST// mkpspdf astring.ps astring.cpp* astring.out*
*/

@


1.81
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.80 2019-10-25 18:06:27-07 - - $
a11 1
#include <cassert>
a13 1

a115 1
   assert (cstr_[size_] == 0);
a131 1
   assert (cstr_[size_] == 0);
@


1.80
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.79 2019-10-25 18:00:04-07 - - $
d203 1
a203 1
      ((allargs += " \"") += *arg) += '"';
@


1.79
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.78 2019-10-25 17:58:13-07 - - $
d203 1
a203 1
      (allargs += " ") += *arg;
@


1.78
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.77 2019-10-25 17:55:38-07 - - $
d186 1
a186 1
        << "\"" << str << "\"" << endl;
d211 2
a212 1
//TEST//       astring foo bar baz qux hello world>astring.out 2>&1
@


1.77
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.76 2019-10-25 17:54:43-07 - - $
d184 5
d200 3
a202 3
   astring allargs = "args:";
   for (char** arg = &argv[1]; arg != &argv[argc]; ++arg) {
      cout << allargs << endl;
d205 1
a205 1
   cout << allargs << endl;
@


1.76
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.75 2019-10-25 17:51:11-07 - - $
a16 3
#define DEBUG(X) cout << "[" << __LINE__ << "]" << __PRETTY_FUNCTION__ \
                      << ":" << endl << X << endl;
const void* adr (const char* s) { return static_cast<const void*> (s); }
a106 1
   DEBUG (size_ << " " << capacity_ << "\"" << cstr_ << "\"");
d197 1
a199 1
   cout << allargs << endl;
@


1.75
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.74 2019-10-25 17:50:38-07 - - $
d140 1
a140 1
   char* prev_end_pos = &cstr_[size_];
d144 1
a144 5
DEBUG (size_ << " " << capacity_ << " " 
       << "\"" << cstr_ << "\" " << adr(cstr_) << " " \
       << adr(prev_end_pos) << " \"" << that << "\"");
   strncpy (prev_end_pos, that, that_size + 1);
DEBUG ("\"" << *this << "\"");
a148 1
DEBUG (capacity_);
a153 1
DEBUG (capacity_ << " " << adr(old_cstr) << " " << adr(cstr_));
@


1.74
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.73 2019-10-25 17:49:35-07 - - $
d17 1
a17 1
#define DEBUG(X) cout "[" << __LINE__ << "]" << __PRETTY_FUNCTION__ \
@


1.73
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.72 2019-10-25 17:46:49-07 - - $
d17 2
a18 2
#define DEBUG(X) cout << __PRETTY_FUNCTION__ << "[" << __LINE__ \
                      << "]:" << endl << X << endl;
@


1.72
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.71 2019-10-25 17:42:31-07 - - $
a155 1
DEBUG (capacity_);
d159 1
a159 1
DEBUG ("\"" << adr(old_cstr) << "\" \"" << adr(cstr_) << "\"");
@


1.71
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.70 2019-10-25 17:41:05-07 - - $
d160 1
a160 1
DEBUG ("\"" << old_cstr << "\" \"" << cstr_ << "\"");
@


1.70
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.69 2019-10-25 17:40:18-07 - - $
a146 1
DEBUG (int(cstr_[size_]));
@


1.69
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.68 2019-10-25 17:37:31-07 - - $
d110 1
a110 1
   DEBUGF (size_ << " " << capacity_ << "\"" << cstr_ << "\"");
@


1.68
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.67 2019-10-25 17:36:05-07 - - $
d110 1
@


1.67
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.64 2019-10-25 17:28:47-07 - - $
d139 1
d145 1
a145 1
       << adr(&cstr_[size_]) << " \"" << that << "\"");
d147 1
a147 1
   strncpy (&cstr_[size_], that, that_size + 1);
@


1.66
log
@-
@
text
@d19 1
a138 1
   char* prev_end_pos = &cstr_[size_];
d142 6
a147 1
   strncpy (prev_end_pos, that, that_size + 1);
d152 1
d155 1
d159 1
@


1.65
log
@-
@
text
@a18 1
const void* adr (const char* s) { return static_cast<const void*> (s); }
d138 1
d142 1
a142 6
DEBUG (size_ << " " << capacity_ << " " 
       << "\"" << cstr_ << "\" " << adr(cstr_) << " " \
       << adr(&cstr_[size_]) << " \"" << that << "\"");
DEBUG (int(cstr_[size_]));
   strncpy (&cstr_[size_], that, that_size + 1);
DEBUG ("\"" << *this << "\"");
a146 1
DEBUG (capacity_);
a148 1
DEBUG (capacity_);
a151 2
   assert (cstr_[size_] == 0);
DEBUG ("\"" << old_cstr << "\" \"" << cstr_ << "\"");
@


1.64
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.63 2019-10-25 17:28:33-07 - - $
d159 1
@


1.63
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.62 2019-10-25 17:26:09-07 - - $
d12 1
@


1.62
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.61 2019-10-25 17:25:06-07 - - $
d120 1
d137 1
@


1.61
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.60 2019-10-25 17:24:43-07 - - $
d142 2
a143 2
   strcat (cstr_, that);
   //strncpy (&cstr_[size_], that, that_size + 1);
@


1.60
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.59 2019-10-25 17:22:13-07 - - $
d142 1
a142 1
   strcat (&cstr_, that);
@


1.59
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.58 2019-10-25 17:21:30-07 - - $
d139 1
a139 1
DEBUG (size_ << " " << capacity_
d142 2
a143 1
   strncpy (&cstr_[size_], that, that_size + 1);
@


1.58
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.57 2019-10-25 17:20:06-07 - - $
d155 1
a155 1
DEBUG ("\"" << old_cstr << "\" \"" << cstr_ "\"");
@


1.57
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.56 2019-10-25 17:18:11-07 - - $
d139 2
a140 2
DEBUG (size_ << " " << capacity_);
DEBUG ("\"" << cstr_ << "\" " << adr(cstr_) << " " \
@


1.56
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.55 2019-10-25 17:17:05-07 - - $
d143 1
d155 1
@


1.55
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.54 2019-10-25 17:15:09-07 - - $
d17 1
a17 1
                      << "]: " << X << endl;
@


1.54
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.53 2019-10-25 17:14:48-07 - - $
d200 1
a200 1
   for (char** arg = &argv[1]; arg < &argv[argc]; ++arg) {
@


1.53
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.52 2019-10-25 17:11:20-07 - - $
d139 1
a139 1
DEBUG (<< size_ << " " << capacity_);
@


1.52
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.51 2019-10-25 17:09:53-07 - - $
a137 1
DEBUG (that << " " << size_ << " " << capacity_);
d139 3
a141 1
DEBUG (adr(cstr_) << " " << adr(&cstr_[size_]) << " " << that);
d147 1
a148 1
DEBUG (capacity_);
@


1.51
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.50 2019-10-25 17:09:24-07 - - $
d138 1
a138 1
DEBUG (size_ << " " << capacity_);
@


1.50
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.49 2019-10-25 17:08:56-07 - - $
d18 1
a18 1
void* addr (const char* s) { return static_cast<void*> (s); }
d140 1
a140 1
DEBUG (addr(cstr_) << " " << addr(&cstr_[size_]) << " " << that);
@


1.49
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.48 2019-10-25 17:08:47-07 - - $
d140 1
a140 1
DEBUG (addr(cstr_) << " " << addr(cstr_[size_]) << " " << that);
@


1.48
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.47 2019-10-25 17:08:34-07 - - $
d18 1
a18 1
void* addr (const char* s) { return static_cast<void*> (s0; }
@


1.47
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.46 2019-10-25 17:07:06-07 - - $
d18 1
a18 1
void* addr (const char* s) { return static_cast<void*> s; }
@


1.46
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.45 2019-10-25 17:06:41-07 - - $
d18 1
d140 1
a140 1
DEBUG ((void*)cstr_ << " " << (void*)cstr_[size_] << " " << that);
@


1.45
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.44 2019-10-25 17:04:00-07 - - $
d139 1
a139 1
DEBUG ((void*)cstr << " " << (void*)cstr_[size_] << " " << that);
@


1.44
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.43 2019-10-25 17:02:18-07 - - $
a135 1
DEBUG (size_ << " " << that_size);
d137 1
a137 1
DEBUG (size_);
d139 1
a139 1
DEBUG (&cstr << " " << &cstr_[size_] << " " << that);
d208 1
a208 1
//TEST//       astring foo bar baz >astring.out 2>&1
@


1.43
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.42 2019-10-25 17:01:42-07 - - $
d140 1
@


1.42
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.41 2019-10-25 16:57:33-07 - - $
d16 2
a17 2
#define DEBUG(X) cout << __PRETTY_FUNCTION__ << "[" << __LINE__ "]: " \
                      << X << endl;
@


1.41
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.40 2019-10-25 16:53:06-07 - - $
d16 2
d136 1
d138 1
d146 1
d148 1
@


1.40
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.39 2019-10-25 16:51:10-07 - - $
d103 1
a103 1
   capacity_ = size_ + 1;
d142 1
a142 3
cout << capacity << " " << DEFAULT_CAPACITY << endl;
   capacity_ = max ({capacity, capacity_ * 2, DEFAULT_CAPACITY});
cout << capacity << " " << DEFAULT_CAPACITY << endl;
@


1.39
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.38 2019-10-25 16:37:52-07 - - $
d142 1
d144 1
@


1.38
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.37 2019-10-25 16:37:28-07 - - $
a201 1
//TEST//       --log-file=astring.out.grind \
@


1.37
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.36 2019-10-25 16:36:18-07 - - $
d149 1
@


1.36
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.35 2019-10-25 16:29:45-07 - - $
d22 1
a22 1
      friend ostream& operator<< (ostream&, const astring&);
d100 1
@


1.35
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.34 2019-10-25 16:29:24-07 - - $
d137 9
@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.33 2019-10-25 16:29:07-07 - - $
a11 1
#include <cstdlib>
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.32 2019-10-25 16:25:01-07 - - $
d72 1
a72 1
   strncpy (cstr_, that.cstr_, size_t + 1);
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.31 2019-10-25 16:24:44-07 - - $
d40 7
a46 6
      astring (const char*);               // "" ctor
      explicit astring (size_t);           // length reservation
      astring& operator= (const char*);    // operator=
      astring& operator+= (const char);    // += char
      astring& operator+= (const char*);   // += char* 
      void reserve (size_t);               // ensure buffer size;
d120 4
a137 4
}

size_t astring::size() const {
   return size_;
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.30 2015-01-26 14:28:34-08 - - $
d69 1
a69 1
                  size_ (that.size_);
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.29 2015-01-26 14:25:43-08 - - $
d11 1
a14 3
#include <sstream>
#include <stdexcept>
#include <string>
d23 1
d28 1
a28 4
      char* buffer_;
      void range_check (size_t pos, const char* id) const;
      void copy_from (const astring&);
      void clear_that (astring&);
d40 10
a49 12
      astring (const char* );                 // "" ctor
      explicit astring (size_t);              // length reservation
      astring& operator= (const char*);       // operator=
      astring& operator+= (const char);       // += char
      astring& operator+= (const char*);      // += char* 
      char operator[] (size_t pos) const;     // const subscript =[]
      char& operator[] (size_t pos);          // ref subscript []=
      void reserve (size_t);                  // ensure buffer size;
      size_t size() const;                    // strlen
      size_t capacity() const;
      const char* c_str() const;              // borrow string in C fmt
      friend ostream& operator<< (ostream&, const astring&);
d51 5
d61 4
a64 3
void astring::range_check (size_t pos, const char* id) const {
   if (pos < size_) return;
   throw out_of_range (id);
d67 5
a71 19
void astring::copy_from (const astring& that) {
   reserve (that.size_ + 1);
   size_ = that.size_;
   strcpy (buffer_, that.buffer_);
}

void astring::clear_that (astring& that) {
   that.size_ = that.capacity_ = 0;
   that.buffer_ = NULL;
}

astring::astring(): capacity_ (DEFAULT_CAPACITY), size_ (0),
                    buffer_ (new char[DEFAULT_CAPACITY]) {
   buffer_[size_] = '\0';
}

astring::astring (const astring& that): capacity_ (that.capacity_),
                    buffer_ (new char[that.capacity_]) {
   copy_from (that);
d75 4
a78 1
   if (this !=& that) copy_from (that);
d82 2
a83 3
astring::astring (astring&& that): capacity_ (that.capacity_),
                    size_ (that.size_), buffer_ (that.buffer_) {
   clear_that (that);
d87 6
a92 6
   if (this !=& that) {
      capacity_ = that.capacity_;
      size_ = that.size_;
      buffer_ = that.buffer_;
      clear_that (that);
   }
d97 1
a97 1
   if (buffer_ != NULL) delete[] buffer_;
a99 1

d103 2
a104 2
   buffer_ = new char [capacity_];
   strcpy (buffer_, that);
d108 2
a109 2
                    buffer_ (new char[size_]) {
   buffer_[size_] = '\0';
d115 1
a115 1
   strcpy (buffer_, that);
d122 2
a123 2
   buffer_[size_ - 1] = achar;
   buffer_[size_] = '\0';
d127 3
a129 2
astring& astring::operator+= (const char* cstr) {
   size_ += strlen (cstr);
d131 1
a131 1
   strcat (buffer_, cstr);
d135 12
a146 18
char astring::operator[] (size_t pos) const {
   range_check (pos, "operator[]");
   return buffer_[pos]; // no bounds check
}

char& astring::operator[] (size_t pos) {
   range_check (pos, "operator[]");
   return buffer_[pos]; // no bounds check
}

void astring::reserve (size_t capacity) {
   if (capacity < capacity_) return;
   capacity_ *= 2;
   if (capacity_ < capacity) capacity_ = capacity + 1;
   char* oldbuffer_ = buffer_;
   buffer_ = new char[capacity_];
   strcpy (buffer_, oldbuffer_);
   delete[] oldbuffer_;
d149 3
a151 3

size_t astring::size() const {
   return size_;
d154 3
a156 2
const char* astring::c_str() const {
   return buffer_;
d159 3
a161 3
ostream& operator<< (ostream& out, const astring& that) {
   out << that.buffer_;
   return out;
d164 1
d185 1
a185 1
   cout << allargs.c_str() << endl;
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.28 2015-01-26 14:25:27-08 - - $
d29 3
a31 3
      char *buffer_;
      void range_check (size_t pos, const char *id) const;
      void copy_from (const astring &);
d37 2
a38 2
      astring (const astring &);                // copy ctor
      astring &operator= (const astring &);     // operator=
d41 1
a41 1
      astring &operator= (astring&&);           // move operator=
d44 1
a44 1
      astring (const char *);                 // "" ctor
d46 3
a48 3
      astring &operator= (const char *);      // operator=
      astring &operator+= (const char);       // += char
      astring &operator+= (const char *);     // += char *
d50 1
a50 1
      char &operator[] (size_t pos);          // ref subscript []=
d54 2
a55 2
      const char *c_str() const;              // borrow string in C fmt
      friend ostream &operator<< (ostream &, const astring &);
d62 1
a62 1
void astring::range_check (size_t pos, const char *id) const {
d88 1
a88 1
astring &astring::operator= (const astring& that) {
d98 1
a98 1
astring &astring::operator= (astring&& that) {
d113 1
a113 1
astring::astring (const char *that) {
d125 1
a125 1
astring &astring::operator= (const char *that) {
d132 1
a132 1
astring &astring::operator+= (const char achar) {
d140 1
a140 1
astring &astring::operator+= (const char *cstr) {
d152 1
a152 1
char &astring::operator[] (size_t pos) {
d161 1
a161 1
   char *oldbuffer_ = buffer_;
d172 1
a172 1
const char *astring::c_str() const {
d176 1
a176 1
ostream &operator<< (ostream &out, const astring& that) {
d185 1
a185 1
int main (int argc, char **argv) {
d197 1
a197 1
   for (char **arg = argv + 1; arg < argv + argc; ++arg) {
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.27 2015-01-26 14:24:30-08 - - $
d32 1
a32 1
      void clear_that (astring&&);
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.26 2015-01-26 14:22:35-08 - - $
d73 1
a73 1
void astring::clear_that (astring&& that) {
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.25 2013-07-17 17:02:02-07 - - $
d32 1
a32 1
      void clear_that (astring &&);
d40 2
a41 2
      astring (astring &&);                     // move ctor
      astring &operator= (astring &&);          // move operator=
d67 1
a67 1
void astring::copy_from (const astring &that) {
d73 1
a73 1
void astring::clear_that (astring &&that) {
d83 1
a83 1
astring::astring (const astring &that): capacity_ (that.capacity_),
d88 2
a89 2
astring &astring::operator= (const astring &that) {
   if (this != &that) copy_from (that);
d93 1
a93 1
astring::astring (astring &&that): capacity_ (that.capacity_),
d98 2
a99 2
astring &astring::operator= (astring &&that) {
   if (this != &that) {
d176 1
a176 1
ostream &operator<< (ostream &out, const astring &that) {
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.24 2013-07-12 19:34:03-07 - - $
d26 1
a26 1
      static const size_t DEFAULT_CAPACITY = 16;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.23 2013-07-12 19:33:20-07 - - $
d109 1
a109 1
   delete[] buffer_;
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.22 2013-07-12 19:32:43-07 - - $
d112 1
d167 1
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.21 2013-07-12 19:32:00-07 - - $
d57 1
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.20 2013-07-12 19:31:08-07 - - $
d195 1
a195 1
      allargs += " " += *arg;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.19 2013-07-12 19:30:48-07 - - $
d195 1
a195 1
      allargs += *arg;
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.18 2013-07-12 19:30:18-07 - - $
d141 1
a141 1
   strcat (cstr);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.16 2013-07-12 19:26:23-07 - - $
d195 1
a195 1
      allargs += arg;
@


1.17
log
@-
@
text
@a24 1
      friend ostream &operator<< (ostream &, const astring &);
d46 1
a46 1
      astring &operator= (const char *const); // operator=
d48 1
d55 1
d138 7
d169 4
d198 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.15 2013-07-12 19:25:50-07 - - $
d182 2
a183 2
   for (const char **arg = argv + 1; arg < argv + argc; ++arg) {
      allargs += " " + arg;
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.14 2013-07-12 19:25:38-07 - - $
d182 1
a182 1
   for (const char *arg = argv + 1; arg < argv + argc; ++arg) {
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.13 2013-07-12 19:22:57-07 - - $
d181 1
a181 1
   astring allargs = "args:"
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.12 2013-07-12 19:22:15-07 - - $
a170 2
   (void) argc; // warning: unused parameter 'argc'
   (void) argv; // warning: unused parameter 'argv'
d179 1
a179 1
      cout << second.at (i) << endl;
d181 5
d192 1
a192 1
//TEST//       astring >astring.out 2>&1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.11 2013-07-12 19:22:01-07 - - $
d31 1
a31 1
      void range_check (size_t pos, const char *id);
d60 1
a60 1
void astring::range_check (size_t pos, const char *id) {
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.10 2013-07-12 19:21:48-07 - - $
d97 1
a97 1
   if (this != *that) {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.9 2013-07-12 19:21:34-07 - - $
d92 1
a92 1
                    size_ (that.size), buffer_ (that.buffer_) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.8 2013-07-12 19:19:50-07 - - $
d27 1
a27 1
      static const DEFAULT_CAPACITY = 16;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.7 2013-01-25 18:55:03-08 - - $
d92 1
a92 1
                    size_ (that.size), buffer_ (that.buffer) {
d97 7
a103 4
   capacity_ = that.capacity_;
   size_ = that.size_;
   buffer_ = that.buffer_;
   clear_that (that);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.6 2013-01-25 18:53:41-08 - - $
a19 9
#define LINE "[" << __LINE__ << "] "
#define IDENT(name) \
        cout << LINE << reinterpret_cast<const void*> (this) \
             << "->" << name << ": astring{" << endl \
             << "  bufsize=" << bufsize \
             << ", astrlen=" << astrlen \
             << ", buf=" << reinterpret_cast<const void*> (buffer) \
             << "->\"" << buffer << "\"" << endl << "}" << endl;

d27 7
a33 5
      size_t bufsize;
      size_t astrlen;
      char *buffer;
      static const size_t INITSIZE;
      void range_check (size_t pos);
d41 2
d45 10
a54 11
      astring (const char *const);              // "" ctor
      explicit astring (size_t);                // length reservation
      astring &operator= (const char *const);   // operator=
      astring &operator+= (const char);         // += char
      char operator[] (size_t pos) const;       // const subscript =[]
      char &operator[] (size_t pos);            // ref subscript []=
      char at (size_t pos) const;               // checked const =[]
      char &at (size_t pos);                    // checked ref []=
      void ensure_size (size_t);                // ensure buffer size;
      size_t size() const;                      // strlen

a55 1

d60 15
a74 1
const size_t astring::INITSIZE = 8;
d76 3
a78 4
astring::astring(): bufsize (INITSIZE), astrlen (0),
                    buffer (new char[INITSIZE]) {
   buffer[astrlen] = '\0';
   IDENT ("astring::astring()");
d81 3
a83 4
astring::astring (const astring &that):
         bufsize (that.bufsize), buffer (new char[that.bufsize]) {
   *this = that;
   IDENT ("astring::astring (const astring &)");
d87 1
a87 6
   if (this != &that) {
      ensure_size (that.astrlen + 1);
      astrlen = that.astrlen;
      strcpy (buffer, that.buffer);
   }
   IDENT ("astring &astring::operator= (const astring &)");
d91 12
d104 1
a104 2
   IDENT ("astring::~astring()");
   delete[] buffer;
d107 16
a122 20
astring::astring (const char *const that) {
   astrlen = strlen (that);
   bufsize = astrlen + 1;
   buffer = new char [bufsize];
   strcpy (buffer, that);
   IDENT ("astring::astring (const char *const)");
}

astring::astring (size_t _size): bufsize (_size), astrlen (0),
                    buffer (new char[_size]) {
   buffer[astrlen] = '\0';
   IDENT ("astring::astring (size_t)");
   
}

astring &astring::operator= (const char *const that) {
   astrlen = strlen (that);
   ensure_size (astrlen + 1);
   strcpy (buffer, that);
   IDENT ("astring &astring::operator= (const char *const)");
d125 1
a125 1

d127 4
a130 5
   ++astrlen;
   ensure_size (astrlen + 1);
   buffer[astrlen - 1] = achar;
   buffer[astrlen] = '\0';
   IDENT ("astring &astring::operator+= (const char)");
a133 10
void astring::range_check (size_t pos) {
   // Can't be negative: size_t is unsigned.
   size_t _size = size();
   if (pos < _size) return;
   ostringstream message;
   message << "astring::range_check(" << pos << "), "
           << "size()=" << _size;
   throw out_of_range (message.str());
}

d135 2
a136 2
   IDENT ("const char astring::operator[] (size_t) const");
   return buffer[pos]; // no bounds check
d140 2
a141 7
   IDENT ("char &astring::operator[] (size_t)");
   return buffer[pos]; // no bounds check
}

char astring::at (size_t pos) const {
   IDENT ("const char astring::operator[] (size_t) const");
   return buffer[pos]; // no bounds check
d144 8
a151 14
char &astring::at (size_t pos) {
   IDENT ("char &astring::operator[] (size_t)");
   return buffer[pos]; // no bounds check
}

void astring::ensure_size (size_t size) {
   if (size < bufsize) return;
   bufsize *= 2;
   if (bufsize < size) bufsize = size;
   char *oldbuffer = buffer;
   buffer = new char[bufsize];
   strcpy (buffer, oldbuffer);
   delete[] oldbuffer;
   IDENT ("void astring::ensure_size (size_t)");
d155 1
a155 2
   IDENT ("size_t astring::size() const");
   return astrlen;
d159 1
a159 1
   out << that.buffer;
d162 1
a162 1

d171 1
a171 1
   cout << LINE << "first=" << first << endl;
d176 1
a176 1
   cout << LINE << "second=" << second << endl;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.1 2012-04-20 18:05:42-07 - - $
d118 1
a118 1

d127 1
a127 1

@


1.5
log
@-
@
text
@d54 1
a54 1
      const char operator[] (size_t pos) const; // const subscript =[]
d56 1
a56 1
      const char at (size_t pos) const;         // checked const =[]
d138 1
a138 1
const char astring::operator[] (size_t pos) const {
d148 1
a148 1
const char astring::at (size_t pos) const {
@


1.4
log
@-
@
text
@d184 2
a185 2
   argc; // warning: unused parameter 'argc'
   argv; // warning: unused parameter 'argv'
@


1.3
log
@-
@
text
@d184 2
@


1.2
log
@-
@
text
@d54 1
a54 1
      char operator[] (size_t pos) const; // const subscript =[]
d56 1
a56 1
      char at (size_t pos) const;         // checked const =[]
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: astring.cpp,v 1.1 2012-04-13 18:24:22-07 - - $
d54 1
a54 1
      const char operator[] (size_t pos) const; // const subscript =[]
d56 1
a56 1
      const char at (size_t pos) const;         // checked const =[]
@
