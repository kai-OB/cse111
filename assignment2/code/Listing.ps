%!PS-Adobe-3.0
%%BoundingBox: 38 24 574 768
%%Title: ./Listing.ps
%%For: Kai Monique O'Brien
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Mon May  3 17:37:03 2021
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier-Bold /F-gs-font MF
/F-gs-font 11 11 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 536 def
/d_page_h 744 def
/d_header_x 0 def
/d_header_y 708 def
/d_header_w 536 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 536 def
/d_footer_h 0 def
/d_output_w 536 def
/d_output_h 708 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (commands.h) def
/fdir (.) def
/ftail (commands.h) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: commands.h,v 1.11 2016-01-14 14:45:21-08 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#ifndef __COMMANDS_H__) s
32.4 658 M (4:) s
52.2 658 M
(#define __COMMANDS_H__) s
32.4 646 M (5:) s
32.4 634 M (6:) s
52.2 634 M
(#include <unordered_map>) s
32.4 622 M (7:) s
52.2 622 M
(using namespace std;) s
32.4 610 M (8:) s
32.4 598 M (9:) s
52.2 598 M
(#include "file_sys.h") s
25.8 586 M (10:) s
52.2 586 M
(#include "util.h") s
25.8 574 M (11:) s
25.8 562 M (12:) s
52.2 562 M
(// A couple of convenient usings to avoid verbosity.) s
25.8 550 M (13:) s
25.8 538 M (14:) s
52.2 538 M
(using command_fn = void \(*\)\(inode_state& state, const wordvec& words\);) s
25.8 526 M (15:) s
52.2 526 M
(using command_hash = unordered_map<string,command_fn>;) s
25.8 514 M (16:) s
25.8 502 M (17:) s
52.2 502 M
(// command_error -) s
25.8 490 M (18:) s
52.2 490 M
(//    Extend runtime_error for throwing exceptions related to this ) s
25.8 478 M (19:) s
52.2 478 M
(//    program.) s
25.8 466 M (20:) s
25.8 454 M (21:) s
52.2 454 M
(class command_error: public runtime_error {) s
25.8 442 M (22:) s
52.2 442 M
(   public: ) s
25.8 430 M (23:) s
52.2 430 M
(      explicit command_error \(const string& what\);) s
25.8 418 M (24:) s
52.2 418 M
(};) s
25.8 406 M (25:) s
25.8 394 M (26:) s
52.2 394 M
(// execution functions -) s
25.8 382 M (27:) s
25.8 370 M (28:) s
52.2 370 M
(void fn_cat    \(inode_state& state, const wordvec& words\);) s
25.8 358 M (29:) s
52.2 358 M
(void fn_cd     \(inode_state& state, const wordvec& words\);) s
25.8 346 M (30:) s
52.2 346 M
(void fn_echo   \(inode_state& state, const wordvec& words\);) s
25.8 334 M (31:) s
52.2 334 M
(void fn_exit   \(inode_state& state, const wordvec& words\);) s
25.8 322 M (32:) s
52.2 322 M
(void fn_ls     \(inode_state& state, const wordvec& words\);) s
25.8 310 M (33:) s
52.2 310 M
(void fn_lsr    \(inode_state& state, const wordvec& words\);) s
25.8 298 M (34:) s
52.2 298 M
(void fn_make   \(inode_state& state, const wordvec& words\);) s
25.8 286 M (35:) s
52.2 286 M
(void fn_mkdir  \(inode_state& state, const wordvec& words\);) s
25.8 274 M (36:) s
52.2 274 M
(void fn_prompt \(inode_state& state, const wordvec& words\);) s
25.8 262 M (37:) s
52.2 262 M
(void fn_pwd    \(inode_state& state, const wordvec& words\);) s
25.8 250 M (38:) s
52.2 250 M
(void fn_rm     \(inode_state& state, const wordvec& words\);) s
25.8 238 M (39:) s
52.2 238 M
(void fn_rmr    \(inode_state& state, const wordvec& words\);) s
25.8 226 M (40:) s
25.8 214 M (41:) s
52.2 214 M
(command_fn find_command_fn \(const string& command\);) s
25.8 202 M (42:) s
25.8 190 M (43:) s
52.2 190 M
(// exit_status_message -) s
25.8 178 M (44:) s
52.2 178 M
(//    Prints an exit message and returns the exit status, as recorded) s
25.8 166 M (45:) s
52.2 166 M
(//    by any of the functions.) s
25.8 154 M (46:) s
25.8 142 M (47:) s
52.2 142 M
(int exit_status_message\(\);) s
25.8 130 M (48:) s
52.2 130 M
(class ysh_exit: public exception {};) s
25.8 118 M (49:) s
25.8 106 M (50:) s
52.2 106 M
(#endif) s
25.8 94 M (51:) s
_R
S
%%Page: (1) 2
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: commands.cpp,v 1.22 2021-05-03 17:36:57-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#include "commands.h") s
32.4 658 M (4:) s
52.2 658 M
(#include "debug.h") s
32.4 646 M (5:) s
32.4 634 M (6:) s
52.2 634 M
(command_hash cmd_hash {) s
32.4 622 M (7:) s
52.2 622 M
(   {"cat"   , fn_cat   },) s
32.4 610 M (8:) s
52.2 610 M
(   {"cd"    , fn_cd    },) s
32.4 598 M (9:) s
52.2 598 M
(   {"echo"  , fn_echo  },) s
25.8 586 M (10:) s
52.2 586 M
(   {"exit"  , fn_exit  },) s
25.8 574 M (11:) s
52.2 574 M
(   {"ls"    , fn_ls    },) s
25.8 562 M (12:) s
52.2 562 M
(   {"lsr"   , fn_lsr   },) s
25.8 550 M (13:) s
52.2 550 M
(   {"make"  , fn_make  },) s
25.8 538 M (14:) s
52.2 538 M
(   {"mkdir" , fn_mkdir },) s
25.8 526 M (15:) s
52.2 526 M
(   {"prompt", fn_prompt},) s
25.8 514 M (16:) s
52.2 514 M
(   {"pwd"   , fn_pwd   },) s
25.8 502 M (17:) s
52.2 502 M
(   {"rm"    , fn_rm    },) s
25.8 490 M (18:) s
52.2 490 M
(   {"rmr"   , fn_rmr   },) s
25.8 478 M (19:) s
52.2 478 M
(};) s
25.8 466 M (20:) s
25.8 454 M (21:) s
52.2 454 M
(command_fn find_command_fn \(const string& cmd\) {) s
25.8 442 M (22:) s
52.2 442 M
(   // Note: value_type is pair<const key_type, mapped_type>) s
25.8 430 M (23:) s
52.2 430 M
(   // So: iterator->first is key_type \(string\)) s
25.8 418 M (24:) s
52.2 418 M
(   // So: iterator->second is mapped_type \(command_fn\)) s
25.8 406 M (25:) s
52.2 406 M
(  // DEBUGF \('c', "[" << cmd << "]"\);) s
25.8 394 M (26:) s
52.2 394 M
(   const auto result = cmd_hash.find \(cmd\);) s
25.8 382 M (27:) s
52.2 382 M
(   if \(result == cmd_hash.end\(\)\) {) s
25.8 370 M (28:) s
52.2 370 M
(      throw command_error \(cmd + ": no such function"\);) s
25.8 358 M (29:) s
52.2 358 M
(   }) s
25.8 346 M (30:) s
52.2 346 M
(   return result->second;) s
25.8 334 M (31:) s
52.2 334 M
(}) s
25.8 322 M (32:) s
25.8 310 M (33:) s
52.2 310 M
(command_error::command_error \(const string& what\):) s
25.8 298 M (34:) s
52.2 298 M
(            runtime_error \(what\) {) s
25.8 286 M (35:) s
52.2 286 M
(}) s
25.8 274 M (36:) s
25.8 262 M (37:) s
52.2 262 M
(int exit_status_message\(\) {) s
25.8 250 M (38:) s
52.2 250 M
(   int status = exec::status\(\);) s
25.8 238 M (39:) s
52.2 238 M
(   cout << exec::execname\(\) << ": exit\(" << status << "\)" << endl;) s
25.8 226 M (40:) s
52.2 226 M
(   return status;) s
25.8 214 M (41:) s
52.2 214 M
(}) s
25.8 202 M (42:) s
25.8 190 M (43:) s
52.2 190 M
(void fn_cat \(inode_state& state, const wordvec& words\) {) s
25.8 178 M (44:) s
52.2 178 M
(   DEBUGF \('c', state\);) s
25.8 166 M (45:) s
52.2 166 M
(   DEBUGF \('c', words\);) s
25.8 154 M (46:) s
52.2 154 M
(   //The contents of each file is copied to the standard output. An erro) s
5 142 M
(r is) s
25.8 130 M (47:) s
52.2 130 M
(   //reported if no files are specified, a file does not exist, or is a ) s
5 118 M
(directory.) s
25.8 106 M (48:) s
52.2 106 M
(   if\(words.size\(\) == 1\){   //if no files are specified) s
25.8 94 M (49:) s
52.2 94 M
(      throw command_error \("cat: No files are specified"\); //dont work) s
25.8 82 M (50:) s
52.2 82 M
(      // program needs to continue!!!!!!) s
25.8 70 M (51:) s
52.2 70 M
(   }) s
25.8 58 M (52:) s
52.2 58 M
(   else{) s
25.8 46 M (53:) s
52.2 46 M
(       wordvec split_path;) s
25.8 34 M (54:) s
52.2 34 M
(        shared_ptr <directory> state_dir = dynamic_pointer_cast<director) s
5 22 M
(y>) s
25.8 10 M (55:) s
52.2 10 M
(         \(state.get_cwd\(\)->get_contents\(\)\);) s
_R
S
%%Page: (2) 3
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (56:) s
52.2 694 M
(     // int jcount = 1;) s
25.8 682 M (57:) s
52.2 682 M
(      for\(unsigned long j = 1;j < words.size\(\); ++j\){) s
25.8 670 M (58:) s
52.2 670 M
(         //if there is a path, but checks on each call) s
25.8 658 M (59:) s
52.2 658 M
(         split_path = split\(words.at\(j\),"/"\);//skips make call but inclu) s
5 646 M
(des all paths) s
25.8 634 M (60:) s
52.2 634 M
(        // cout<< "split_path:";) s
25.8 622 M (61:) s
52.2 622 M
(        // cout<< split_path;) s
25.8 610 M (62:) s
52.2 610 M
(        // cout<< "end split path";) s
25.8 598 M (63:) s
52.2 598 M
(         int count =0;) s
25.8 586 M (64:) s
52.2 586 M
(         if\(split_path.size\(\)>1\){//if its a path) s
25.8 574 M (65:) s
52.2 574 M
(            for\(auto i =split_path.begin\(\); i< split_path.end\(\)-1;i++\){ ) s
5 562 M
(//skip last cause creating last so wont exist) s
25.8 550 M (66:) s
52.2 550 M
(               if\(state_dir->file_dne\(split_path.at\(count\)\) == true\){) s
25.8 538 M (67:) s
52.2 538 M
(                  throw command_error \("cat: "+split_path.at\(count\)+": N) s
5 526 M
(o such file or directory"\); ) s
25.8 514 M (68:) s
52.2 514 M
(                  //like foo/wrongdir/bar/newfile) s
25.8 502 M (69:) s
52.2 502 M
(                  //would output wrongdir: no such file or dir) s
25.8 490 M (70:) s
52.2 490 M
(                }) s
25.8 478 M (71:) s
52.2 478 M
(               else if\(state_dir->is_dir_\(split_path.at\(count\)\) == false) s
5 466 M
(\){) s
25.8 454 M (72:) s
52.2 454 M
(                  throw command_error \("cat: "+split_path.at\(count\)+": N) s
5 442 M
(o such file or directory"\);) s
25.8 430 M (73:) s
52.2 430 M
(               }) s
25.8 418 M (74:) s
52.2 418 M
(                count++; //cause the auto is an itr) s
25.8 406 M (75:) s
52.2 406 M
(            }) s
25.8 394 M (76:) s
52.2 394 M
(            //file needs to exist) s
25.8 382 M (77:) s
52.2 382 M
(            if\(state_dir->file_dne\(words.at\(count\)\)==true\){) s
25.8 370 M (78:) s
52.2 370 M
(               throw command_error\("cat: "+ words.at\(j\) +": No such file) s
5 358 M
( or directory"\);) s
25.8 346 M (79:) s
52.2 346 M
(            }) s
25.8 334 M (80:) s
52.2 334 M
(            //and not be a directory) s
25.8 322 M (81:) s
52.2 322 M
(            else if\(state_dir->is_dir_\(words.at\(count\)\)==true\){) s
25.8 310 M (82:) s
52.2 310 M
(               throw command_error\("cat: "+ words.at\(j\) +": Is a directo) s
5 298 M
(ry"\); ) s
25.8 286 M (83:) s
52.2 286 M
(            }) s
25.8 274 M (84:) s
52.2 274 M
(            ) s
25.8 262 M (85:) s
52.2 262 M
(            cout<< state_dir->get_second\(words.at\(count\)\)->get_contents\() s
5 250 M
(\)->readfile\(\);//this works) s
25.8 238 M (86:) s
52.2 238 M
(            cout<< "\\n";) s
25.8 226 M (87:) s
52.2 226 M
(         }//endif) s
25.8 214 M (88:) s
52.2 214 M
(         //if no path) s
25.8 202 M (89:) s
52.2 202 M
(         else{) s
25.8 190 M (90:) s
52.2 190 M
(            if\(state_dir->file_dne\(words.at\(j\)\)==true\){) s
25.8 178 M (91:) s
52.2 178 M
(               throw command_error\("cat: "+ words.at\(j\) +": No such file) s
5 166 M
( or directory"\);) s
25.8 154 M (92:) s
52.2 154 M
(            }) s
25.8 142 M (93:) s
52.2 142 M
(            else if\(state_dir->is_dir_\(words.at\(j\)\)==true\){) s
25.8 130 M (94:) s
52.2 130 M
(               throw command_error\("cat: "+ words.at\(j\) +": Is a directo) s
5 118 M
(ry"\);   ) s
25.8 106 M (95:) s
52.2 106 M
(            }) s
25.8 94 M (96:) s
52.2 94 M
(            cout<< state_dir->get_second\(words.at\(j\)\)->get_contents\(\)->r) s
5 82 M
(eadfile\(\);//this works) s
25.8 70 M (97:) s
52.2 70 M
(            cout<< "\\n";) s
25.8 58 M (98:) s
52.2 58 M
(         }) s
25.8 46 M (99:) s
52.2 46 M
(      }) s
19.2 34 M (100:) s
52.2 34 M
(   }) s
19.2 22 M (101:) s
52.2 22 M
(//go back to this) s
19.2 10 M (102:) s
52.2 10 M
(}) s
_R
S
%%Page: (3) 4
%%BeginPageSetup
_S
38 24 translate
/pagenum 3 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (103:) s
19.2 682 M (104:) s
52.2 682 M
(void fn_cd \(inode_state& state, const wordvec& words\) {) s
19.2 670 M (105:) s
52.2 670 M
(   DEBUGF \('c', state\);) s
19.2 658 M (106:) s
52.2 658 M
(   DEBUGF \('c', words\);) s
19.2 646 M (107:) s
52.2 646 M
(   if\(words.size\(\) == 1 or words.at\(1\) == "/"\){   //if no dir specified,) s
5 634 M
( send to root) s
19.2 622 M (108:) s
52.2 622 M
(     state.set_cwd\(state.get_root\(\)\);) s
19.2 610 M (109:) s
52.2 610 M
(   }) s
19.2 598 M (110:) s
52.2 598 M
(    else if\(words.size\(\)>2\){) s
19.2 586 M (111:) s
52.2 586 M
(      throw command_error \("cd: Invalid number of arguments"\); ) s
19.2 574 M (112:) s
52.2 574 M
(   }) s
19.2 562 M (113:) s
52.2 562 M
(      else{) s
19.2 550 M (114:) s
52.2 550 M
(      //if it is a path, then go to last one, checking validity) s
19.2 538 M (115:) s
52.2 538 M
(      //to make sure each one is a directory, then set cwd to last dir) s
19.2 526 M (116:) s
52.2 526 M
(      shared_ptr <directory> state_dir = dynamic_pointer_cast<directory>) s
19.2 514 M (117:) s
52.2 514 M
(            \(state.get_cwd\(\)->get_contents\(\)\);) s
19.2 502 M (118:) s
52.2 502 M
(      wordvec split_path = split\(words.at\(1\),"/"\);) s
19.2 490 M (119:) s
52.2 490 M
(      int count = 0;) s
19.2 478 M (120:) s
52.2 478 M
(      //if its a path   ) s
19.2 466 M (121:) s
52.2 466 M
(      if\(split_path.size\(\)>1\){) s
19.2 454 M (122:) s
52.2 454 M
(         for\(auto i =split_path.begin\(\); i< split_path.end\(\)-1;i++\){ //s) s
5 442 M
(kip last so can set_cwd?) s
19.2 430 M (123:) s
52.2 430 M
(            //if file does not exist at all) s
19.2 418 M (124:) s
52.2 418 M
(            if\(state_dir->file_dne\(split_path.at\(count\)\) == true\){) s
19.2 406 M (125:) s
52.2 406 M
(               throw command_error \("cd: "+words.at\(1\)+": No such file o) s
5 394 M
(r directory"\); ) s
19.2 382 M (126:) s
52.2 382 M
(            }) s
19.2 370 M (127:) s
52.2 370 M
(            //if exists but is not a directory) s
19.2 358 M (128:) s
52.2 358 M
(            else if\(state_dir->is_dir_\(split_path.at\(count\)\) == false\){) s
19.2 346 M (129:) s
52.2 346 M
(               throw command_error \("cd: "+ words.at\(1\) +": No such file) s
5 334 M
( or directory"\); ) s
19.2 322 M (130:) s
52.2 322 M
(            }) s
19.2 310 M (131:) s
52.2 310 M
(            count++;) s
19.2 298 M (132:) s
52.2 298 M
(         }) s
19.2 286 M (133:) s
52.2 286 M
(         if\(state_dir->file_dne\(split_path.at\(count\)\) == true\){) s
19.2 274 M (134:) s
52.2 274 M
(               throw command_error \("cd: "+words.at\(1\)+": No such file o) s
5 262 M
(r directory"\); ) s
19.2 250 M (135:) s
52.2 250 M
(            }) s
19.2 238 M (136:) s
52.2 238 M
(            //if exists but is not a directory) s
19.2 226 M (137:) s
52.2 226 M
(         else if\(state_dir->is_dir_\(split_path.at\(count\)\) == false\){) s
19.2 214 M (138:) s
52.2 214 M
(            throw command_error \("cd: "+ words.at\(1\) +": No such file or) s
5 202 M
( directory"\); ) s
19.2 190 M (139:) s
52.2 190 M
(         }) s
19.2 178 M (140:) s
52.2 178 M
(         else{) s
19.2 166 M (141:) s
52.2 166 M
(            state.set_cwd\(state_dir->get_second\(words.at\(count\)\)\);) s
19.2 154 M (142:) s
52.2 154 M
(            //something wrong with setting the cwd?) s
19.2 142 M (143:) s
52.2 142 M
(         }) s
19.2 130 M (144:) s
52.2 130 M
(      }) s
19.2 118 M (145:) s
52.2 118 M
(      else{) s
19.2 106 M (146:) s
52.2 106 M
(         if\(state_dir->file_dne\(words.at\(1\)\) == true\){) s
19.2 94 M (147:) s
52.2 94 M
(               throw command_error \("cd: "+words.at\(1\)+": No such file o) s
5 82 M
(r directory"\); ) s
19.2 70 M (148:) s
52.2 70 M
(            }) s
19.2 58 M (149:) s
52.2 58 M
(            //if exists but is not a directory) s
19.2 46 M (150:) s
52.2 46 M
(         else if\(state_dir->is_dir_\(words.at\(1\)\) == false\){) s
19.2 34 M (151:) s
52.2 34 M
(            throw command_error \("cd: "+ words.at\(1\) +": No such file or) s
5 22 M
( directory"\); ) s
19.2 10 M (152:) s
52.2 10 M
(         }) s
_R
S
%%Page: (4) 5
%%BeginPageSetup
_S
38 24 translate
/pagenum 4 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (4) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (153:) s
52.2 694 M
(         else{) s
19.2 682 M (154:) s
52.2 682 M
(            state.set_cwd\(state_dir->get_second\(words.at\(1\)\)\);) s
19.2 670 M (155:) s
52.2 670 M
(         }) s
19.2 658 M (156:) s
52.2 658 M
(         ) s
19.2 646 M (157:) s
52.2 646 M
(      }) s
19.2 634 M (158:) s
52.2 634 M
(   }) s
19.2 622 M (159:) s
52.2 622 M
(}) s
19.2 610 M (160:) s
52.2 610 M
(//dont have to do anything???) s
19.2 598 M (161:) s
52.2 598 M
(void fn_echo \(inode_state& state, const wordvec& words\) {) s
19.2 586 M (162:) s
52.2 586 M
(   DEBUGF \('c', state\);) s
19.2 574 M (163:) s
52.2 574 M
(   DEBUGF \('c', words\);) s
19.2 562 M (164:) s
52.2 562 M
(   cout << word_range \(words.cbegin\(\) + 1, words.cend\(\)\) << endl;) s
19.2 550 M (165:) s
52.2 550 M
(}) s
19.2 538 M (166:) s
_R
S
%%Page: (5) 6
%%BeginPageSetup
_S
38 24 translate
/pagenum 5 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (5) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (167:) s
19.2 682 M (168:) s
52.2 682 M
(void fn_exit \(inode_state& state, const wordvec& words\) {) s
19.2 670 M (169:) s
52.2 670 M
(   DEBUGF \('c', state\);) s
19.2 658 M (170:) s
52.2 658 M
(   DEBUGF \('c', words\);) s
19.2 646 M (171:) s
52.2 646 M
(   throw ysh_exit\(\);) s
19.2 634 M (172:) s
52.2 634 M
(}) s
19.2 622 M (173:) s
19.2 610 M (174:) s
52.2 610 M
(void fn_ls \(inode_state& state, const wordvec& words\) {) s
19.2 598 M (175:) s
52.2 598 M
(   DEBUGF \('c', state\);) s
19.2 586 M (176:) s
52.2 586 M
(   DEBUGF \('c', words\);) s
19.2 574 M (177:) s
52.2 574 M
(   if\(words.size\(\)>2\){) s
19.2 562 M (178:) s
52.2 562 M
(      throw command_error \("ls: Invalid number of arguments"\); //dont wo) s
5 550 M
(rk) s
19.2 538 M (179:) s
52.2 538 M
(   }) s
19.2 526 M (180:) s
52.2 526 M
(   else{) s
19.2 514 M (181:) s
52.2 514 M
(      //if one arg, then cwd is used) s
19.2 502 M (182:) s
52.2 502 M
(      if\(words.size\(\)==1\){) s
19.2 490 M (183:) s
52.2 490 M
(        // print_ls\(state.get_cwd\(\)\);) s
19.2 478 M (184:) s
52.2 478 M
(      }) s
19.2 466 M (185:) s
52.2 466 M
(      else{//use arg specified) s
19.2 454 M (186:) s
52.2 454 M
(        // print_ls\(words.at\(1\)->get_second\(\)\);) s
19.2 442 M (187:) s
52.2 442 M
(      }) s
19.2 430 M (188:) s
19.2 418 M (189:) s
52.2 418 M
(   }) s
19.2 406 M (190:) s
52.2 406 M
(}) s
19.2 394 M (191:) s
19.2 382 M (192:) s
52.2 382 M
(void fn_lsr \(inode_state& state, const wordvec& words\) {) s
19.2 370 M (193:) s
52.2 370 M
(   DEBUGF \('c', state\);) s
19.2 358 M (194:) s
52.2 358 M
(   DEBUGF \('c', words\);) s
19.2 346 M (195:) s
52.2 346 M
(}) s
19.2 334 M (196:) s
19.2 322 M (197:) s
52.2 322 M
(void fn_make \(inode_state& state, const wordvec& words\) {) s
19.2 310 M (198:) s
52.2 310 M
(   DEBUGF \('c', state\);) s
19.2 298 M (199:) s
52.2 298 M
(   DEBUGF \('c', words\);) s
19.2 286 M (200:) s
52.2 286 M
(   shared_ptr <directory> state_dir = dynamic_pointer_cast<directory>) s
19.2 274 M (201:) s
52.2 274 M
(         \(state.get_cwd\(\)->get_contents\(\)\);) s
19.2 262 M (202:) s
52.2 262 M
(   if\(words.size\(\)==1\){) s
19.2 250 M (203:) s
52.2 250 M
(      throw command_error \("make: No target specified"\); //dont work) s
19.2 238 M (204:) s
52.2 238 M
(   } ) s
19.2 226 M (205:) s
52.2 226 M
(   wordvec split_path = split\(words.at\(1\),"/"\);//skips make call but inc) s
5 214 M
(ludes all paths) s
19.2 202 M (206:) s
52.2 202 M
(   int count = 0;) s
19.2 190 M (207:) s
52.2 190 M
(   //is a path) s
19.2 178 M (208:) s
52.2 178 M
(   if\(split_path.size\(\)>1\){//if its a path) s
19.2 166 M (209:) s
52.2 166 M
(      for\(auto i =split_path.begin\(\); i< split_path.end\(\)-1;i++\){ //skip) s
5 154 M
( last cause creating last so wont exist) s
19.2 142 M (210:) s
52.2 142 M
(         //if file does not exist at all) s
19.2 130 M (211:) s
52.2 130 M
(         if\(state_dir->file_dne\(split_path.at\(count\)\) == true\){) s
19.2 118 M (212:) s
52.2 118 M
(            throw command_error \("make: "+split_path.at\(count\)+": No suc) s
5 106 M
(h file or directory"\); ) s
19.2 94 M (213:) s
52.2 94 M
(            //like foo/wrongdir/bar/newfile) s
19.2 82 M (214:) s
52.2 82 M
(            //would output wrongdir: no such file or dir) s
19.2 70 M (215:) s
52.2 70 M
(         }) s
19.2 58 M (216:) s
52.2 58 M
(         //if file exists but is not a directory, needs to be while in t) s
5 46 M
(he path) s
19.2 34 M (217:) s
52.2 34 M
(         else if\(state_dir->is_dir_\(split_path.at\(count\)\) == false\){) s
19.2 22 M (218:) s
52.2 22 M
(            throw command_error \("make: "+split_path.at\(count\)+": No suc) s
5 10 M
(h file or directory"\); ) s
_R
S
%%Page: (6) 7
%%BeginPageSetup
_S
38 24 translate
/pagenum 6 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (6) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (219:) s
52.2 694 M
(         }) s
19.2 682 M (220:) s
52.2 682 M
(         count++; //cause the auto is an itr) s
19.2 670 M (221:) s
52.2 670 M
(      }) s
19.2 658 M (222:) s
52.2 658 M
(      //after path, file being made) s
19.2 646 M (223:) s
52.2 646 M
(      if\(state_dir->file_dne\(split_path.at\(count\)\)==false\){// if file ex) s
5 634 M
(ists) s
19.2 622 M (224:) s
52.2 622 M
(         if\(state_dir->is_dir_\(split_path.at\(count\)\) == true\){) s
19.2 610 M (225:) s
52.2 610 M
(            throw command_error \("make: "+ words.at\(1\) +": Is a director) s
5 598 M
(y"\); ) s
19.2 586 M (226:) s
52.2 586 M
(         }) s
19.2 574 M (227:) s
52.2 574 M
(         else) s
19.2 562 M (228:) s
52.2 562 M
(         {  //updates file if exists) s
19.2 550 M (229:) s
52.2 550 M
(            inode_ptr updated_pointer = state_dir->update_file\(split_pat) s
5 538 M
(h.at\(count\),wordvec\(words.begin\(\)+2,words.end\(\)\)\);) s
19.2 526 M (230:) s
52.2 526 M
(         }) s
19.2 514 M (231:) s
52.2 514 M
(      }) s
19.2 502 M (232:) s
52.2 502 M
(      else{//if file doesnt exist already, makes it) s
19.2 490 M (233:) s
52.2 490 M
(         inode_ptr new_file = state.get_cwd\(\)->get_contents\(\)->mkfile\(sp) s
5 478 M
(lit_path.at\(count\)\);) s
19.2 466 M (234:) s
52.2 466 M
(         //+2 makes it not include make or filename, jsut contents) s
19.2 454 M (235:) s
52.2 454 M
(         new_file->get_contents\(\)->writefile\(wordvec\(words.begin\(\)+2,wor) s
5 442 M
(ds.end\(\)\)\); ) s
19.2 430 M (236:) s
52.2 430 M
(      }) s
19.2 418 M (237:) s
52.2 418 M
(   }) s
19.2 406 M (238:) s
52.2 406 M
(   //no path, this works!) s
19.2 394 M (239:) s
52.2 394 M
(   else{) s
19.2 382 M (240:) s
52.2 382 M
(     if\(state_dir->file_dne\(words.at\(1\)\)==true\){//this works) s
19.2 370 M (241:) s
52.2 370 M
(         //if file dne then can do normal cause isnt dir or file) s
19.2 358 M (242:) s
52.2 358 M
(         inode_ptr new_file = state.get_cwd\(\)->get_contents\(\)->mkfile\(wo) s
5 346 M
(rds.at\(1\)\);) s
19.2 334 M (243:) s
52.2 334 M
(         //+2 makes it not include make or filename, jsut contents) s
19.2 322 M (244:) s
52.2 322 M
(         new_file->get_contents\(\)->writefile\(wordvec\(words.begin\(\)+2,wor) s
5 310 M
(ds.end\(\)\)\); ) s
19.2 298 M (245:) s
52.2 298 M
(      }) s
19.2 286 M (246:) s
52.2 286 M
(      else{//not dir, but updating existing file) s
19.2 274 M (247:) s
52.2 274 M
(         if\(state_dir->is_dir_\(words.at\(1\)\)==true\){//this works) s
19.2 262 M (248:) s
52.2 262 M
(             throw command_error \("make: "+ words.at\(1\) +": Is a directo) s
5 250 M
(ry"\); ) s
19.2 238 M (249:) s
52.2 238 M
(         }) s
19.2 226 M (250:) s
52.2 226 M
(         else{) s
19.2 214 M (251:) s
52.2 214 M
(            inode_ptr updated_pointer = state_dir->update_file\(words.at\() s
5 202 M
(1\),wordvec\(words.begin\(\)+2,words.end\(\)\)\);) s
19.2 190 M (252:) s
52.2 190 M
(         // cout<< updated_pointer->get_contents\(\)->readfile\(\);  //makes) s
5 178 M
( the file, but includes "make"??) s
19.2 166 M (253:) s
52.2 166 M
(         }) s
19.2 154 M (254:) s
52.2 154 M
(      }) s
19.2 142 M (255:) s
52.2 142 M
(   }) s
19.2 130 M (256:) s
52.2 130 M
(}) s
19.2 118 M (257:) s
19.2 106 M (258:) s
52.2 106 M
(void fn_mkdir \(inode_state& state, const wordvec& words\) {) s
19.2 94 M (259:) s
52.2 94 M
(   DEBUGF \('c', state\);) s
19.2 82 M (260:) s
52.2 82 M
(   DEBUGF \('c', words\);) s
19.2 70 M (261:) s
52.2 70 M
(    if\(words.size\(\)==1\){) s
19.2 58 M (262:) s
52.2 58 M
(      throw command_error \("mkdir: No target specified"\); //dont work) s
19.2 46 M (263:) s
52.2 46 M
(   }) s
19.2 34 M (264:) s
52.2 34 M
(    else if\(words.size\(\)>2\){) s
19.2 22 M (265:) s
52.2 22 M
(      throw command_error \("mkdir: Invalid number of arguments"\); //dont) s
5 10 M
( work) s
_R
S
%%Page: (7) 8
%%BeginPageSetup
_S
38 24 translate
/pagenum 7 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (7) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (266:) s
52.2 694 M
(   }) s
19.2 682 M (267:) s
52.2 682 M
(   ) s
19.2 670 M (268:) s
52.2 670 M
(  cout<< "in fn_mkdir\\n";) s
19.2 658 M (269:) s
52.2 658 M
(   wordvec split_path = split\(words.at\(1\),"/"\);//skips mkdir call but in) s
5 646 M
(cludes all paths) s
19.2 634 M (270:) s
52.2 634 M
(  cout<< "made split path\\n";) s
19.2 622 M (271:) s
52.2 622 M
(   shared_ptr <directory> state_dir = dynamic_pointer_cast<directory>) s
19.2 610 M (272:) s
52.2 610 M
(         \(state.get_cwd\(\)->get_contents\(\)\);) s
19.2 598 M (273:) s
52.2 598 M
(   //if has path, check if valid) s
19.2 586 M (274:) s
52.2 586 M
(   cout<< "made state_dir\\n";) s
19.2 574 M (275:) s
52.2 574 M
(   cout<< "split_path.size\(\): ";) s
19.2 562 M (276:) s
52.2 562 M
(   cout<< split_path.size\(\);) s
19.2 550 M (277:) s
52.2 550 M
(      int count = 0;) s
19.2 538 M (278:) s
52.2 538 M
(      if\(split_path.size\(\)>1\){//if its a path) s
19.2 526 M (279:) s
52.2 526 M
(         for\(auto i =split_path.begin\(\); i< split_path.end\(\)-1;i++\){ //s) s
5 514 M
(kip last cause creating last so wont exist) s
19.2 502 M (280:) s
52.2 502 M
(            if\(state_dir->file_dne\(split_path.at\(count\)\)==true\){//this w) s
5 490 M
(orks //everything needs to exist but the last one) s
19.2 478 M (281:) s
52.2 478 M
(               throw command_error \("mkdir: "+split_path.at\(count\)+": No) s
5 466 M
( such file or directory"\); //dont work) s
19.2 454 M (282:) s
52.2 454 M
(            }//print whole path?) s
19.2 442 M (283:) s
52.2 442 M
(            count++; //cause the auto is an itr) s
19.2 430 M (284:) s
52.2 430 M
(         }) s
19.2 418 M (285:) s
52.2 418 M
(         if\(state_dir->file_dne\(split_path.at\(count\)\) == false\){) s
19.2 406 M (286:) s
52.2 406 M
(            if\(state_dir->is_dir_\(split_path.at\(count\)\) == true\){) s
19.2 394 M (287:) s
52.2 394 M
(               throw command_error \("mkdir: "+split_path.at\(count\)+": Fi) s
5 382 M
(le exists"\); //dont work) s
19.2 370 M (288:) s
52.2 370 M
(            }) s
19.2 358 M (289:) s
52.2 358 M
(         }) s
19.2 346 M (290:) s
52.2 346 M
(         else{) s
19.2 334 M (291:) s
52.2 334 M
(            cout<<"setting parent";) s
19.2 322 M (292:) s
52.2 322 M
(            state_dir->mkdir\(split_path.at\(count\)\);) s
19.2 310 M (293:) s
52.2 310 M
(         }) s
19.2 298 M (294:) s
52.2 298 M
(      }) s
19.2 286 M (295:) s
52.2 286 M
(      //if no path, or end of path, make sure dne) s
19.2 274 M (296:) s
52.2 274 M
(      //should be end if has path or not right?) s
19.2 262 M (297:) s
52.2 262 M
(      else{//if its not a path) s
19.2 250 M (298:) s
52.2 250 M
(         if\(state_dir->file_dne\(words.at\(1\)\) == false\){) s
19.2 238 M (299:) s
52.2 238 M
(             if\(state_dir->is_dir_\(words.at\(1\)\) == true\){) s
19.2 226 M (300:) s
52.2 226 M
(               throw command_error \("mkdir: "+words.at\(1\)+": File exists) s
5 214 M
("\); //dont work) s
19.2 202 M (301:) s
52.2 202 M
(             }) s
19.2 190 M (302:) s
52.2 190 M
(             cout<<"setting parent 2";) s
19.2 178 M (303:) s
52.2 178 M
(           // state_dir->get_second\(words.at\(1\)\)->set_parent\(state.get_c) s
5 166 M
(wd\(\)\);) s
19.2 154 M (304:) s
52.2 154 M
(            state_dir->mkdir\(words.at\(1\)\);) s
19.2 142 M (305:) s
52.2 142 M
(         }) s
19.2 130 M (306:) s
52.2 130 M
(         else{) s
19.2 118 M (307:) s
52.2 118 M
(            cout<<"setting parent 2";) s
19.2 106 M (308:) s
52.2 106 M
(           ) s
19.2 94 M (309:) s
52.2 94 M
(           //state_dir->get_second\(words.at\(1\)\)->set_parent\(state.get_cw) s
5 82 M
(d\(\)\);) s
19.2 70 M (310:) s
52.2 70 M
(            state_dir->mkdir\(words.at\(1\)\);) s
19.2 58 M (311:) s
52.2 58 M
(         }) s
19.2 46 M (312:) s
52.2 46 M
(      }) s
19.2 34 M (313:) s
52.2 34 M
(}) s
19.2 22 M (314:) s
19.2 10 M (315:) s
52.2 10 M
(void fn_prompt \(inode_state& state, const wordvec& words\) {) s
_R
S
%%Page: (8) 9
%%BeginPageSetup
_S
38 24 translate
/pagenum 8 def
/fname (commands.cpp) def
/fdir (.) def
/ftail (commands.cpp) def
% User defined strings:
/pagenumstr (8) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (316:) s
52.2 694 M
(   DEBUGF \('c', state\);) s
19.2 682 M (317:) s
52.2 682 M
(   DEBUGF \('c', words\);) s
19.2 670 M (318:) s
52.2 670 M
(}) s
19.2 658 M (319:) s
52.2 658 M
(//just doesnt print path? segfaults with ivalid paths) s
19.2 646 M (320:) s
52.2 646 M
(//this works with the test cases but thats it i think??, idk  its good f) s
5 634 M
(or now) s
19.2 622 M (321:) s
52.2 622 M
(void fn_pwd \(inode_state& state, const wordvec& words\) {) s
19.2 610 M (322:) s
52.2 610 M
(   DEBUGF \('c', state\);) s
19.2 598 M (323:) s
52.2 598 M
(   DEBUGF \('c', words\);) s
19.2 586 M (324:) s
52.2 586 M
(   if\(words.size\(\)>2\){) s
19.2 574 M (325:) s
52.2 574 M
(      throw command_error \("mkdir: Invalid number of arguments"\); //dont) s
5 562 M
( work) s
19.2 550 M (326:) s
52.2 550 M
(   }) s
19.2 538 M (327:) s
52.2 538 M
(   else{) s
19.2 526 M (328:) s
52.2 526 M
(      //cout<< "in else\\n";) s
19.2 514 M (329:) s
52.2 514 M
(      //print from root to cwd) s
19.2 502 M (330:) s
52.2 502 M
(     // wordvec path =split\(state.path\(state.get_cwd\(\)\),"/"\);) s
19.2 490 M (331:) s
52.2 490 M
(     // cout<< "\\nmade path\\n";) s
19.2 478 M (332:) s
52.2 478 M
(      /*int i= path.size\(\)-1;) s
19.2 466 M (333:) s
52.2 466 M
(     // cout<< "path size:";) s
19.2 454 M (334:) s
52.2 454 M
(     // cout<< path.size\(\);) s
19.2 442 M (335:) s
52.2 442 M
(      while\(i>0\){) s
19.2 430 M (336:) s
52.2 430 M
(         cout<<"/";) s
19.2 418 M (337:) s
52.2 418 M
(         cout<< path.at\(i\);   //this works, ish) s
19.2 406 M (338:) s
52.2 406 M
(         i--;) s
19.2 394 M (339:) s
52.2 394 M
(      }*/) s
19.2 382 M (340:) s
52.2 382 M
(   }) s
19.2 370 M (341:) s
52.2 370 M
(   state.path\(state.get_cwd\(\)\);) s
19.2 358 M (342:) s
52.2 358 M
(}) s
19.2 346 M (343:) s
19.2 334 M (344:) s
52.2 334 M
(void fn_rm \(inode_state& state, const wordvec& words\) {) s
19.2 322 M (345:) s
52.2 322 M
(   DEBUGF \('c', state\);) s
19.2 310 M (346:) s
52.2 310 M
(   DEBUGF \('c', words\);) s
19.2 298 M (347:) s
52.2 298 M
(}) s
19.2 286 M (348:) s
19.2 274 M (349:) s
52.2 274 M
(void fn_rmr \(inode_state& state, const wordvec& words\) {) s
19.2 262 M (350:) s
52.2 262 M
(   DEBUGF \('c', state\);) s
19.2 250 M (351:) s
52.2 250 M
(   DEBUGF \('c', words\);) s
19.2 238 M (352:) s
52.2 238 M
(}) s
19.2 226 M (353:) s
_R
S
%%Page: (1) 10
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (debug.h) def
/fdir (.) def
/ftail (debug.h) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: debug.h,v 1.12 2019-10-16 15:17:26-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#ifndef __DEBUG_H__) s
32.4 658 M (4:) s
52.2 658 M
(#define __DEBUG_H__) s
32.4 646 M (5:) s
32.4 634 M (6:) s
52.2 634 M
(#include <bitset>) s
32.4 622 M (7:) s
52.2 622 M
(#include <climits>) s
32.4 610 M (8:) s
52.2 610 M
(#include <string>) s
32.4 598 M (9:) s
52.2 598 M
(using namespace std;) s
25.8 586 M (10:) s
25.8 574 M (11:) s
52.2 574 M
(// debug -) s
25.8 562 M (12:) s
52.2 562 M
(//    static class for maintaining global debug flags.) s
25.8 550 M (13:) s
52.2 550 M
(// setflags -) s
25.8 538 M (14:) s
52.2 538 M
(//    Takes a string argument, and sets a flag for each char in the) s
25.8 526 M (15:) s
52.2 526 M
(//    string.  As a special case, '@', sets all flags.) s
25.8 514 M (16:) s
52.2 514 M
(// getflag -) s
25.8 502 M (17:) s
52.2 502 M
(//    Used by the DEBUGF macro to check to see if a flag has been set.) s
25.8 490 M (18:) s
52.2 490 M
(//    Not to be called by user code.) s
25.8 478 M (19:) s
25.8 466 M (20:) s
52.2 466 M
(class debugflags {) s
25.8 454 M (21:) s
52.2 454 M
(   private:) s
25.8 442 M (22:) s
52.2 442 M
(      using flagset_ = bitset<UCHAR_MAX + 1>;) s
25.8 430 M (23:) s
52.2 430 M
(      static flagset_ flags_;) s
25.8 418 M (24:) s
52.2 418 M
(   public:) s
25.8 406 M (25:) s
52.2 406 M
(      static void setflags \(const string& optflags\);) s
25.8 394 M (26:) s
52.2 394 M
(      static bool getflag \(char flag\);) s
25.8 382 M (27:) s
52.2 382 M
(      static void where \(char flag, const char* file, int line,) s
25.8 370 M (28:) s
52.2 370 M
(                         const char* pretty_function\);) s
25.8 358 M (29:) s
52.2 358 M
(};) s
25.8 346 M (30:) s
_R
S
%%Page: (2) 11
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (debug.h) def
/fdir (.) def
/ftail (debug.h) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (31:) s
25.8 682 M (32:) s
52.2 682 M
(// DEBUGF -) s
25.8 670 M (33:) s
52.2 670 M
(//    Macro which expands into trace code.  First argument is a) s
25.8 658 M (34:) s
52.2 658 M
(//    trace flag char, second argument is output code that can) s
25.8 646 M (35:) s
52.2 646 M
(//    be sandwiched between <<.  Beware of operator precedence.) s
25.8 634 M (36:) s
52.2 634 M
(//    Example:) s
25.8 622 M (37:) s
52.2 622 M
(//       DEBUGF \('u', "foo = " << foo\);) s
25.8 610 M (38:) s
52.2 610 M
(//    will print two words and a newline if flag 'u' is  on.) s
25.8 598 M (39:) s
52.2 598 M
(//    Traces are preceded by filename, line number, and function.) s
25.8 586 M (40:) s
25.8 574 M (41:) s
52.2 574 M
(#ifdef NDEBUG) s
25.8 562 M (42:) s
52.2 562 M
(#define DEBUGF\(FLAG,CODE\) ;) s
25.8 550 M (43:) s
52.2 550 M
(#define DEBUGS\(FLAG,STMT\) ;) s
25.8 538 M (44:) s
52.2 538 M
(#else) s
25.8 526 M (45:) s
52.2 526 M
(#define DEBUGF\(FLAG,CODE\) { \\) s
25.8 514 M (46:) s
52.2 514 M
(           if \(debugflags::getflag \(FLAG\)\) { \\) s
25.8 502 M (47:) s
52.2 502 M
(              debugflags::where \(FLAG, __FILE__, __LINE__, \\) s
25.8 490 M (48:) s
52.2 490 M
(                                 __PRETTY_FUNCTION__\); \\) s
25.8 478 M (49:) s
52.2 478 M
(              cerr << CODE << endl; \\) s
25.8 466 M (50:) s
52.2 466 M
(           } \\) s
25.8 454 M (51:) s
52.2 454 M
(        }) s
25.8 442 M (52:) s
52.2 442 M
(#define DEBUGS\(FLAG,STMT\) { \\) s
25.8 430 M (53:) s
52.2 430 M
(           if \(debugflags::getflag \(FLAG\)\) { \\) s
25.8 418 M (54:) s
52.2 418 M
(              debugflags::where \(FLAG, __FILE__, __LINE__, \\) s
25.8 406 M (55:) s
52.2 406 M
(                                 __PRETTY_FUNCTION__\); \\) s
25.8 394 M (56:) s
52.2 394 M
(              STMT; \\) s
25.8 382 M (57:) s
52.2 382 M
(           } \\) s
25.8 370 M (58:) s
52.2 370 M
(        }) s
25.8 358 M (59:) s
52.2 358 M
(#endif) s
25.8 346 M (60:) s
25.8 334 M (61:) s
52.2 334 M
(#endif) s
25.8 322 M (62:) s
_R
S
%%Page: (1) 12
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (debug.cpp) def
/fdir (.) def
/ftail (debug.cpp) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: debug.cpp,v 1.15 2020-01-22 14:21:55-08 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#include <climits>) s
32.4 658 M (4:) s
52.2 658 M
(#include <iostream>) s
32.4 646 M (5:) s
52.2 646 M
(#include <vector>) s
32.4 634 M (6:) s
32.4 622 M (7:) s
52.2 622 M
(using namespace std;) s
32.4 610 M (8:) s
32.4 598 M (9:) s
52.2 598 M
(#include "debug.h") s
25.8 586 M (10:) s
52.2 586 M
(#include "util.h") s
25.8 574 M (11:) s
25.8 562 M (12:) s
52.2 562 M
(debugflags::flagset_ debugflags::flags_ {};) s
25.8 550 M (13:) s
25.8 538 M (14:) s
52.2 538 M
(void debugflags::setflags \(const string& initflags\) {) s
25.8 526 M (15:) s
52.2 526 M
(   for \(const unsigned char flag: initflags\) {) s
25.8 514 M (16:) s
52.2 514 M
(      if \(flag == '@'\) flags_.set\(\);) s
25.8 502 M (17:) s
52.2 502 M
(                  else flags_.set \(flag, true\);) s
25.8 490 M (18:) s
52.2 490 M
(   }) s
25.8 478 M (19:) s
52.2 478 M
(}) s
25.8 466 M (20:) s
25.8 454 M (21:) s
52.2 454 M
(// getflag -) s
25.8 442 M (22:) s
52.2 442 M
(//    Check to see if a certain flag is on.) s
25.8 430 M (23:) s
25.8 418 M (24:) s
52.2 418 M
(bool debugflags::getflag \(char flag\) {) s
25.8 406 M (25:) s
52.2 406 M
(   // WARNING: Don't TRACE this function or the stack will blow up.) s
25.8 394 M (26:) s
52.2 394 M
(   return flags_.test \(static_cast<unsigned char> \(flag\)\);) s
25.8 382 M (27:) s
52.2 382 M
(}) s
25.8 370 M (28:) s
25.8 358 M (29:) s
52.2 358 M
(void debugflags::where \(char flag, const char* file, int line,) s
25.8 346 M (30:) s
52.2 346 M
(                        const char* pretty_function\) {) s
25.8 334 M (31:) s
52.2 334 M
(   cout << "DEBUG\(" << flag << "\) ") s
25.8 322 M (32:) s
52.2 322 M
(        << file << "[" << line << "] " << endl) s
25.8 310 M (33:) s
52.2 310 M
(        << "... " << pretty_function << endl;) s
25.8 298 M (34:) s
52.2 298 M
(}) s
25.8 286 M (35:) s
_R
S
%%Page: (1) 13
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (file_sys.h) def
/fdir (.) def
/ftail (file_sys.h) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: file_sys.h,v 1.10 2021-05-03 17:36:57-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#ifndef __INODE_H__) s
32.4 658 M (4:) s
52.2 658 M
(#define __INODE_H__) s
32.4 646 M (5:) s
32.4 634 M (6:) s
52.2 634 M
(#include <exception>) s
32.4 622 M (7:) s
52.2 622 M
(#include <iostream>) s
32.4 610 M (8:) s
52.2 610 M
(#include <memory> //contains shared pointer) s
32.4 598 M (9:) s
52.2 598 M
(#include <map>) s
25.8 586 M (10:) s
52.2 586 M
(#include <vector>) s
25.8 574 M (11:) s
52.2 574 M
(using namespace std;) s
25.8 562 M (12:) s
25.8 550 M (13:) s
52.2 550 M
(#include "util.h") s
25.8 538 M (14:) s
25.8 526 M (15:) s
52.2 526 M
(// inode_t -) s
25.8 514 M (16:) s
52.2 514 M
(//    An inode is either a directory or a plain file.) s
25.8 502 M (17:) s
25.8 490 M (18:) s
52.2 490 M
(enum class file_type {PLAIN_TYPE, DIRECTORY_TYPE};) s
25.8 478 M (19:) s
52.2 478 M
(class inode;) s
25.8 466 M (20:) s
52.2 466 M
(class base_file;) s
25.8 454 M (21:) s
52.2 454 M
(class plain_file;) s
25.8 442 M (22:) s
52.2 442 M
(class directory;) s
25.8 430 M (23:) s
52.2 430 M
(using inode_ptr = shared_ptr<inode>;) s
25.8 418 M (24:) s
52.2 418 M
(using base_file_ptr = shared_ptr<base_file>;) s
25.8 406 M (25:) s
52.2 406 M
(//implement directory file pointer? mabye not) s
25.8 394 M (26:) s
52.2 394 M
(ostream& operator<< \(ostream&, file_type\);) s
25.8 382 M (27:) s
_R
S
%%Page: (2) 14
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (file_sys.h) def
/fdir (.) def
/ftail (file_sys.h) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (28:) s
25.8 682 M (29:) s
52.2 682 M
(// inode_state -) s
25.8 670 M (30:) s
52.2 670 M
(//    A small convenient class to maintain the state of the simulated) s
25.8 658 M (31:) s
52.2 658 M
(//    process:  the root \(/\), the current directory \(.\), and the) s
25.8 646 M (32:) s
52.2 646 M
(//    prompt.) s
25.8 634 M (33:) s
25.8 622 M (34:) s
52.2 622 M
(class inode_state {  //only one can exist in the entire filesystem) s
25.8 610 M (35:) s
52.2 610 M
(//inode state does not inherit from inode) s
25.8 598 M (36:) s
52.2 598 M
(//however they are cooperating classes) s
25.8 586 M (37:) s
25.8 574 M (38:) s
52.2 574 M
(   friend class inode;) s
25.8 562 M (39:) s
52.2 562 M
(   friend ostream& operator<< \(ostream& out, const inode_state&\);) s
25.8 550 M (40:) s
52.2 550 M
(   //must be a friend not a member) s
25.8 538 M (41:) s
52.2 538 M
(   private:) s
25.8 526 M (42:) s
52.2 526 M
(      inode_ptr root ;) s
25.8 514 M (43:) s
52.2 514 M
(      inode_ptr cwd ;   //need to make a different assignment) s
25.8 502 M (44:) s
52.2 502 M
(      //to them in the constructor!!!) s
25.8 490 M (45:) s
52.2 490 M
(      string prompt_ {"% "};  //cant have the fuction and field name be ) s
5 478 M
(the same) s
25.8 466 M (46:) s
52.2 466 M
(   public:) s
25.8 454 M (47:) s
52.2 454 M
(      virtual ~inode_state\(\);   //default or make own?) s
25.8 442 M (48:) s
52.2 442 M
(      inode_state \(const inode_state&\) = delete; // copy ctor) s
25.8 430 M (49:) s
52.2 430 M
(      inode_state& operator= \(const inode_state&\) = delete; // op=) s
25.8 418 M (50:) s
52.2 418 M
(      //-delete says that if u attempt to copy it the compiler) s
25.8 406 M (51:) s
52.2 406 M
(      //will refuse) s
25.8 394 M (52:) s
52.2 394 M
(      inode_state\(\); //constructor, have to do some work) s
25.8 382 M (53:) s
52.2 382 M
(      //need to make a destructor?) s
25.8 370 M (54:) s
52.2 370 M
(      //need to make a new inode and point root and cwd at it ) s
25.8 358 M (55:) s
25.8 346 M (56:) s
52.2 346 M
(      const string& prompt\(\) const;) s
25.8 334 M (57:) s
52.2 334 M
(      //returns prompt when need to print stuff out) s
25.8 322 M (58:) s
52.2 322 M
(      void prompt \(const string&\);  //implement later?) s
25.8 310 M (59:) s
52.2 310 M
(      //sets the prompts) s
25.8 298 M (60:) s
25.8 286 M (61:) s
52.2 286 M
(      inode_ptr get_root\(\);) s
25.8 274 M (62:) s
52.2 274 M
(      inode_ptr get_cwd\(\);) s
25.8 262 M (63:) s
52.2 262 M
(      void set_cwd\(inode_ptr\);//??? //yes) s
25.8 250 M (64:) s
52.2 250 M
(      void path\(const inode_ptr& state_cwd\);) s
25.8 238 M (65:) s
52.2 238 M
(      ) s
25.8 226 M (66:) s
52.2 226 M
(      ) s
25.8 214 M (67:) s
52.2 214 M
(};) s
25.8 202 M (68:) s
25.8 190 M (69:) s
52.2 190 M
(// class inode -) s
25.8 178 M (70:) s
52.2 178 M
(// inode ctor -) s
25.8 166 M (71:) s
52.2 166 M
(//    Create a new inode of the given type.) s
25.8 154 M (72:) s
52.2 154 M
(// get_inode_nr -) s
25.8 142 M (73:) s
52.2 142 M
(//    Retrieves the serial number of the inode.  Inode numbers are) s
25.8 130 M (74:) s
52.2 130 M
(//    allocated in sequence by small integer.) s
25.8 118 M (75:) s
52.2 118 M
(// size -) s
25.8 106 M (76:) s
52.2 106 M
(//    Returns the size of an inode.  For a directory, this is the) s
25.8 94 M (77:) s
52.2 94 M
(//    number of dirents.  For a text file, the number of characters) s
25.8 82 M (78:) s
52.2 82 M
(//    when printed \(the sum of the lengths of each word, plus the) s
25.8 70 M (79:) s
52.2 70 M
(//    number of words.\(spaces in between words\)) s
25.8 58 M (80:) s
52.2 58 M
(//    ) s
25.8 46 M (81:) s
25.8 34 M (82:) s
52.2 34 M
(class inode {) s
25.8 22 M (83:) s
25.8 10 M (84:) s
52.2 10 M
(   //inode does not inherit from inode state) s
_R
S
%%Page: (3) 15
%%BeginPageSetup
_S
38 24 translate
/pagenum 3 def
/fname (file_sys.h) def
/fdir (.) def
/ftail (file_sys.h) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (85:) s
52.2 694 M
(   friend class inode_state;) s
25.8 682 M (86:) s
52.2 682 M
(   private:) s
25.8 670 M (87:) s
52.2 670 M
(      static size_t next_inode_nr;  //next inode number) s
25.8 658 M (88:) s
52.2 658 M
(      size_t inode_nr;//inode number itself) s
25.8 646 M (89:) s
52.2 646 M
(      base_file_ptr contents; //basefile is the abstract base class) s
25.8 634 M (90:) s
52.2 634 M
(                           //directory and plainfile as subclasses) s
25.8 622 M (91:) s
52.2 622 M
(                           //dir and pl do all the work) s
25.8 610 M (92:) s
52.2 610 M
(      //inode contains a pointer to base file) s
25.8 598 M (93:) s
52.2 598 M
(      bool is_dir;  //to know the filetype) s
25.8 586 M (94:) s
52.2 586 M
(      inode_ptr parent{nullptr}; //initializes it to null in case there ) s
5 574 M
(isnt a parent?) s
25.8 562 M (95:) s
52.2 562 M
(   public:) s
25.8 550 M (96:) s
52.2 550 M
(   virtual ~inode\(\) = default;   //destructor?) s
25.8 538 M (97:) s
52.2 538 M
(      inode \(file_type\);   //gets filetype or creates filetype?) s
25.8 526 M (98:) s
52.2 526 M
(      size_t get_inode_nr\(\) const;//only copying pointers to inodes) s
25.8 514 M (99:) s
52.2 514 M
(      //hvae to set inode number?) s
19.2 502 M (100:) s
52.2 502 M
(      void set_contents\(base_file_ptr\);   //setter) s
19.2 490 M (101:) s
52.2 490 M
(      base_file_ptr get_contents\(\); //getter) s
19.2 478 M (102:) s
19.2 466 M (103:) s
52.2 466 M
(      bool isdir\(\); //getter need this??) s
19.2 454 M (104:) s
52.2 454 M
(      ) s
19.2 442 M (105:) s
52.2 442 M
(      inode_ptr get_parent\(\); //need these?) s
19.2 430 M (106:) s
52.2 430 M
(      void set_parent\(inode_ptr\);) s
19.2 418 M (107:) s
52.2 418 M
(      string filename = "";//to keep track of filenames) s
19.2 406 M (108:) s
19.2 394 M (109:) s
52.2 394 M
(};) s
19.2 382 M (110:) s
_R
S
%%Page: (4) 16
%%BeginPageSetup
_S
38 24 translate
/pagenum 4 def
/fname (file_sys.h) def
/fdir (.) def
/ftail (file_sys.h) def
% User defined strings:
/pagenumstr (4) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (111:) s
19.2 682 M (112:) s
52.2 682 M
(// class base_file -) s
19.2 670 M (113:) s
52.2 670 M
(// Just a base class at which an inode can point.  No data or) s
19.2 658 M (114:) s
52.2 658 M
(// functions.  Makes the synthesized members useable only from) s
19.2 646 M (115:) s
52.2 646 M
(// the derived classes.) s
19.2 634 M (116:) s
19.2 622 M (117:) s
52.2 622 M
(class file_error: public runtime_error {) s
19.2 610 M (118:) s
52.2 610 M
(   public:) s
19.2 598 M (119:) s
52.2 598 M
(      explicit file_error \(const string& what\); //its constructor takes ) s
5 586 M
(in a string) s
19.2 574 M (120:) s
52.2 574 M
(};) s
19.2 562 M (121:) s
19.2 550 M (122:) s
52.2 550 M
(class base_file {) s
19.2 538 M (123:) s
52.2 538 M
(   protected:) s
19.2 526 M (124:) s
52.2 526 M
(      base_file\(\) = default;  //basefile has no fieldsl just an abstract) s
5 514 M
( class) s
19.2 502 M (125:) s
52.2 502 M
(         //becasue we have constructors defined, we need to specify defa) s
5 490 M
(ult) s
19.2 478 M (126:) s
52.2 478 M
(      virtual const string& error_file_type\(\) const = 0;) s
19.2 466 M (127:) s
52.2 466 M
(      //says that this function does not exist in basefile, is an abstra) s
5 454 M
(ct function) s
19.2 442 M (128:) s
52.2 442 M
(      //must be overwritten in a subclass) s
19.2 430 M (129:) s
52.2 430 M
(   public:) s
19.2 418 M (130:) s
52.2 418 M
(      virtual ~base_file\(\) = default;) s
19.2 406 M (131:) s
52.2 406 M
(         //if you dont specify a destructor, it will be specified for yo) s
5 394 M
(u^) s
19.2 382 M (132:) s
52.2 382 M
(         //must declare destructor as virtual, so it doesnt just delete) s
19.2 370 M (133:) s
52.2 370 M
(         //pointers?) s
19.2 358 M (134:) s
52.2 358 M
(      base_file \(const base_file&\) = delete;) s
19.2 346 M (135:) s
52.2 346 M
(      //movers, not allowing files to be moved) s
19.2 334 M (136:) s
52.2 334 M
(      //means that the implicity generated copier will be prohibited) s
19.2 322 M (137:) s
52.2 322 M
(      //dont want to allow base files to be copied, use POINTERS  ) s
19.2 310 M (138:) s
52.2 310 M
(      base_file& operator= \(const base_file&\) = delete;) s
19.2 298 M (139:) s
52.2 298 M
(      virtual size_t size\(\) const = 0;) s
19.2 286 M (140:) s
52.2 286 M
(      //base file has no meaning so it is 0) s
19.2 274 M (141:) s
52.2 274 M
(      //no meaning because can be one thing on a plain and another on a ) s
5 262 M
(directory file) s
19.2 250 M (142:) s
52.2 250 M
(      virtual const wordvec& readfile\(\) const;) s
19.2 238 M (143:) s
52.2 238 M
(      //will read text from file) s
19.2 226 M (144:) s
52.2 226 M
(      virtual void writefile \(const wordvec& newdata\);) s
19.2 214 M (145:) s
52.2 214 M
(      //writes text to file, only available to text files) s
19.2 202 M (146:) s
52.2 202 M
(      //error will be thrown for directory file) s
19.2 190 M (147:) s
52.2 190 M
(      virtual void remove \(const string& filename\);) s
19.2 178 M (148:) s
52.2 178 M
(      //only appropriate if we are dealing with directories?) s
19.2 166 M (149:) s
52.2 166 M
(      virtual inode_ptr mkdir \(const string& dirname\);) s
19.2 154 M (150:) s
52.2 154 M
(      virtual inode_ptr mkfile \(const string& filename\);) s
19.2 142 M (151:) s
52.2 142 M
(      virtual map<string,inode_ptr>& get_dirents\(\);) s
19.2 130 M (152:) s
52.2 130 M
(     // virtual bool is_dir\(\);) s
19.2 118 M (153:) s
52.2 118 M
(};) s
_R
S
%%Page: (5) 17
%%BeginPageSetup
_S
38 24 translate
/pagenum 5 def
/fname (file_sys.h) def
/fdir (.) def
/ftail (file_sys.h) def
% User defined strings:
/pagenumstr (5) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (154:) s
19.2 682 M (155:) s
52.2 682 M
(// class plain_file -) s
19.2 670 M (156:) s
52.2 670 M
(// Used to hold data.) s
19.2 658 M (157:) s
52.2 658 M
(// synthesized default ctor -) s
19.2 646 M (158:) s
52.2 646 M
(//    Default vector<string> is a an empty vector.) s
19.2 634 M (159:) s
52.2 634 M
(// readfile -) s
19.2 622 M (160:) s
52.2 622 M
(//    Returns a copy of the contents of the wordvec in the file.) s
19.2 610 M (161:) s
52.2 610 M
(// writefile -) s
19.2 598 M (162:) s
52.2 598 M
(//    Replaces the contents of a file with new contents.) s
19.2 586 M (163:) s
19.2 574 M (164:) s
52.2 574 M
(class plain_file: public base_file {  ) s
19.2 562 M (165:) s
52.2 562 M
(   //friend ostream? ) s
19.2 550 M (166:) s
52.2 550 M
(   private:) s
19.2 538 M (167:) s
52.2 538 M
(      wordvec data;  ) s
19.2 526 M (168:) s
52.2 526 M
(      virtual const string& error_file_type\(\) const override {) s
19.2 514 M (169:) s
52.2 514 M
(         static const string result = "plain file";) s
19.2 502 M (170:) s
52.2 502 M
(         return result;    //this is ok? no change?) s
19.2 490 M (171:) s
52.2 490 M
(         //if you try and run a function on the wrong type of file,) s
19.2 478 M (172:) s
52.2 478 M
(         //returns the filetype) s
19.2 466 M (173:) s
52.2 466 M
(         //ex remove f , error f is a plainfile) s
19.2 454 M (174:) s
52.2 454 M
(         //static to avoid creating it every time we call a function) s
19.2 442 M (175:) s
52.2 442 M
(      }) s
19.2 430 M (176:) s
52.2 430 M
(   public:) s
19.2 418 M (177:) s
52.2 418 M
(   virtual ~plain_file\(\) = default;) s
19.2 406 M (178:) s
52.2 406 M
(      virtual size_t size\(\) const override;  //must be overridden) s
19.2 394 M (179:) s
52.2 394 M
(      //set size??) s
19.2 382 M (180:) s
52.2 382 M
(      virtual const wordvec& readfile\(\) const override;  //override erro) s
5 370 M
(r functions in base class) s
19.2 358 M (181:) s
52.2 358 M
(      //could make base class functions abstract then require them to be) s
5 346 M
( overwritten) s
19.2 334 M (182:) s
52.2 334 M
(      //in base class?) s
19.2 322 M (183:) s
52.2 322 M
(      //should use keyword override) s
19.2 310 M (184:) s
52.2 310 M
(      //cant override something that doesnt exist in the base class) s
19.2 298 M (185:) s
52.2 298 M
(      // would still compile but makes a compile time error so def use o) s
5 286 M
(verride) s
19.2 274 M (186:) s
52.2 274 M
(      //to make it easier to debug) s
19.2 262 M (187:) s
52.2 262 M
(      //keyword virtal is optional) s
19.2 250 M (188:) s
52.2 250 M
(      // virtual void remove \(const string& filename\)override;) s
19.2 238 M (189:) s
52.2 238 M
(       //virtual inode_ptr mkdir \(const string& dirname\) override;  //er) s
5 226 M
(ror will be thrown if basefile version is called) s
19.2 214 M (190:) s
52.2 214 M
(                                                               //, imple) s
5 202 M
(ment in directory) s
19.2 190 M (191:) s
52.2 190 M
(      virtual void writefile \(const wordvec& newdata\) override;) s
19.2 178 M (192:) s
52.2 178 M
(      //virtual inode_ptr mkfile \(const string& filename\) override;) s
19.2 166 M (193:) s
19.2 154 M (194:) s
52.2 154 M
(     // virtual bool is_dir\(\) override;) s
19.2 142 M (195:) s
52.2 142 M
(      ) s
19.2 130 M (196:) s
52.2 130 M
(};) s
19.2 118 M (197:) s
19.2 106 M (198:) s
52.2 106 M
(// class directory -) s
19.2 94 M (199:) s
52.2 94 M
(// Used to map filenames onto inode pointers.) s
19.2 82 M (200:) s
52.2 82 M
(// default ctor -) s
19.2 70 M (201:) s
52.2 70 M
(//    Creates a new map with keys "." and "..".) s
19.2 58 M (202:) s
52.2 58 M
(// remove -) s
19.2 46 M (203:) s
52.2 46 M
(//    Removes the file or subdirectory from the current inode.) s
19.2 34 M (204:) s
52.2 34 M
(//    Throws an file_error if this is not a directory, the file) s
19.2 22 M (205:) s
52.2 22 M
(//    does not exist, or the subdirectory is not empty.) s
19.2 10 M (206:) s
52.2 10 M
(//    Here empty means the only entries are dot \(.\) and dotdot \(..\).) s
_R
S
%%Page: (6) 18
%%BeginPageSetup
_S
38 24 translate
/pagenum 6 def
/fname (file_sys.h) def
/fdir (.) def
/ftail (file_sys.h) def
% User defined strings:
/pagenumstr (6) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (207:) s
52.2 694 M
(// mkdir -) s
19.2 682 M (208:) s
52.2 682 M
(//    Creates a new directory under the current directory and ) s
19.2 670 M (209:) s
52.2 670 M
(//    immediately adds the directories dot \(.\) and dotdot \(..\) to it.) s
19.2 658 M (210:) s
52.2 658 M
(//    Note that the parent \(..\) of / is / itself.  It is an error) s
19.2 646 M (211:) s
52.2 646 M
(//    if the entry already exists.) s
19.2 634 M (212:) s
52.2 634 M
(// mkfile -) s
19.2 622 M (213:) s
52.2 622 M
(//    Create a new empty text file with the given name.  Error if) s
19.2 610 M (214:) s
52.2 610 M
(//    a dirent with that name exists.) s
19.2 598 M (215:) s
19.2 586 M (216:) s
52.2 586 M
(class directory: public base_file {) s
19.2 574 M (217:) s
52.2 574 M
(   private:) s
19.2 562 M (218:) s
52.2 562 M
(      // Must be a map, not unordered_map, so printing is lexicographic) s
19.2 550 M (219:) s
52.2 550 M
(      map<string,inode_ptr> dirents;) s
19.2 538 M (220:) s
52.2 538 M
(      virtual const string& error_file_type\(\) const override {) s
19.2 526 M (221:) s
52.2 526 M
(         static const string result = "directory";) s
19.2 514 M (222:) s
52.2 514 M
(         return result;) s
19.2 502 M (223:) s
52.2 502 M
(      }) s
19.2 490 M (224:) s
52.2 490 M
(   public:) s
19.2 478 M (225:) s
52.2 478 M
(      virtual ~directory\(\) = default;) s
19.2 466 M (226:) s
52.2 466 M
(      virtual size_t size\(\) const override;//????? need to override) s
19.2 454 M (227:) s
52.2 454 M
(      virtual void remove \(const string& filename\) override;   //need to) s
5 442 M
( implement to throw error?    ) s
19.2 430 M (228:) s
52.2 430 M
(                                                              //if direc) s
5 418 M
(tory name is called) s
19.2 406 M (229:) s
52.2 406 M
(      virtual inode_ptr mkdir \(const string& dirname\) override;) s
19.2 394 M (230:) s
52.2 394 M
(      virtual inode_ptr mkfile \(const string& filename\) override;) s
19.2 382 M (231:) s
52.2 382 M
(      //virtual void writefile \(const wordvec& newdata\) override;//????) s
19.2 370 M (232:) s
52.2 370 M
(       //make a num files) s
19.2 358 M (233:) s
52.2 358 M
(      virtual map<string,inode_ptr>& get_dirents\(\)override;) s
19.2 346 M (234:) s
52.2 346 M
(     // virtual bool is_dir\(\) override;) s
19.2 334 M (235:) s
52.2 334 M
(      inode_ptr get_second\(const string& filename\);  //need to get rid o) s
5 322 M
(f?) s
19.2 310 M (236:) s
52.2 310 M
(      bool file_dne\(const string& words\);) s
19.2 298 M (237:) s
52.2 298 M
(      bool is_dir_\(const string& words\); //getter need this??) s
19.2 286 M (238:) s
52.2 286 M
(      inode_ptr update_file\(const string& filename, const wordvec&words\)) s
5 274 M
(;) s
19.2 262 M (239:) s
52.2 262 M
(};) s
19.2 250 M (240:) s
19.2 238 M (241:) s
52.2 238 M
(#endif) s
19.2 226 M (242:) s
_R
S
%%Page: (1) 19
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: file_sys.cpp,v 1.11 2021-05-03 17:36:57-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#include <cassert>) s
32.4 658 M (4:) s
52.2 658 M
(#include <iostream>) s
32.4 646 M (5:) s
52.2 646 M
(#include <stdexcept>) s
32.4 634 M (6:) s
32.4 622 M (7:) s
52.2 622 M
(using namespace std;) s
32.4 610 M (8:) s
32.4 598 M (9:) s
52.2 598 M
(#include "debug.h") s
25.8 586 M (10:) s
52.2 586 M
(#include "file_sys.h") s
25.8 574 M (11:) s
25.8 562 M (12:) s
52.2 562 M
(size_t inode::next_inode_nr {1}; //initialized to 1, the first inode num) s
5 550 M
(ber) s
25.8 538 M (13:) s
25.8 526 M (14:) s
52.2 526 M
(ostream& operator<< \(ostream& out, file_type type\) {) s
25.8 514 M (15:) s
52.2 514 M
(   switch \(type\) {) s
25.8 502 M (16:) s
52.2 502 M
(      case file_type::PLAIN_TYPE: out << "PLAIN_TYPE"; break;) s
25.8 490 M (17:) s
52.2 490 M
(      case file_type::DIRECTORY_TYPE: out << "DIRECTORY_TYPE"; break;) s
25.8 478 M (18:) s
52.2 478 M
(      default: assert \(false\);) s
25.8 466 M (19:) s
52.2 466 M
(   };) s
25.8 454 M (20:) s
52.2 454 M
(   return out;) s
25.8 442 M (21:) s
52.2 442 M
(}) s
25.8 430 M (22:) s
52.2 430 M
(     ) s
25.8 418 M (23:) s
52.2 418 M
(     ) s
25.8 406 M (24:) s
25.8 394 M (25:) s
25.8 382 M (26:) s
52.2 382 M
(inode_state::inode_state\(\) {) s
25.8 370 M (27:) s
52.2 370 M
(  // DEBUGF \('i', "root = " << root << ", cwd = " << cwd) s
25.8 358 M (28:) s
52.2 358 M
(  //        << ", prompt = \\"" << prompt\(\) << "\\""\);) s
25.8 346 M (29:) s
25.8 334 M (30:) s
52.2 334 M
(   //inode state constructor) s
25.8 322 M (31:) s
52.2 322 M
(   //establish inode state) s
25.8 310 M (32:) s
52.2 310 M
(   //create root directory /) s
25.8 298 M (33:) s
52.2 298 M
(   //make sure root directory \(parent ..\) points at itseld) s
25.8 286 M (34:) s
52.2 286 M
(   //can call inode constructor and pass in a filetype /) s
25.8 274 M (35:) s
52.2 274 M
(   //then modify it after the fact?) s
25.8 262 M (36:) s
52.2 262 M
(   //can call the make shared plain file and directory/?) s
25.8 250 M (37:) s
52.2 250 M
(   //i node and inode state are friends) s
25.8 238 M (38:) s
52.2 238 M
(   //which means once you have an inode the inode state can go in and za) s
5 226 M
(p ) s
25.8 214 M (39:) s
52.2 214 M
(   //the fields in appropriate manners) s
25.8 202 M (40:) s
52.2 202 M
(   root = make_shared <inode> \(file_type::DIRECTORY_TYPE\);  //right?) s
25.8 190 M (41:) s
52.2 190 M
(  // shared_ptr <directory> root_dir = dynamic_pointer_cast<directory>) s
25.8 178 M (42:) s
52.2 178 M
(   //                              \(root->get_contents\(\)\);) s
25.8 166 M (43:) s
52.2 166 M
(   //shared_ptr <directory>  ) s
25.8 154 M (44:) s
52.2 154 M
(   cwd = root;) s
25.8 142 M (45:) s
52.2 142 M
(   root->parent =  root;) s
25.8 130 M (46:) s
52.2 130 M
(   pair <string, inode_ptr> dot = {".", root};  //sets dot, cwd, to root) s
25.8 118 M (47:) s
52.2 118 M
(   \(root->get_contents\(\)->get_dirents\(\)\).insert\(dot\);  ) s
25.8 106 M (48:) s
52.2 106 M
(   ) s
25.8 94 M (49:) s
52.2 94 M
(   pair <string, inode_ptr> dot_dot  = {"..", root};  //sets dot dot, th) s
5 82 M
(e parent to root) s
25.8 70 M (50:) s
52.2 70 M
(   \(root->get_contents\(\)->get_dirents\(\)\).insert\(dot_dot\);) s
25.8 58 M (51:) s
52.2 58 M
(  ) s
25.8 46 M (52:) s
52.2 46 M
(}) s
25.8 34 M (53:) s
52.2 34 M
(//inode_state method implementations) s
25.8 22 M (54:) s
52.2 22 M
(void inode_state::prompt\(const string& s\){) s
25.8 10 M (55:) s
52.2 10 M
(      prompt_  = s;) s
_R
S
%%Page: (2) 20
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (56:) s
52.2 694 M
(}  //implement later? its ok) s
25.8 682 M (57:) s
52.2 682 M
(      //sets the prompts) s
25.8 670 M (58:) s
52.2 670 M
(const string& inode_state::prompt\(\) const { return prompt_; }) s
25.8 658 M (59:) s
52.2 658 M
(//just returns the prompt) s
25.8 646 M (60:) s
25.8 634 M (61:) s
25.8 622 M (62:) s
52.2 622 M
(inode_ptr inode_state::get_root\(\){ return root; } ) s
25.8 610 M (63:) s
25.8 598 M (64:) s
52.2 598 M
(inode_ptr inode_state::get_cwd\(\){ return cwd; }//need this?) s
25.8 586 M (65:) s
25.8 574 M (66:) s
52.2 574 M
(void inode_state::set_cwd\(inode_ptr new_cwd\){) s
25.8 562 M (67:) s
52.2 562 M
(   cwd = new_cwd;) s
25.8 550 M (68:) s
52.2 550 M
(   cout<<"new cwd:";) s
25.8 538 M (69:) s
52.2 538 M
(   cout<< cwd->filename;) s
25.8 526 M (70:) s
52.2 526 M
(}) s
25.8 514 M (71:) s
52.2 514 M
(void inode_state::path\(const inode_ptr& state_cwd\){) s
25.8 502 M (72:) s
52.2 502 M
(  ) s
25.8 490 M (73:) s
52.2 490 M
(   wordvec rootpath;) s
25.8 478 M (74:) s
52.2 478 M
(   cout<<"made rootpath\\n";) s
25.8 466 M (75:) s
52.2 466 M
(rootpath.push_back\("/"\);) s
25.8 454 M (76:) s
52.2 454 M
(    rootpath.push_back\(state_cwd->filename\);//then pushback other names?) s
25.8 442 M (77:) s
52.2 442 M
(   cout<< "pushed back first time\\n filename:";) s
25.8 430 M (78:) s
52.2 430 M
(  cout<<"roothpath:";) s
25.8 418 M (79:) s
52.2 418 M
(  cout<< rootpath;) s
25.8 406 M (80:) s
52.2 406 M
(   ) s
25.8 394 M (81:) s
52.2 394 M
(   inode_ptr cwd_dirents = state_cwd->get_contents\(\)->get_dirents\(\).find) s
5 382 M
(\(".."\)->second;) s
25.8 370 M (82:) s
52.2 370 M
(   cout<<"\\nset cwd_dirents";) s
25.8 358 M (83:) s
52.2 358 M
(   while\(cwd_dirents->inode_nr!= 1\){) s
25.8 346 M (84:) s
52.2 346 M
(     cout<< "\\n inwhile";) s
25.8 334 M (85:) s
52.2 334 M
(      cwd_dirents =  cwd_dirents->get_contents\(\)->get_dirents\(\).find\("..) s
5 322 M
("\)->second;//issue here!->use dot  dot not parent!!) s
25.8 310 M (86:) s
52.2 310 M
(      cout<< "in while cwd_dirents changed\\n";) s
25.8 298 M (87:) s
52.2 298 M
(      //cout<<"/";) s
25.8 286 M (88:) s
52.2 286 M
(     // cout<<cwd_dirents->filename;) s
25.8 274 M (89:) s
52.2 274 M
(      ) s
25.8 262 M (90:) s
52.2 262 M
(      rootpath.push_back\(cwd_dirents->filename\);) s
25.8 250 M (91:) s
52.2 250 M
(      rootpath.push_back\("/"\);) s
25.8 238 M (92:) s
52.2 238 M
(      cout<< "in while\\n rootpath pushedback:";) s
25.8 226 M (93:) s
52.2 226 M
(      cout<<rootpath;) s
25.8 214 M (94:) s
52.2 214 M
(     ) s
25.8 202 M (95:) s
52.2 202 M
(   }) s
25.8 190 M (96:) s
52.2 190 M
(   cout<<"after while";) s
25.8 178 M (97:) s
52.2 178 M
(   string path_output;) s
25.8 166 M (98:) s
52.2 166 M
(  for \(unsigned long i = 0; i>rootpath.size\(\);i++\){) s
25.8 154 M (99:) s
52.2 154 M
(     //path_output.append\(rootpath.at\(i\)\);) s
19.2 142 M (100:) s
52.2 142 M
(     cout<< rootpath.at\(i\);) s
19.2 130 M (101:) s
52.2 130 M
(  }) s
19.2 118 M (102:) s
52.2 118 M
(  // cout<< path_output;) s
19.2 106 M (103:) s
52.2 106 M
(   ) s
19.2 94 M (104:) s
52.2 94 M
(}) s
19.2 82 M (105:) s
19.2 70 M (106:) s
19.2 58 M (107:) s
19.2 46 M (108:) s
52.2 46 M
(void rm_r\( inode_ptr roo\){) s
19.2 34 M (109:) s
52.2 34 M
(   //depth first search \(postorder\)) s
19.2 22 M (110:) s
52.2 22 M
(   map<string,inode_ptr>& roo_dirents = \(roo->get_contents\(\)->get_dirent) s
5 10 M
(s\(\)\);) s
_R
S
%%Page: (3) 21
%%BeginPageSetup
_S
38 24 translate
/pagenum 3 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (111:) s
52.2 694 M
(   //create map of dirents of the file roo) s
19.2 682 M (112:) s
52.2 682 M
(   for\(auto ritor = roo_dirents.crbegin\(\); ritor != roo_dirents.crend\(\);) s
5 670 M
( ++ritor\){ //cr or nah) s
19.2 658 M (113:) s
52.2 658 M
(      //recur over each entry other than dot or dot dot) s
19.2 646 M (114:) s
52.2 646 M
(      if\(ritor->first!="." and ritor->first != "..") s
19.2 634 M (115:) s
52.2 634 M
(         and ritor->second->isdir\(\)) s
19.2 622 M (116:) s
52.2 622 M
(         ==true\){//->get_contents\(\)?) s
19.2 610 M (117:) s
52.2 610 M
(         rm_r\(ritor->second\);) s
19.2 598 M (118:) s
52.2 598 M
(      }) s
19.2 586 M (119:) s
52.2 586 M
(      //if not directory, or empty directory, erase) s
19.2 574 M (120:) s
52.2 574 M
(      roo_dirents.erase\(ritor->first\);) s
19.2 562 M (121:) s
52.2 562 M
(   }) s
19.2 550 M (122:) s
52.2 550 M
(   roo_dirents.erase\("."\); //erasing root last) s
19.2 538 M (123:) s
52.2 538 M
(   roo_dirents.erase\(".."\); //erasing root last) s
19.2 526 M (124:) s
19.2 514 M (125:) s
52.2 514 M
(}) s
19.2 502 M (126:) s
19.2 490 M (127:) s
19.2 478 M (128:) s
52.2 478 M
(/////////// inode_state destructor////////  ) s
19.2 466 M (129:) s
19.2 454 M (130:) s
52.2 454 M
(inode_state::~inode_state\(\){) s
19.2 442 M (131:) s
52.2 442 M
(   ) s
19.2 430 M (132:) s
52.2 430 M
(   rm_r\(root\);) s
19.2 418 M (133:) s
52.2 418 M
(   cwd = nullptr;//need to do this?) s
19.2 406 M (134:) s
52.2 406 M
(   root = nullptr;//idk) s
19.2 394 M (135:) s
52.2 394 M
(}) s
19.2 382 M (136:) s
19.2 370 M (137:) s
19.2 358 M (138:) s
52.2 358 M
(ostream& operator<< \(ostream& out, const inode_state& state\) {) s
19.2 346 M (139:) s
52.2 346 M
(   //just prints out inode state) s
19.2 334 M (140:) s
52.2 334 M
(   //just used in debug statements in working code) s
19.2 322 M (141:) s
52.2 322 M
(   out << "inode_state: root = " << state.root//machine adresses) s
19.2 310 M (142:) s
52.2 310 M
(       << ", cwd = " << state.cwd;) s
19.2 298 M (143:) s
52.2 298 M
(   return out;) s
19.2 286 M (144:) s
52.2 286 M
(}) s
19.2 274 M (145:) s
52.2 274 M
(/////////////////////////////////inode//////////////////) s
19.2 262 M (146:) s
52.2 262 M
(inode::inode\(file_type type\): inode_nr \(next_inode_nr++\) {) s
19.2 250 M (147:) s
52.2 250 M
(   //constructor) s
19.2 238 M (148:) s
52.2 238 M
(   //need a virtual constructor but no such thing in c++) s
19.2 226 M (149:) s
52.2 226 M
(   //so instead pass in anargument) s
19.2 214 M (150:) s
52.2 214 M
(   //default constructor on an inode has been supressed) s
19.2 202 M (151:) s
52.2 202 M
(   //so just say new node and give it the particular filetype that you w) s
5 190 M
(ant to ) s
19.2 178 M (152:) s
52.2 178 M
(   //create) s
19.2 166 M (153:) s
52.2 166 M
(   //depends on the command it is being called from) s
19.2 154 M (154:) s
52.2 154 M
(  // fileType = type;) s
19.2 142 M (155:) s
52.2 142 M
(   switch \(type\) {) s
19.2 130 M (156:) s
52.2 130 M
(      case file_type::PLAIN_TYPE:) s
19.2 118 M (157:) s
52.2 118 M
(         is_dir = false;) s
19.2 106 M (158:) s
52.2 106 M
(           contents = make_shared<plain_file>\(\);) s
19.2 94 M (159:) s
52.2 94 M
(           break;) s
19.2 82 M (160:) s
52.2 82 M
(      case file_type::DIRECTORY_TYPE:) s
19.2 70 M (161:) s
52.2 70 M
(         is_dir = true;) s
19.2 58 M (162:) s
52.2 58 M
(           contents = make_shared<directory>\(\); //make shared of a plain) s
5 46 M
( or directory) s
19.2 34 M (163:) s
52.2 34 M
(               //adjust the file sysem) s
19.2 22 M (164:) s
52.2 22 M
(               //making filesystem friends) s
19.2 10 M (165:) s
52.2 10 M
(               //inode and inode state are already friends) s
_R
S
%%Page: (4) 22
%%BeginPageSetup
_S
38 24 translate
/pagenum 4 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (4) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (166:) s
52.2 694 M
(               //base file probably doesnt work well without inode) s
19.2 682 M (167:) s
52.2 682 M
(               //information hiding is not important?? idk) s
19.2 670 M (168:) s
52.2 670 M
(           break;) s
19.2 658 M (169:) s
52.2 658 M
(      default: assert \(false\);   //for the sake of clarity) s
19.2 646 M (170:) s
52.2 646 M
(   }) s
19.2 634 M (171:) s
52.2 634 M
(   //F \('i', "inode " << inode_nr << ", type = " << type\);) s
19.2 622 M (172:) s
52.2 622 M
(}) s
19.2 610 M (173:) s
19.2 598 M (174:) s
52.2 598 M
(size_t inode::get_inode_nr\(\) const {) s
19.2 586 M (175:) s
19.2 574 M (176:) s
52.2 574 M
(   //just gets inode number, already done) s
19.2 562 M (177:) s
52.2 562 M
(  // DEBUGF \('i', "inode = " << inode_nr\);) s
19.2 550 M (178:) s
52.2 550 M
(   return inode_nr;) s
19.2 538 M (179:) s
52.2 538 M
(}) s
19.2 526 M (180:) s
52.2 526 M
(//void inode::set_contents\(base_file_ptr new_contents\){) s
19.2 514 M (181:) s
52.2 514 M
(//   contents = new_contents;) s
19.2 502 M (182:) s
52.2 502 M
(//}   //dont ever need to set new contents though right?) s
19.2 490 M (183:) s
52.2 490 M
(base_file_ptr inode::get_contents\(\){ return contents; } //getter) s
19.2 478 M (184:) s
19.2 466 M (185:) s
52.2 466 M
(bool inode::isdir\(\){ ) s
19.2 454 M (186:) s
52.2 454 M
(   return is_dir; } //getter need this??) s
19.2 442 M (187:) s
52.2 442 M
(//or just use is_dir) s
19.2 430 M (188:) s
19.2 418 M (189:) s
52.2 418 M
(inode_ptr inode::get_parent\(\){ ) s
19.2 406 M (190:) s
52.2 406 M
(   cout<<"get_parent filename:\\n";) s
19.2 394 M (191:) s
52.2 394 M
(   cout<<parent->filename;) s
19.2 382 M (192:) s
52.2 382 M
(   return parent;) s
19.2 370 M (193:) s
52.2 370 M
(}) s
19.2 358 M (194:) s
52.2 358 M
( void inode::set_parent\(inode_ptr dir\){) s
19.2 346 M (195:) s
52.2 346 M
( ) s
19.2 334 M (196:) s
52.2 334 M
(    parent = dir;) s
19.2 322 M (197:) s
52.2 322 M
(    cout<<"get_parent filename:";) s
19.2 310 M (198:) s
52.2 310 M
(   cout<<parent->filename;) s
19.2 298 M (199:) s
52.2 298 M
( }) s
19.2 286 M (200:) s
19.2 274 M (201:) s
19.2 262 M (202:) s
19.2 250 M (203:) s
52.2 250 M
(file_error::file_error \(const string& what\):) s
19.2 238 M (204:) s
52.2 238 M
(//implementation of a file error could have been done in line? idk) s
19.2 226 M (205:) s
52.2 226 M
(//need to change?) s
19.2 214 M (206:) s
52.2 214 M
(            runtime_error \(what\) {) s
19.2 202 M (207:) s
52.2 202 M
(}) s
19.2 190 M (208:) s
19.2 178 M (209:) s
52.2 178 M
(//all these functions do is throw a file error based on the file type) s
19.2 166 M (210:) s
52.2 166 M
(//that is in basefile) s
19.2 154 M (211:) s
52.2 154 M
(   //those fucntions will either be inherited or overwritten) s
19.2 142 M (212:) s
52.2 142 M
(   //if dont override, will be inherited) s
19.2 130 M (213:) s
19.2 118 M (214:) s
52.2 118 M
(//can leave alone until plainfile size) s
19.2 106 M (215:) s
52.2 106 M
(const wordvec& base_file::readfile\(\) const {) s
19.2 94 M (216:) s
52.2 94 M
(   ) s
19.2 82 M (217:) s
52.2 82 M
(   throw file_error \("readfile: is a " + error_file_type\(\)\);) s
19.2 70 M (218:) s
52.2 70 M
(}) s
19.2 58 M (219:) s
19.2 46 M (220:) s
52.2 46 M
(void base_file::writefile \(const wordvec&\) {) s
19.2 34 M (221:) s
52.2 34 M
(   throw file_error \("writefile: is a " + error_file_type\(\)\);) s
19.2 22 M (222:) s
52.2 22 M
(}) s
19.2 10 M (223:) s
_R
S
%%Page: (5) 23
%%BeginPageSetup
_S
38 24 translate
/pagenum 5 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (5) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (224:) s
52.2 694 M
(void base_file::remove \(const string&\) {) s
19.2 682 M (225:) s
52.2 682 M
(   throw file_error \("remove: is a " + error_file_type\(\)\);) s
19.2 670 M (226:) s
52.2 670 M
(}) s
19.2 658 M (227:) s
19.2 646 M (228:) s
52.2 646 M
(inode_ptr base_file::mkdir \(const string&\) {) s
19.2 634 M (229:) s
52.2 634 M
(   throw file_error \("mkdir:is a " + error_file_type\(\)\);) s
19.2 622 M (230:) s
52.2 622 M
(}) s
19.2 610 M (231:) s
19.2 598 M (232:) s
52.2 598 M
(inode_ptr base_file::mkfile \(const string&\) {) s
19.2 586 M (233:) s
52.2 586 M
(   throw file_error \("mkfile:is a " + error_file_type\(\)\); //dont work) s
19.2 574 M (234:) s
52.2 574 M
(}) s
19.2 562 M (235:) s
52.2 562 M
(//added functions) s
19.2 550 M (236:) s
52.2 550 M
(map<string,inode_ptr>& base_file::get_dirents\(\) {) s
19.2 538 M (237:) s
52.2 538 M
(   throw file_error \("getdirents: is a " + error_file_type\(\)\); //dont wo) s
5 526 M
(rk) s
19.2 514 M (238:) s
52.2 514 M
(}) s
19.2 502 M (239:) s
52.2 502 M
(/*bool base_file::is_dir\(\) {) s
19.2 490 M (240:) s
52.2 490 M
(   throw file_error \("isdir: is a " + error_file_type\(\)\); //dont work) s
19.2 478 M (241:) s
52.2 478 M
(}*/) s
19.2 466 M (242:) s
_R
S
%%Page: (6) 24
%%BeginPageSetup
_S
38 24 translate
/pagenum 6 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (6) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (243:) s
5 694 M
(//plainfile must override read and writefile) s
19.2 682 M (244:) s
52.2 682 M
(   //but can go ahead and inherit remove mkdir and mkfile) s
19.2 670 M (245:) s
52.2 670 M
(//all of these need to be done!!!) s
19.2 658 M (246:) s
52.2 658 M
(size_t plain_file::size\(\) const {   //constant function) s
19.2 646 M (247:) s
52.2 646 M
(   //use wordvec data) s
19.2 634 M (248:) s
52.2 634 M
(   size_t size  = data.size\(\);  //does this work) s
19.2 622 M (249:) s
52.2 622 M
(  // DEBUGF \('i', "size = " << size\);{) s
19.2 610 M (250:) s
52.2 610 M
(  for\(auto i = data.begin\(\);i<data.end\(\);i++\){ //will there be an extra ) s
5 598 M
(space?) s
19.2 586 M (251:) s
52.2 586 M
(     size += i->size\(\);//each word) s
19.2 574 M (252:) s
52.2 574 M
(  }) s
19.2 562 M (253:) s
52.2 562 M
(   return data.size\(\);  //calling size function from map?) s
19.2 550 M (254:) s
52.2 550 M
(}) s
19.2 538 M (255:) s
19.2 526 M (256:) s
52.2 526 M
(const wordvec& plain_file::readfile\(\) const {) s
19.2 514 M (257:) s
52.2 514 M
(  // DEBUGF \('i', data\);) s
19.2 502 M (258:) s
52.2 502 M
(   return data;   //dont change?) s
19.2 490 M (259:) s
52.2 490 M
(}) s
19.2 478 M (260:) s
19.2 466 M (261:) s
52.2 466 M
(void plain_file::writefile \(const wordvec& words\) {) s
19.2 454 M (262:) s
52.2 454 M
(  // DEBUGF \('i', words\);//must change) s
19.2 442 M (263:) s
52.2 442 M
(   data = words;  //sets data to the wordvec words) s
19.2 430 M (264:) s
52.2 430 M
(}) s
19.2 418 M (265:) s
52.2 418 M
(/*) s
19.2 406 M (266:) s
52.2 406 M
(bool plain_file::is_dir\(\) {) s
19.2 394 M (267:) s
52.2 394 M
(   return  false;) s
19.2 382 M (268:) s
52.2 382 M
(}*/) s
19.2 370 M (269:) s
52.2 370 M
(//directory must override remove mkdir and mkfile but can inherit) s
19.2 358 M (270:) s
52.2 358 M
(//readfile and writefile) s
19.2 346 M (271:) s
52.2 346 M
(//all of these need to be done!!!) s
19.2 334 M (272:) s
19.2 322 M (273:) s
52.2 322 M
(//could just handle plain files initially) s
19.2 310 M (274:) s
52.2 310 M
(//because need to make an inode for the root directory) s
19.2 298 M (275:) s
52.2 298 M
(//needs to have a directory file in it) s
19.2 286 M (276:) s
52.2 286 M
(//but the last three wont be used if dont test using those, dont make or) s
5 274 M
( delete files) s
19.2 262 M (277:) s
52.2 262 M
(size_t directory::size\(\) const {) s
19.2 250 M (278:) s
52.2 250 M
(   //size_t size = dirents.size\(\);  //can use directory.size function in) s
5 238 M
( map?) s
19.2 226 M (279:) s
52.2 226 M
(  // DEBUGF \('i', "size = " << size\);) s
19.2 214 M (280:) s
52.2 214 M
(   return dirents.size\(\);) s
19.2 202 M (281:) s
52.2 202 M
(}) s
19.2 190 M (282:) s
52.2 190 M
(//just override the base files) s
19.2 178 M (283:) s
19.2 166 M (284:) s
52.2 166 M
(void directory::remove \(const string& filename\) {) s
19.2 154 M (285:) s
52.2 154 M
(   //DEBUGF \('i', filename\); //needs to delete something from a director) s
5 142 M
(y) s
19.2 130 M (286:) s
52.2 130 M
(   //idk look at this more) s
19.2 118 M (287:) s
52.2 118 M
(   //if empty directory or if file) s
19.2 106 M (288:) s
52.2 106 M
(   //use find\(\) function) s
19.2 94 M (289:) s
52.2 94 M
(   //shouldnt work on root though? idk) s
19.2 82 M (290:) s
52.2 82 M
(     inode_ptr rm_ptr = dirents.find\(filename\)->second;) s
19.2 70 M (291:) s
52.2 70 M
(   if\(rm_ptr->isdir\(\) == false) s
19.2 58 M (292:) s
52.2 58 M
(      ||dirents.find\(filename\)->first != ".."\){) s
19.2 46 M (293:) s
52.2 46 M
(      dirents.erase\(filename\);) s
19.2 34 M (294:) s
52.2 34 M
(   }) s
19.2 22 M (295:) s
52.2 22 M
(}) s
19.2 10 M (296:) s
_R
S
%%Page: (7) 25
%%BeginPageSetup
_S
38 24 translate
/pagenum 7 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (7) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (297:) s
52.2 694 M
(inode_ptr directory::mkdir \(const string& dirname\) {) s
19.2 682 M (298:) s
52.2 682 M
(  // DEBUGF \('i', dirname\);//creates directory) s
19.2 670 M (299:) s
52.2 670 M
(   //error if file or directory of same name is already) s
19.2 658 M (300:) s
52.2 658 M
(   //created, or if the complete pathname to the parent of) s
19.2 646 M (301:) s
52.2 646 M
(   //this dir does not already exist) s
19.2 634 M (302:) s
52.2 634 M
(   //dot and dot dot added to dirents) s
19.2 622 M (303:) s
19.2 610 M (304:) s
52.2 610 M
(   /*if\(dirents.find\(dirname\)->second != inode_ptr\(\)\){  //if it has been) s
5 598 M
( created) s
19.2 586 M (305:) s
52.2 586 M
(      throw file_error \("mkdir: file already exists: " + dirname\); //thr) s
5 574 M
(ow error) s
19.2 562 M (306:) s
52.2 562 M
(   }*/) s
19.2 550 M (307:) s
52.2 550 M
(   cout<< "in mkdir";) s
19.2 538 M (308:) s
52.2 538 M
(   inode_ptr newDir = make_shared<inode>\(file_type::DIRECTORY_TYPE\);) s
19.2 526 M (309:) s
52.2 526 M
(   //make new dir) s
19.2 514 M (310:) s
52.2 514 M
(   newDir->filename = dirname;) s
19.2 502 M (311:) s
52.2 502 M
(   //newDir->set_parent\(this.get_cwd\(\)\);) s
19.2 490 M (312:) s
52.2 490 M
(   cout<<"\\nnewDir filename:";) s
19.2 478 M (313:) s
52.2 478 M
(   cout<< newDir->filename;) s
19.2 466 M (314:) s
52.2 466 M
(    //cout<<"\\nparent filename:";) s
19.2 454 M (315:) s
52.2 454 M
(   //cout<< newDir->get_parent\(\)->filename;//parents arent changing) s
19.2 442 M (316:) s
52.2 442 M
(   //insert new dir to dirents) s
19.2 430 M (317:) s
52.2 430 M
(   cout<<"\\ninserting new pair\\n";) s
19.2 418 M (318:) s
52.2 418 M
(   pair<string,inode_ptr> newPair = {dirname,newDir};) s
19.2 406 M (319:) s
52.2 406 M
(   dirents.insert\(newPair\);) s
19.2 394 M (320:) s
52.2 394 M
(   cout<<"inserted new pair\\n";) s
19.2 382 M (321:) s
52.2 382 M
(  // newDir->set_parent\(newDir->get_cwd\(\)\);) s
19.2 370 M (322:) s
52.2 370 M
(   //add dot/dotdot to current dir) s
19.2 358 M (323:) s
52.2 358 M
(   pair <string, inode_ptr> dot = {".", newDir};  //sets dot, cwd) s
19.2 346 M (324:) s
52.2 346 M
(   //\(newDir->get_contents\(\)->get_dirents\(\)\).insert\(dot\);  ) s
19.2 334 M (325:) s
52.2 334 M
(   cout<<"made dot \\n";) s
19.2 322 M (326:) s
52.2 322 M
(   dirents.insert\(dot\);) s
19.2 310 M (327:) s
52.2 310 M
(   cout<<" inserted dot\\n";) s
19.2 298 M (328:) s
52.2 298 M
(   pair <string, inode_ptr> dot_dot  = {"..", dirents.find\("."\)->second}) s
5 286 M
(;  //sets dot dot, the paren\(cwd before new dir\)) s
19.2 274 M (329:) s
52.2 274 M
(   //\(newDir->get_contents\(\)->get_dirents\(\)\).insert\(dot_dot\);) s
19.2 262 M (330:) s
52.2 262 M
(    cout<<" made dot dot\\n";) s
19.2 250 M (331:) s
52.2 250 M
(   dirents.insert\(dot_dot\);) s
19.2 238 M (332:) s
52.2 238 M
(    cout<<" inserted dot dot\\n";) s
19.2 226 M (333:) s
52.2 226 M
(    newDir->set_parent\(dirents.find\("."\)->second\);) s
19.2 214 M (334:) s
52.2 214 M
(    cout<< newDir->get_parent\(\);) s
19.2 202 M (335:) s
52.2 202 M
(   // cout<<newDir->get_contents\(\)->get_dirents\(\).find\(".."\)->second->fi) s
5 190 M
(lename;) s
19.2 178 M (336:) s
52.2 178 M
(   return newDir;) s
19.2 166 M (337:) s
52.2 166 M
(}) s
19.2 154 M (338:) s
19.2 142 M (339:) s
52.2 142 M
(inode_ptr directory::mkfile \(const string& filename\) {) s
19.2 130 M (340:) s
52.2 130 M
(   //DEBUGF \('i', filename\); //creates file) s
19.2 118 M (341:) s
52.2 118 M
(//file specified is created and the rest of the wordst) s
19.2 106 M (342:) s
52.2 106 M
(//are put in that file) s
19.2 94 M (343:) s
52.2 94 M
(//if the file already exists, a new one is not created but the ) s
19.2 82 M (344:) s
52.2 82 M
(//contents are replaced) s
19.2 70 M (345:) s
52.2 70 M
(//error to specify a directory) s
19.2 58 M (346:) s
52.2 58 M
(//if there are no words the file is empty) s
19.2 46 M (347:) s
52.2 46 M
(   //inode_ptr i_node_ptr = dirents.find\(filename\)->second;) s
19.2 34 M (348:) s
52.2 34 M
(   /*if\(i_node_ptr->isdir\(\) == true\){) s
19.2 22 M (349:) s
52.2 22 M
(         throw file_error \("mkfile: file is a directory " + filename\); /) s
5 10 M
(/throw error) s
_R
S
%%Page: (8) 26
%%BeginPageSetup
_S
38 24 translate
/pagenum 8 def
/fname (file_sys.cpp) def
/fdir (.) def
/ftail (file_sys.cpp) def
% User defined strings:
/pagenumstr (8) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
19.2 694 M (350:) s
52.2 694 M
(   }*/) s
19.2 682 M (351:) s
52.2 682 M
(   //make new file) s
19.2 670 M (352:) s
52.2 670 M
(   inode_ptr newFile = make_shared<inode>\(file_type::PLAIN_TYPE\);) s
19.2 658 M (353:) s
52.2 658 M
(   newFile->filename  = filename;) s
19.2 646 M (354:) s
52.2 646 M
(  // cout<< "\\nfilename:";) s
19.2 634 M (355:) s
52.2 634 M
(  // cout<< filename;) s
19.2 622 M (356:) s
52.2 622 M
(   //newFile->set_parent\(inode_state\(\).get_cwd\(\)\);) s
19.2 610 M (357:) s
52.2 610 M
(   //insert/replace contents) s
19.2 598 M (358:) s
52.2 598 M
(   pair<string,inode_ptr> newFilePair = {filename,newFile};) s
19.2 586 M (359:) s
52.2 586 M
(   dirents.insert\(newFilePair\);//dirents[filename]= newFile;) s
19.2 574 M (360:) s
52.2 574 M
(   return newFile;) s
19.2 562 M (361:) s
52.2 562 M
(}) s
19.2 550 M (362:) s
19.2 538 M (363:) s
52.2 538 M
(map<string,inode_ptr>& directory::get_dirents\(\) {) s
19.2 526 M (364:) s
52.2 526 M
(   return dirents;) s
19.2 514 M (365:) s
52.2 514 M
(}) s
19.2 502 M (366:) s
52.2 502 M
(/*bool directory::is_dir\(\) {) s
19.2 490 M (367:) s
52.2 490 M
(   return true;) s
19.2 478 M (368:) s
52.2 478 M
(}*/) s
19.2 466 M (369:) s
52.2 466 M
(/*inode_ptr directory::get_cwd\(\){) s
19.2 454 M (370:) s
52.2 454 M
(   dirents.find\("."\)->second;) s
19.2 442 M (371:) s
52.2 442 M
(}) s
19.2 430 M (372:) s
52.2 430 M
(*/) s
19.2 418 M (373:) s
52.2 418 M
(//void directory::writefile \(const wordvec&\) {) s
19.2 406 M (374:) s
52.2 406 M
(//   throw file_error \("writefile: is a " + error_file_type\(\)\);) s
19.2 394 M (375:) s
52.2 394 M
(//}) s
19.2 382 M (376:) s
52.2 382 M
(bool directory::file_dne\( const string& str\){) s
19.2 370 M (377:) s
52.2 370 M
(   if\(dirents.find\(str\)== dirents.end\(\)\){) s
19.2 358 M (378:) s
52.2 358 M
(      return true;) s
19.2 346 M (379:) s
52.2 346 M
(   }) s
19.2 334 M (380:) s
52.2 334 M
(   return false;) s
19.2 322 M (381:) s
52.2 322 M
(}) s
19.2 310 M (382:) s
52.2 310 M
(bool directory::is_dir_\(const string& words\){) s
19.2 298 M (383:) s
52.2 298 M
(  return\( dirents.find\(words\)->second->isdir\(\)\);) s
19.2 286 M (384:) s
52.2 286 M
(}) s
19.2 274 M (385:) s
19.2 262 M (386:) s
52.2 262 M
(inode_ptr directory::update_file\(const string& filename, const wordvec& ) s
5 250 M
(words\){) s
19.2 238 M (387:) s
52.2 238 M
(   inode_ptr update_ptr = dirents.find\(filename\)->second;) s
19.2 226 M (388:) s
52.2 226 M
(   update_ptr->get_contents\(\)->writefile\(words\);) s
19.2 214 M (389:) s
52.2 214 M
(   pair<string,inode_ptr> update_pair = {filename,update_ptr};) s
19.2 202 M (390:) s
52.2 202 M
(   dirents.insert\(update_pair\);//dirents[filename]= newFile;) s
19.2 190 M (391:) s
52.2 190 M
(   return update_ptr;) s
19.2 178 M (392:) s
52.2 178 M
(}) s
19.2 166 M (393:) s
52.2 166 M
(inode_ptr directory::get_second\(const string& filename\){) s
19.2 154 M (394:) s
52.2 154 M
(   cout<<"checking for seg  fault";) s
19.2 142 M (395:) s
52.2 142 M
(   return dirents.find\(filename\)->second;) s
19.2 130 M (396:) s
52.2 130 M
(}) s
19.2 118 M (397:) s
19.2 106 M (398:) s
19.2 94 M (399:) s
19.2 82 M (400:) s
19.2 70 M (401:) s
19.2 58 M (402:) s
_R
S
%%Page: (1) 27
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (util.h) def
/fdir (.) def
/ftail (util.h) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: util.h,v 1.14 2020-10-22 18:00:02-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(// util -) s
32.4 658 M (4:) s
52.2 658 M
(//    A utility to provide various services not conveniently) s
32.4 646 M (5:) s
52.2 646 M
(//    included in other modules.) s
32.4 634 M (6:) s
32.4 622 M (7:) s
52.2 622 M
(#ifndef __UTIL_H__) s
32.4 610 M (8:) s
52.2 610 M
(#define __UTIL_H__) s
32.4 598 M (9:) s
25.8 586 M (10:) s
52.2 586 M
(#include <iostream>) s
25.8 574 M (11:) s
52.2 574 M
(#include <stdexcept>) s
25.8 562 M (12:) s
52.2 562 M
(#include <string>) s
25.8 550 M (13:) s
52.2 550 M
(#include <vector>) s
25.8 538 M (14:) s
52.2 538 M
(using namespace std;) s
25.8 526 M (15:) s
25.8 514 M (16:) s
52.2 514 M
(// Convenient type using to allow brevity of code elsewhere.) s
25.8 502 M (17:) s
25.8 490 M (18:) s
52.2 490 M
(template <typename iterator>) s
25.8 478 M (19:) s
52.2 478 M
(using range_type = pair<iterator,iterator>;) s
25.8 466 M (20:) s
25.8 454 M (21:) s
52.2 454 M
(using wordvec = vector<string>;) s
25.8 442 M (22:) s
52.2 442 M
(using word_range = range_type<decltype\(declval<wordvec>\(\).cbegin\(\)\)>;) s
25.8 430 M (23:) s
25.8 418 M (24:) s
52.2 418 M
(// want_echo -) s
25.8 406 M (25:) s
52.2 406 M
(//    We want to echo all of cin to cout if either cin or cout) s
25.8 394 M (26:) s
52.2 394 M
(//    is not a tty.  This helps make batch processing easier by) s
25.8 382 M (27:) s
52.2 382 M
(//    making cout look like a terminal session trace.) s
25.8 370 M (28:) s
25.8 358 M (29:) s
52.2 358 M
(bool want_echo\(\);) s
25.8 346 M (30:) s
25.8 334 M (31:) s
52.2 334 M
(//) s
25.8 322 M (32:) s
52.2 322 M
(// main -) s
25.8 310 M (33:) s
52.2 310 M
(//    Keep track of execname and exit status.  Must be initialized) s
25.8 298 M (34:) s
52.2 298 M
(//    as the first thing done inside main.  Main should call:) s
25.8 286 M (35:) s
52.2 286 M
(//       main::execname \(argv[0]\);) s
25.8 274 M (36:) s
52.2 274 M
(//    before anything else.) s
25.8 262 M (37:) s
52.2 262 M
(//) s
25.8 250 M (38:) s
25.8 238 M (39:) s
52.2 238 M
(class exec {) s
25.8 226 M (40:) s
52.2 226 M
(   private:) s
25.8 214 M (41:) s
52.2 214 M
(      static string execname_;) s
25.8 202 M (42:) s
52.2 202 M
(      static int status_;) s
25.8 190 M (43:) s
52.2 190 M
(      static void execname \(const string& argv0\);) s
25.8 178 M (44:) s
52.2 178 M
(      friend int main \(int, char**\);) s
25.8 166 M (45:) s
52.2 166 M
(   public:) s
25.8 154 M (46:) s
52.2 154 M
(      static void status \(int status\);) s
25.8 142 M (47:) s
52.2 142 M
(      static const string& execname\(\) {return execname_; }) s
25.8 130 M (48:) s
52.2 130 M
(      static int status\(\) {return status_; }) s
25.8 118 M (49:) s
52.2 118 M
(};) s
25.8 106 M (50:) s
_R
S
%%Page: (2) 28
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (util.h) def
/fdir (.) def
/ftail (util.h) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (51:) s
25.8 682 M (52:) s
52.2 682 M
(// split -) s
25.8 670 M (53:) s
52.2 670 M
(//    Split a string into a wordvec \(as defined above\).  Any sequence) s
25.8 658 M (54:) s
52.2 658 M
(//    of chars in the delimiter string is used as a separator.  To) s
25.8 646 M (55:) s
52.2 646 M
(//    Split a pathname, use "/".  To split a shell command, use " ".) s
25.8 634 M (56:) s
25.8 622 M (57:) s
52.2 622 M
(wordvec split \(const string& line, const string& delimiter\);) s
25.8 610 M (58:) s
25.8 598 M (59:) s
52.2 598 M
(// complain -) s
25.8 586 M (60:) s
52.2 586 M
(//    Used for starting error messages.  Sets the exit status to) s
25.8 574 M (61:) s
52.2 574 M
(//    EXIT_FAILURE, writes the program name to cerr, and then) s
25.8 562 M (62:) s
52.2 562 M
(//    returns the cerr ostream.  Example:) s
25.8 550 M (63:) s
52.2 550 M
(//       complain\(\) << filename << ": some problem" << endl;) s
25.8 538 M (64:) s
25.8 526 M (65:) s
52.2 526 M
(ostream& complain\(\);) s
25.8 514 M (66:) s
25.8 502 M (67:) s
52.2 502 M
(// operator<< \(vector\) -) s
25.8 490 M (68:) s
52.2 490 M
(//    An overloaded template operator which allows vectors to be) s
25.8 478 M (69:) s
52.2 478 M
(//    printed out as a single operator, each element separated from) s
25.8 466 M (70:) s
52.2 466 M
(//    the next with spaces.  The item_t must have an output operator) s
25.8 454 M (71:) s
52.2 454 M
(//    defined for it.) s
25.8 442 M (72:) s
25.8 430 M (73:) s
52.2 430 M
(template <typename item_t>) s
25.8 418 M (74:) s
52.2 418 M
(ostream& operator<< \(ostream& out, const vector<item_t>& vec\) {) s
25.8 406 M (75:) s
52.2 406 M
(   string space = "";) s
25.8 394 M (76:) s
52.2 394 M
(   for \(const auto& item: vec\) {) s
25.8 382 M (77:) s
52.2 382 M
(      out << space << item;) s
25.8 370 M (78:) s
52.2 370 M
(      space = " ";) s
25.8 358 M (79:) s
52.2 358 M
(   }) s
25.8 346 M (80:) s
52.2 346 M
(   return out;) s
25.8 334 M (81:) s
52.2 334 M
(}) s
25.8 322 M (82:) s
25.8 310 M (83:) s
52.2 310 M
(template <typename iterator>) s
25.8 298 M (84:) s
52.2 298 M
(ostream& operator<< \(ostream& out, range_type<iterator> range\) {) s
25.8 286 M (85:) s
52.2 286 M
(   for \(auto itor = range.first; itor != range.second; ++itor\) {) s
25.8 274 M (86:) s
52.2 274 M
(      if \(itor != range.first\) out << " ";) s
25.8 262 M (87:) s
52.2 262 M
(      out << *itor;) s
25.8 250 M (88:) s
52.2 250 M
(   }) s
25.8 238 M (89:) s
52.2 238 M
(   return out;) s
25.8 226 M (90:) s
52.2 226 M
(}) s
25.8 214 M (91:) s
25.8 202 M (92:) s
52.2 202 M
(#endif) s
25.8 190 M (93:) s
_R
S
%%Page: (1) 29
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (util.cpp) def
/fdir (.) def
/ftail (util.cpp) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: util.cpp,v 1.14 2019-10-08 14:01:38-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#include <cstdlib>) s
32.4 658 M (4:) s
52.2 658 M
(#include <unistd.h>) s
32.4 646 M (5:) s
32.4 634 M (6:) s
52.2 634 M
(using namespace std;) s
32.4 622 M (7:) s
32.4 610 M (8:) s
52.2 610 M
(#include "util.h") s
32.4 598 M (9:) s
52.2 598 M
(#include "debug.h") s
25.8 586 M (10:) s
25.8 574 M (11:) s
52.2 574 M
(bool want_echo\(\) {) s
25.8 562 M (12:) s
52.2 562 M
(   constexpr int CIN_FD {0};) s
25.8 550 M (13:) s
52.2 550 M
(   constexpr int COUT_FD {1};) s
25.8 538 M (14:) s
52.2 538 M
(   bool cin_is_not_a_tty = not isatty \(CIN_FD\);) s
25.8 526 M (15:) s
52.2 526 M
(   bool cout_is_not_a_tty = not isatty \(COUT_FD\);) s
25.8 514 M (16:) s
52.2 514 M
(   DEBUGF \('u', "cin_is_not_a_tty = " << cin_is_not_a_tty) s
25.8 502 M (17:) s
52.2 502 M
(          << ", cout_is_not_a_tty = " << cout_is_not_a_tty\);) s
25.8 490 M (18:) s
52.2 490 M
(   return cin_is_not_a_tty or cout_is_not_a_tty;) s
25.8 478 M (19:) s
52.2 478 M
(}) s
25.8 466 M (20:) s
25.8 454 M (21:) s
52.2 454 M
(string exec::execname_; // Must be initialized from main\(\).) s
25.8 442 M (22:) s
52.2 442 M
(int exec::status_ = EXIT_SUCCESS;) s
25.8 430 M (23:) s
25.8 418 M (24:) s
52.2 418 M
(string basename \(const string &arg\) { ) s
25.8 406 M (25:) s
52.2 406 M
(   return arg.substr \(arg.find_last_of \('/'\) + 1\);) s
25.8 394 M (26:) s
52.2 394 M
(}) s
25.8 382 M (27:) s
25.8 370 M (28:) s
52.2 370 M
(void exec::execname \(const string& argv0\) {) s
25.8 358 M (29:) s
52.2 358 M
(   execname_ = basename \(argv0\);) s
25.8 346 M (30:) s
52.2 346 M
(   cout << boolalpha;) s
25.8 334 M (31:) s
52.2 334 M
(   cerr << boolalpha;) s
25.8 322 M (32:) s
52.2 322 M
(   DEBUGF \('u', "execname = " << execname_\);) s
25.8 310 M (33:) s
52.2 310 M
(}) s
25.8 298 M (34:) s
25.8 286 M (35:) s
52.2 286 M
(void exec::status \(int status\) {) s
25.8 274 M (36:) s
52.2 274 M
(   if \(status_ < status\) status_ = status;) s
25.8 262 M (37:) s
52.2 262 M
(}) s
25.8 250 M (38:) s
_R
S
%%Page: (2) 30
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (util.cpp) def
/fdir (.) def
/ftail (util.cpp) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (39:) s
25.8 682 M (40:) s
52.2 682 M
(wordvec split \(const string& line, const string& delimiters\) {) s
25.8 670 M (41:) s
52.2 670 M
(   wordvec words;) s
25.8 658 M (42:) s
52.2 658 M
(   size_t end = 0;) s
25.8 646 M (43:) s
25.8 634 M (44:) s
52.2 634 M
(   // Loop over the string, splitting out words, and for each word) s
25.8 622 M (45:) s
52.2 622 M
(   // thus found, append it to the output wordvec.) s
25.8 610 M (46:) s
52.2 610 M
(   for \(;;\) {) s
25.8 598 M (47:) s
52.2 598 M
(      size_t start = line.find_first_not_of \(delimiters, end\);) s
25.8 586 M (48:) s
52.2 586 M
(      if \(start == string::npos\) break;) s
25.8 574 M (49:) s
52.2 574 M
(      end = line.find_first_of \(delimiters, start\);) s
25.8 562 M (50:) s
52.2 562 M
(      words.push_back \(line.substr \(start, end - start\)\);) s
25.8 550 M (51:) s
52.2 550 M
(   }) s
25.8 538 M (52:) s
52.2 538 M
(   DEBUGF \('u', words\);) s
25.8 526 M (53:) s
52.2 526 M
(   return words;) s
25.8 514 M (54:) s
52.2 514 M
(}) s
25.8 502 M (55:) s
25.8 490 M (56:) s
52.2 490 M
(ostream& complain\(\) {) s
25.8 478 M (57:) s
52.2 478 M
(   exec::status \(EXIT_FAILURE\);) s
25.8 466 M (58:) s
52.2 466 M
(   cerr << exec::execname\(\) << ": ";) s
25.8 454 M (59:) s
52.2 454 M
(   return cerr;) s
25.8 442 M (60:) s
52.2 442 M
(}) s
25.8 430 M (61:) s
_R
S
%%Page: (1) 31
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (main.cpp) def
/fdir (.) def
/ftail (main.cpp) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(// $Id: main.cpp,v 1.12 2021-05-03 17:36:57-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(#include <cstdlib>) s
32.4 658 M (4:) s
52.2 658 M
(#include <iostream>) s
32.4 646 M (5:) s
52.2 646 M
(#include <string>) s
32.4 634 M (6:) s
52.2 634 M
(#include <utility>) s
32.4 622 M (7:) s
52.2 622 M
(#include <unistd.h>) s
32.4 610 M (8:) s
32.4 598 M (9:) s
52.2 598 M
(using namespace std;) s
25.8 586 M (10:) s
25.8 574 M (11:) s
52.2 574 M
(#include "commands.h") s
25.8 562 M (12:) s
52.2 562 M
(#include "debug.h") s
25.8 550 M (13:) s
52.2 550 M
(#include "file_sys.h") s
25.8 538 M (14:) s
52.2 538 M
(#include "util.h") s
25.8 526 M (15:) s
25.8 514 M (16:) s
52.2 514 M
(// scan_options) s
25.8 502 M (17:) s
52.2 502 M
(//    Options analysis:  The only option is -Dflags. ) s
25.8 490 M (18:) s
25.8 478 M (19:) s
52.2 478 M
(void scan_options \(int argc, char** argv\) {) s
25.8 466 M (20:) s
52.2 466 M
(   opterr = 0;) s
25.8 454 M (21:) s
52.2 454 M
(   for \(;;\) {) s
25.8 442 M (22:) s
52.2 442 M
(      int option = getopt \(argc, argv, "@:"\);) s
25.8 430 M (23:) s
52.2 430 M
(      if \(option == EOF\) break;) s
25.8 418 M (24:) s
52.2 418 M
(      switch \(option\) {) s
25.8 406 M (25:) s
52.2 406 M
(         case '@':) s
25.8 394 M (26:) s
52.2 394 M
(            debugflags::setflags \(optarg\);) s
25.8 382 M (27:) s
52.2 382 M
(            break;) s
25.8 370 M (28:) s
52.2 370 M
(         default:) s
25.8 358 M (29:) s
52.2 358 M
(            complain\(\) << "-" << static_cast<char> \(option\)) s
25.8 346 M (30:) s
52.2 346 M
(                       << ": invalid option" << endl;) s
25.8 334 M (31:) s
52.2 334 M
(            break;) s
25.8 322 M (32:) s
52.2 322 M
(      }) s
25.8 310 M (33:) s
52.2 310 M
(   }) s
25.8 298 M (34:) s
52.2 298 M
(   if \(optind < argc\) {) s
25.8 286 M (35:) s
52.2 286 M
(      complain\(\) << "operands not permitted" << endl;) s
25.8 274 M (36:) s
52.2 274 M
(   }) s
25.8 262 M (37:) s
52.2 262 M
(}) s
25.8 250 M (38:) s
_R
S
%%Page: (2) 32
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (main.cpp) def
/fdir (.) def
/ftail (main.cpp) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (39:) s
25.8 682 M (40:) s
52.2 682 M
(// main -) s
25.8 670 M (41:) s
52.2 670 M
(//    Main program which loops reading commands until end of file.) s
25.8 658 M (42:) s
25.8 646 M (43:) s
52.2 646 M
(int main \(int argc, char** argv\) {) s
25.8 634 M (44:) s
52.2 634 M
(   exec::execname \(argv[0]\);) s
25.8 622 M (45:) s
52.2 622 M
(   cout << boolalpha;  // Print false or true instead of 0 or 1.) s
25.8 610 M (46:) s
52.2 610 M
(   cerr << boolalpha;) s
25.8 598 M (47:) s
52.2 598 M
(   cout << argv[0] << " build " << __DATE__ << " " << __TIME__ << endl;) s
25.8 586 M (48:) s
52.2 586 M
(   scan_options \(argc, argv\);) s
25.8 574 M (49:) s
52.2 574 M
(   bool need_echo = want_echo\(\);) s
25.8 562 M (50:) s
52.2 562 M
(   inode_state state;) s
25.8 550 M (51:) s
52.2 550 M
(   try {) s
25.8 538 M (52:) s
52.2 538 M
(      for \(;;\) {) s
25.8 526 M (53:) s
52.2 526 M
(         try {) s
25.8 514 M (54:) s
52.2 514 M
(            // Read a line, break at EOF, and echo print the prompt) s
25.8 502 M (55:) s
52.2 502 M
(            // if one is needed.) s
25.8 490 M (56:) s
52.2 490 M
(            cout << state.prompt\(\);) s
25.8 478 M (57:) s
52.2 478 M
(            string line;) s
25.8 466 M (58:) s
52.2 466 M
(            getline \(cin, line\);) s
25.8 454 M (59:) s
52.2 454 M
(            if \(cin.eof\(\)\) {) s
25.8 442 M (60:) s
52.2 442 M
(               if \(need_echo\) cout << "^D";) s
25.8 430 M (61:) s
52.2 430 M
(               cout << endl;) s
25.8 418 M (62:) s
52.2 418 M
(               DEBUGF \('y', "EOF"\);) s
25.8 406 M (63:) s
52.2 406 M
(               break;) s
25.8 394 M (64:) s
52.2 394 M
(            }) s
25.8 382 M (65:) s
52.2 382 M
(            if \(need_echo\) cout << line << endl;) s
25.8 370 M (66:) s
52.2 370 M
(   ) s
25.8 358 M (67:) s
52.2 358 M
(            // Split the line into words and lookup the appropriate) s
25.8 346 M (68:) s
52.2 346 M
(            // function.  Complain or call it.) s
25.8 334 M (69:) s
52.2 334 M
(            wordvec words = split \(line, " \\t"\);) s
25.8 322 M (70:) s
52.2 322 M
(            DEBUGF \('y', "words = " << words\);) s
25.8 310 M (71:) s
52.2 310 M
(            //if\(words.size\(\)>1\){) s
25.8 298 M (72:) s
52.2 298 M
(               string word0 = words.at\(0\);) s
25.8 286 M (73:) s
52.2 286 M
(               if\(!\(word0.at\(0\)=='#'\)\){) s
25.8 274 M (74:) s
52.2 274 M
(                  command_fn fn = find_command_fn \(words.at\(0\)\);) s
25.8 262 M (75:) s
52.2 262 M
(                  fn \(state, words\);) s
25.8 250 M (76:) s
52.2 250 M
(               }) s
25.8 238 M (77:) s
52.2 238 M
(           // }) s
25.8 226 M (78:) s
52.2 226 M
(         }catch \(file_error& error\) {) s
25.8 214 M (79:) s
52.2 214 M
(            complain\(\) << error.what\(\) << endl;) s
25.8 202 M (80:) s
52.2 202 M
(         }catch \(command_error& error\) {) s
25.8 190 M (81:) s
52.2 190 M
(            complain\(\) << error.what\(\) << endl;) s
25.8 178 M (82:) s
52.2 178 M
(         }) s
25.8 166 M (83:) s
52.2 166 M
(      }) s
25.8 154 M (84:) s
52.2 154 M
(   } catch \(ysh_exit&\) {) s
25.8 142 M (85:) s
52.2 142 M
(      // This catch intentionally left blank.) s
25.8 130 M (86:) s
52.2 130 M
(   }) s
25.8 118 M (87:) s
25.8 106 M (88:) s
52.2 106 M
(   return exit_status_message\(\);) s
25.8 94 M (89:) s
52.2 94 M
(}) s
25.8 82 M (90:) s
_R
S
%%Page: (1) 33
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (Makefile) def
/fdir (.) def
/ftail (Makefile) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(# $Id: Makefile,v 1.42 2021-05-03 17:36:57-07 - - $) s
32.4 682 M (2:) s
32.4 670 M (3:) s
52.2 670 M
(MKFILE      = Makefile) s
32.4 658 M (4:) s
52.2 658 M
(DEPFILE     = ${MKFILE}.dep) s
32.4 646 M (5:) s
52.2 646 M
(NOINCL      = check lint ci clean spotless ) s
32.4 634 M (6:) s
52.2 634 M
(NEEDINCL    = ${filter ${NOINCL}, ${MAKECMDGOALS}}) s
32.4 622 M (7:) s
52.2 622 M
(GMAKE       = ${MAKE} --no-print-directory) s
32.4 610 M (8:) s
52.2 610 M
(GPPWARN     = -Wall -Wextra -Wpedantic -Wshadow -Wold-style-cast) s
32.4 598 M (9:) s
52.2 598 M
(GPPOPTS     = ${GPPWARN} -fdiagnostics-color=never) s
25.8 586 M (10:) s
52.2 586 M
(COMPILECPP  = g++ -std=gnu++17 -g -O0 ${GPPOPTS}) s
25.8 574 M (11:) s
52.2 574 M
(MAKEDEPCPP  = g++ -std=gnu++17 -MM ${GPPOPTS}) s
25.8 562 M (12:) s
25.8 550 M (13:) s
52.2 550 M
(MODULES     = commands debug file_sys util) s
25.8 538 M (14:) s
52.2 538 M
(CPPHEADER   = ${MODULES:=.h}) s
25.8 526 M (15:) s
52.2 526 M
(CPPSOURCE   = ${MODULES:=.cpp} main.cpp) s
25.8 514 M (16:) s
52.2 514 M
(EXECBIN     = yshell) s
25.8 502 M (17:) s
52.2 502 M
(OBJECTS     = ${CPPSOURCE:.cpp=.o}) s
25.8 490 M (18:) s
52.2 490 M
(MODULESRC   = ${foreach MOD, ${MODULES}, ${MOD}.h ${MOD}.cpp}) s
25.8 478 M (19:) s
52.2 478 M
(OTHERSRC    = ${filter-out ${MODULESRC}, ${CPPHEADER} ${CPPSOURCE}}) s
25.8 466 M (20:) s
52.2 466 M
(ALLSOURCES  = ${MODULESRC} ${OTHERSRC} ${MKFILE}) s
25.8 454 M (21:) s
52.2 454 M
(LISTING     = Listing.ps) s
25.8 442 M (22:) s
25.8 430 M (23:) s
52.2 430 M
(export PATH := ${PATH}:/afs/cats.ucsc.edu/courses/cse110a-wm/bin) s
25.8 418 M (24:) s
25.8 406 M (25:) s
52.2 406 M
(all : ${EXECBIN}) s
25.8 394 M (26:) s
25.8 382 M (27:) s
52.2 382 M
(${EXECBIN} : ${OBJECTS}) s
25.8 370 M (28:) s
52.2 370 M
(        ${COMPILECPP} -o $@ ${OBJECTS}) s
25.8 358 M (29:) s
25.8 346 M (30:) s
52.2 346 M
(%.o : %.cpp) s
25.8 334 M (31:) s
52.2 334 M
(        - checksource $<) s
25.8 322 M (32:) s
52.2 322 M
(        - cpplint.py.perl $<) s
25.8 310 M (33:) s
52.2 310 M
(        ${COMPILECPP} -c $<) s
25.8 298 M (34:) s
25.8 286 M (35:) s
52.2 286 M
(ci : check) s
25.8 274 M (36:) s
52.2 274 M
(        - cid -is ${ALLSOURCES}) s
25.8 262 M (37:) s
25.8 250 M (38:) s
52.2 250 M
(check : ${ALLSOURCES}) s
25.8 238 M (39:) s
52.2 238 M
(        - checksource ${ALLSOURCES}) s
25.8 226 M (40:) s
52.2 226 M
(        - cpplint.py.perl ${CPPSOURCE}) s
25.8 214 M (41:) s
25.8 202 M (42:) s
52.2 202 M
(lis : ${ALLSOURCES}) s
25.8 190 M (43:) s
52.2 190 M
(        mkpspdf ${LISTING} ${ALLSOURCES} ${DEPFILE}) s
25.8 178 M (44:) s
25.8 166 M (45:) s
52.2 166 M
(clean :) s
25.8 154 M (46:) s
52.2 154 M
(        - rm ${OBJECTS} ${DEPFILE} core ${EXECBIN}.errs) s
25.8 142 M (47:) s
25.8 130 M (48:) s
52.2 130 M
(spotless : clean) s
25.8 118 M (49:) s
52.2 118 M
(        - rm ${EXECBIN} ${LISTING} ${LISTING:.ps=.pdf}) s
25.8 106 M (50:) s
_R
S
%%Page: (2) 34
%%BeginPageSetup
_S
38 24 translate
/pagenum 2 def
/fname (Makefile) def
/fdir (.) def
/ftail (Makefile) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/03/21) def
/modtimestr (17:36:58) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
25.8 694 M (51:) s
25.8 682 M (52:) s
52.2 682 M
(dep : ${CPPSOURCE} ${CPPHEADER}) s
25.8 670 M (53:) s
52.2 670 M
(        @ echo "# ${DEPFILE} created `LC_TIME=C date`" >${DEPFILE}) s
25.8 658 M (54:) s
52.2 658 M
(        ${MAKEDEPCPP} ${CPPSOURCE} >>${DEPFILE}) s
25.8 646 M (55:) s
25.8 634 M (56:) s
52.2 634 M
(${DEPFILE} : ${MKFILE}) s
25.8 622 M (57:) s
52.2 622 M
(        @ touch ${DEPFILE}) s
25.8 610 M (58:) s
52.2 610 M
(        ${GMAKE} dep) s
25.8 598 M (59:) s
25.8 586 M (60:) s
52.2 586 M
(again :) s
25.8 574 M (61:) s
52.2 574 M
(        ${GMAKE} spotless dep ci all lis) s
25.8 562 M (62:) s
52.2 562 M
(submit:) s
25.8 550 M (63:) s
52.2 550 M
(        submit cse111-wm.s21 asg2 *.cpp *.h Makefile README) s
25.8 538 M (64:) s
25.8 526 M (65:) s
52.2 526 M
(ifeq \(${NEEDINCL}, \)) s
25.8 514 M (66:) s
52.2 514 M
(include ${DEPFILE}) s
25.8 502 M (67:) s
52.2 502 M
(endif) s
25.8 490 M (68:) s
_R
S
%%Page: (1) 35
%%BeginPageSetup
_S
38 24 translate
/pagenum 1 def
/fname (Makefile.dep) def
/fdir (.) def
/ftail (Makefile.dep) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/03/21) def
/modtimestr (17:36:57) def
/user_header_p true def
/user_header_left_str (~/cse111/assignment2/code) def
/user_header_center_str () def
/user_header_right_str () def
/user_footer_p false def
%%EndPageSetup
column_borders
do_header
32.4 694 M (1:) s
52.2 694 M
(# Makefile.dep created Mon May  3 17:36:56 PDT 2021) s
32.4 682 M (2:) s
52.2 682 M
(commands.o: commands.cpp commands.h file_sys.h util.h debug.h) s
32.4 670 M (3:) s
52.2 670 M
(debug.o: debug.cpp debug.h util.h) s
32.4 658 M (4:) s
52.2 658 M
(file_sys.o: file_sys.cpp debug.h file_sys.h util.h) s
32.4 646 M (5:) s
52.2 646 M
(util.o: util.cpp util.h debug.h) s
32.4 634 M (6:) s
52.2 634 M
(main.o: main.cpp commands.h file_sys.h util.h debug.h) s
_R
S
%%Trailer
%%Pages: 35
%%DocumentNeededResources: font Times-Roman Courier-Bold Times-Bold 
%%EOF
