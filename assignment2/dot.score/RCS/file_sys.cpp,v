head	1.15;
access;
symbols;
locks;
comment	@// @;


1.15
date	2021.05.04.08.20.26;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.05.02.09.03.57;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.05.02.00.01.52;	author -;	state -;
branches;
next	1.12;

1.12
date	2021.05.01.04.40.33;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.04.30.22.22.12;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.04.30.04.33.33;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.10.27.04.32.08;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.22.21.37.26;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.07.09.21.05.44;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.06.27.21.44.57;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.01.15.00.16.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.01.14.22.45.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.01.14.00.21.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.01.13.21.49.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.01.13.21.34.03;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@// $Id: file_sys.cpp,v 1.11 2021-05-03 17:36:57-07 - - $
//Kai O'Brien (kimobrie@@ucsc.edu)
#include <cassert>
#include <iostream>
#include <stdexcept>

using namespace std;

#include "debug.h"
#include "file_sys.h"

size_t inode::next_inode_nr {1};

ostream& operator<< (ostream& out, file_type type) {
   switch (type) {
      case file_type::PLAIN_TYPE: out << "PLAIN_TYPE"; break;
      case file_type::DIRECTORY_TYPE: out << "DIRECTORY_TYPE"; break;
      default: assert (false);
   };
   return out;
}
     
     


inode_state::inode_state() {

   //inode state constructor
   root = make_shared <inode> (file_type::DIRECTORY_TYPE);
   cwd = root;
   root->parent =  root;
   pair <string, inode_ptr> dot = {".", root};  //sets dot, cwd, to root
   (root->get_contents()->get_dirents()).insert(dot);  
   
   pair <string, inode_ptr> dot_dot  = {"..", root}; 
   (root->get_contents()->get_dirents()).insert(dot_dot);
  
}
//inode_state method implementations
void inode_state::prompt(const string& s){
      prompt_  = s;
}  //implement later? its ok
      //sets the prompts
const string& inode_state::prompt() const { return prompt_; }

inode_ptr inode_state::get_root(){ return root; } 

inode_ptr inode_state::get_cwd(){ return cwd; }//need this?

void inode_state::set_cwd(inode_ptr new_cwd){
   cwd = new_cwd;
}
void inode_state::path(const inode_ptr& state_cwd){
  
   wordvec rootpath;
    rootpath.push_back(state_cwd->filename);//then pushback other names?
  cout<<"/";
  cout<< rootpath;
   
   inode_ptr cwd_dirents = 
   state_cwd->get_contents()->get_dirents().find("..")->second;
 
   while(cwd_dirents->inode_nr!= 1){
      cwd_dirents =  cwd_dirents->
      get_contents()->get_dirents().find("..")->second;
      rootpath.push_back(cwd_dirents->filename);
      rootpath.push_back("/");
     
   }
   string path_output;
  for (unsigned long i = 0; i>rootpath.size();i++){
     cout<< rootpath.at(i);
  }
   
}



void rm_r( inode_ptr roo){
   //depth first search (postorder)
   map<string,inode_ptr>& roo_dirents = 
   (roo->get_contents()->get_dirents());
   //create map of dirents of the file roo
   for(auto ritor = roo_dirents.crbegin(); 
   ritor != roo_dirents.crend(); ++ritor){ 
      //recur over each entry other than dot or dot dot
      if(ritor->first!="." and ritor->first != ".."
         and ritor->second->isdir()
         ==true){//->get_contents()?
         rm_r(ritor->second);
      }
      //if not directory, or empty directory, erase
      roo_dirents.erase(ritor->first);
   }
   roo_dirents.erase("."); 
   roo_dirents.erase(".."); 

}


/////////// inode_state destructor////////  

inode_state::~inode_state(){
   
   rm_r(root);
   cwd = nullptr;
   root = nullptr;
}


ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root//machine adresses
       << ", cwd = " << state.cwd;
   return out;
}
/////////////////////////////////inode//////////////////
inode::inode(file_type type): inode_nr (next_inode_nr++) {
   //constructor
   //need a virtual constructor but no such thing in c++
   //so instead pass in anargument
   //depends on the command it is being called from
  // fileType = type;
   switch (type) {
      case file_type::PLAIN_TYPE:
         is_dir = false;
           contents = make_shared<plain_file>();
           break;
      case file_type::DIRECTORY_TYPE:
         is_dir = true;
           contents = make_shared<directory>(); 
           break;
      default: assert (false);   //for the sake of clarity
   }
   //F ('i', "inode " << inode_nr << ", type = " << type);
}

size_t inode::get_inode_nr() const {
  // DEBUGF ('i', "inode = " << inode_nr);
   return inode_nr;
}

base_file_ptr inode::get_contents(){ return contents; } //getter

bool inode::isdir(){ 
   return is_dir; } 

inode_ptr inode::get_parent(){ 
   return parent;
}
 void inode::set_parent(inode_ptr dir){
    parent = dir;
 }



file_error::file_error (const string& what):
            runtime_error (what) {
}

//all these functions do is throw a file error
// based on the file type

const wordvec& base_file::readfile() const {
   
   throw file_error ("readfile: is a " + error_file_type());
}

void base_file::writefile (const wordvec&) {
   throw file_error ("writefile: is a " + error_file_type());
}

void base_file::remove (const string&) {
   throw file_error ("remove: is a " + error_file_type());
}

inode_ptr base_file::mkdir (const string&) {
   throw file_error ("mkdir:is a " + error_file_type());
}

inode_ptr base_file::mkfile (const string&) {
   throw file_error ("mkfile:is a " + error_file_type());
}
//added functions
map<string,inode_ptr>& base_file::get_dirents() {
   throw file_error ("getdirents: is a " + error_file_type());
}

//plainfile must override read and writefile
   //but can go ahead and inherit remove mkdir and mkfile
size_t plain_file::size() const {   //constant function
   //use wordvec data
   size_t size  = data.size();  //does this work
  // DEBUGF ('i', "size = " << size);{
  for(auto i = data.begin();i<data.end();i++){ 
     size +=i->size();//each word
  }
  if(size>1){
size--;
  }
  
   return size;  //calling size function from map?
}

const wordvec& plain_file::readfile() const {
  // DEBUGF ('i', data);
   return data;
}

void plain_file::writefile (const wordvec& words) {
  // DEBUGF ('i', words);//must change
   data = words; 
}

//directory must override remove mkdir and mkfile 
//but can inherit
//readfile and writefile

//could just handle plain files initially
size_t directory::size() const {

   return dirents.size();
}
void directory::remove (const string& filename) {
   //DEBUGF ('i', filename); 
     inode_ptr rm_ptr = dirents.find(filename)->second;
   if(rm_ptr->isdir() == false
      ||dirents.find(filename)->first != ".."){
      dirents.erase(filename);
   }
}

inode_ptr directory::mkdir (const string& dirname) {
  // DEBUGF ('i', dirname);//creates directory
   //error if file or directory of same name is already
   //created, or if the complete pathname to the parent of
   //this dir does not already exist
   //dot and dot dot added to dirents
   inode_ptr newDir = make_shared<inode>(file_type::DIRECTORY_TYPE);
   shared_ptr <directory> new_dir = dynamic_pointer_cast<directory>
         (newDir->get_contents());
  //make new dir
   newDir->filename = dirname;
   //insert new dir to dirents
   pair<string,inode_ptr> newPair = {dirname,newDir};
   //add dot/dotdot to current dir
   pair <string, inode_ptr> dot = {".", newDir};  //sets dot, cwd
   new_dir->dirents.insert(dot);
   
   newDir->set_parent(dirents[".."]);
    
   pair <string, inode_ptr> dot_dot  = {"..", newDir->get_parent()}; 
   new_dir->dirents.insert(dot_dot);
   dirents.insert(pair <string, inode_ptr>(newDir->filename,newDir));
  
   return newDir;
}

inode_ptr directory::mkfile (const string& filename) {
   //DEBUGF ('i', filename); //creates file
//file specified is created and the rest of the wordst
   inode_ptr newFile = make_shared<inode>(file_type::PLAIN_TYPE);
   newFile->filename  = filename;
   pair<string,inode_ptr> newFilePair = {filename,newFile};
    dirents.insert(pair <string, inode_ptr>(newFile->filename,newFile));
   return newFile;
}

map<string,inode_ptr>& directory::get_dirents() {
   return dirents;
}

bool directory::file_dne( const string& str){
   if(dirents.find(str)== dirents.end()){
      return true;
   }
   return false;
}
bool directory::is_dir_(const string& words){
  return( dirents.find(words)->second->isdir());
}

inode_ptr directory::update_file(const string& 
filename, const wordvec& words){
   inode_ptr update_ptr = dirents.find(filename)->second;
   update_ptr->get_contents()->writefile(words);
   pair<string,inode_ptr> update_pair = {filename,update_ptr};
   dirents.insert(update_pair);
   return update_ptr;
}
inode_ptr directory::get_second(const string& filename){
   return dirents.find(filename)->second;
}
void directory::print_ls(const string& filename){
   string print = "/";
   print+=filename;
   print+=":";
 
   for(auto i = dirents.begin();i!=dirents.end();i++){
      if(i->second->isdir()==true){
         shared_ptr <directory> print_dir = 
         dynamic_pointer_cast<directory>
         (i->second->get_contents());
         print += (i->second->get_inode_nr())+'0';
         print += "  ";
         print += to_string(print_dir->size())+" ";
         print += i->first;
         print += "/\n";
      }
      else if(i->second->isdir()==false){
          shared_ptr <plain_file> print_file = 
          dynamic_pointer_cast<plain_file>
         (i->second->get_contents());
         print += (i->second->get_inode_nr())+'0';
         print += "  ";
         print += to_string(print_file->size())+" ";
         print += i->first;
         print += "\n";
      }
   }
   cout<< print;
}
void directory::print_lsr(inode_ptr ino_de,inode_ptr roo){
   string print = "/";
   print+=ino_de->filename;
   print+=":";
  
  for(auto i = dirents.begin();i!=dirents.end();i++){
   
      if(i->second->isdir()==true&&i->second!=roo){
        shared_ptr <directory> print_dir = 
        dynamic_pointer_cast<directory>
         (i->second->get_contents());
        
          if(print_dir->size()>2){
            auto b = i;
            b++;
            if(print_dir->get_second(b->first)->
            get_parent()->filename==i->second->filename){
               print_dir->print_lsr(print_dir->
               get_second(b->first),roo);
            }
          }
          print += (i->second->get_inode_nr())+'0';
         print += "  ";
         print += to_string(print_dir->size())+" ";
         print += i->first;
         print += "/\n";
      }
      else if(i->second->isdir()==true&&i->second ==roo){
         shared_ptr <directory> print_dir2 = 
         dynamic_pointer_cast<directory>
         (i->second->get_contents());
         print += (i->second->get_inode_nr())+'0';
         print += "  ";
         print += to_string(print_dir2->size())+" ";
         print += i->first;
         print += "/\n";
      }
      else if(i->second->isdir()==false){
          shared_ptr <plain_file> print_file = 
          dynamic_pointer_cast<plain_file>
         (i->second->get_contents());
         print += (i->second->get_inode_nr())+'0';
         print += "  ";
         print += to_string(print_file->size())+" ";
         print += i->first;
         print += "\n";
      }
      
   }
   cout<< print;

}






@


1.14
log
@-
@
text
@d1 2
a2 2
// $Id: file_sys.cpp,v 1.10 2021-04-30 21:39:38-07 - - $

d12 1
a12 1
size_t inode::next_inode_nr {1}; //initialized to 1, the first inode number
a26 2
  // DEBUGF ('i', "root = " << root << ", cwd = " << cwd
  //        << ", prompt = \"" << prompt() << "\"");
d29 1
a29 13
   //establish inode state
   //create root directory /
   //make sure root directory (parent ..) points at itseld
   //can call inode constructor and pass in a filetype /
   //then modify it after the fact?
   //can call the make shared plain file and directory/?
   //i node and inode state are friends
   //which means once you have an inode the inode state can go in and zap 
   //the fields in appropriate manners
   root = make_shared <inode> (file_type::DIRECTORY_TYPE);  //right?
  // shared_ptr <directory> root_dir = dynamic_pointer_cast<directory>
   //                              (root->get_contents());
   //shared_ptr <directory>  
d31 1
a31 1

d35 1
a35 1
   pair <string, inode_ptr> dot_dot  = {"..", root};  //sets dot dot, the parent to root
a44 2
//just returns the prompt

d53 23
d81 2
a82 1
   map<string,inode_ptr>& roo_dirents = (roo->get_contents()->get_dirents());
d84 2
a85 1
   for(auto ritor = roo_dirents.crbegin(); ritor != roo_dirents.crend(); ++ritor){ //cr or nah
d95 2
a96 2
   roo_dirents.erase("."); //erasing root last
   roo_dirents.erase(".."); //erasing root last
d99 2
d106 2
a107 2
   cwd = nullptr;//need to do this?
   root = nullptr;//idk
a111 2
   //just prints out inode state
   //just used in debug statements in working code
a120 3
   //default constructor on an inode has been supressed
   //so just say new node and give it the particular filetype that you want to 
   //create
d130 1
a130 6
           contents = make_shared<directory>(); //make shared of a plain or directory
               //adjust the file sysem
               //making filesystem friends
               //inode and inode state are already friends
               //base file probably doesnt work well without inode
               //information hiding is not important?? idk
a137 2

   //just gets inode number, already done
d141 1
a141 3
//void inode::set_contents(base_file_ptr new_contents){
//   contents = new_contents;
//}   //dont ever need to set new contents though right?
d145 1
a145 2
   return is_dir; } //getter need this??
//or just use is_dir
d150 3
a152 1

a156 2
//implementation of a file error could have been done in line? idk
//need to change?
d160 2
a161 4
//all these functions do is throw a file error based on the file type
//that is in basefile
   //those fucntions will either be inherited or overwritten
   //if dont override, will be inherited
a162 1
//can leave alone until plainfile size
d181 1
a181 1
   throw file_error ("mkfile:is a " + error_file_type()); //dont work
d185 1
a185 1
   throw file_error ("getdirents: is a " + error_file_type()); //dont work
a186 3
/*bool base_file::is_dir() {
   throw file_error ("isdir: is a " + error_file_type()); //dont work
}*/
a189 1
//all of these need to be done!!!
d192 10
a201 3
   //size_t size  = data.size();  //does this work
  // DEBUGF ('i', "size = " << size);
   return data.size();  //calling size function from map?
d206 1
a206 1
   return data;   //dont change?
d211 1
a211 1
   data = words;  //sets data to the wordvec words
d213 3
a215 5
/*
bool plain_file::is_dir() {
   return  false;
}*/
//directory must override remove mkdir and mkfile but can inherit
a216 1
//all of these need to be done!!!
a218 3
//because need to make an inode for the root directory
//needs to have a directory file in it
//but the last three wont be used if dont test using those, dont make or delete files
d220 1
a220 2
   //size_t size = dirents.size();  //can use directory.size function in map?
  // DEBUGF ('i', "size = " << size);
a222 2
//just override the base files

d224 1
a224 5
   //DEBUGF ('i', filename); //needs to delete something from a directory
   //idk look at this more
   //if empty directory or if file
   //use find() function
   //shouldnt work on root though? idk
a237 5

   if(dirents.find(dirname)->second == inode_ptr()){  //if it has been created
      throw file_error ("mkdir: file already exists: " + dirname); //throw error
   }

d239 4
a242 2
   //make new dir
   
a244 2
   dirents.insert(newPair);

d247 1
a247 4
   (newDir->get_contents()->get_dirents()).insert(dot);  
   
   pair <string, inode_ptr> dot_dot  = {"..", inode_state().get_cwd()};  //sets dot dot, the paren(cwd before new dir)
   (newDir->get_contents()->get_dirents()).insert(dot_dot);
d249 6
a260 10
//are put in that file
//if the file already exists, a new one is not created but the 
//contents are replaced
//error to specify a directory
//if there are no words the file is empty
   //inode_ptr i_node_ptr = dirents.find(filename)->second;
   /*if(i_node_ptr->isdir() == true){
         throw file_error ("mkfile: file is a directory " + filename); //throw error
   }*/
   //make new file
d262 1
a262 1
   //insert/replace contents
d264 1
a264 1
   dirents.insert(newFilePair);//dirents[filename]= newFile;
d271 1
a271 10
/*bool directory::is_dir() {
   return true;
}*/
/*inode_ptr directory::get_cwd(){
   dirents.find(".")->second;
}
*/
//void directory::writefile (const wordvec&) {
//   throw file_error ("writefile: is a " + error_file_type());
//}
d282 2
a283 1
inode_ptr directory::update_file(const string& filename, const wordvec& words){
d287 1
a287 1
   dirents.insert(update_pair);//dirents[filename]= newFile;
d293 82
@


1.13
log
@-
@
text
@d327 3
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.9 2020-10-26 21:32:08-07 - - $
d79 2
a80 2
         and ritor->second->get_file_type()
         ==file_type::DIRECTORY_TYPE){//->get_contents()?
d116 1
a116 1
   fileType = type;
d119 1
d123 1
d147 2
a148 3
file_type inode::get_file_type(){ 
   cerr<< "filetype: "<< fileType;
   return fileType; } //getter need this??
d243 1
a243 1
   if(rm_ptr->get_file_type() == file_type::PLAIN_TYPE
d285 2
a286 2
   inode_ptr i_node_ptr = dirents.find(filename)->second;
   if(i_node_ptr->get_file_type() == file_type::DIRECTORY_TYPE){
d288 1
a288 1
   }
d293 1
a293 1
   dirents.insert(newFilePair);
d316 2
a317 2
file_type directory::get_file_helper(const string& words){
  return dirents.find(words)->second->get_file_type();
d320 7
a326 1

@


1.11
log
@-
@
text
@d69 3
d145 3
a147 1
file_type inode::get_file_type(){ return fileType; } //getter need this??
d309 10
@


1.10
log
@-
@
text
@d166 1
a166 1
   throw file_error ("is a " + error_file_type());
d170 1
a170 1
   throw file_error ("is a " + error_file_type());
d174 1
a174 1
   throw file_error ("is a " + error_file_type());
d178 1
a178 1
   throw file_error ("is a " + error_file_type());
d182 1
a182 1
   throw file_error ("is a " + error_file_type()); //dont work
d186 1
a186 1
   throw file_error ("is a " + error_file_type()); //dont work
d189 1
a189 1
   throw file_error ("is a " + error_file_type()); //dont work
d267 1
a267 1
  
d301 3
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.8 2020-10-22 14:37:26-07 - - $
d12 1
a12 1
size_t inode::next_inode_nr {1};
d16 2
a17 2
      case file_type::PLAIN_TYPE: cout << "PLAIN_TYPE"; break;
      case file_type::DIRECTORY_TYPE: cout << "DIRECTORY_TYPE"; break;
d22 3
d27 67
a93 2
   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt() << "\"");
a95 1
const string& inode_state::prompt() const { return prompt_; }
d98 3
a100 1
   out << "inode_state: root = " << state.root
d104 1
a104 1

d106 8
d119 6
a124 1
           contents = make_shared<directory>();
d126 1
d128 1
a128 1
   DEBUGF ('i', "inode " << inode_nr << ", type = " << type);
d132 3
a134 1
   DEBUGF ('i', "inode = " << inode_nr);
d137 14
a151 1

d153 2
d158 6
d165 1
d182 1
a182 1
   throw file_error ("is a " + error_file_type());
d184 16
a199 6


size_t plain_file::size() const {
   size_t size {0};
   DEBUGF ('i', "size = " << size);
   return size;
d203 2
a204 2
   DEBUGF ('i', data);
   return data;
d208 2
a209 1
   DEBUGF ('i', words);
d211 12
a222 1

d224 3
a226 3
   size_t size {0};
   DEBUGF ('i', "size = " << size);
   return size;
d228 1
d231 10
a240 1
   DEBUGF ('i', filename);
d244 25
a268 2
   DEBUGF ('i', dirname);
   return nullptr;
d272 27
a298 2
   DEBUGF ('i', filename);
   return nullptr;
d300 6
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.7 2019-07-09 14:05:44-07 - - $
d3 1
a5 1
#include <unordered_map>
a13 6
struct file_type_hash {
   size_t operator() (file_type type) const {
      return static_cast<size_t> (type);
   }
};

d15 4
a18 3
   static unordered_map<file_type,string,file_type_hash> hash {
      {file_type::PLAIN_TYPE, "PLAIN_TYPE"},
      {file_type::DIRECTORY_TYPE, "DIRECTORY_TYPE"},
d20 1
a20 1
   return out << hash[type];
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.6 2018-06-27 14:44:57-07 - - $
d12 1
a12 1
int inode::next_inode_nr {1};
d53 1
a53 1
int inode::get_inode_nr() const {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.5 2016-01-14 16:16:52-08 - - $
d63 21
a98 13
void plain_file::remove (const string&) {
   throw file_error ("is a plain file");
}

inode_ptr plain_file::mkdir (const string&) {
   throw file_error ("is a plain file");
}

inode_ptr plain_file::mkfile (const string&) {
   throw file_error ("is a plain file");
}


a102 8
}

const wordvec& directory::readfile() const {
   throw file_error ("is a directory");
}

void directory::writefile (const wordvec&) {
   throw file_error ("is a directory");
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.4 2016-01-14 14:45:21-08 - - $
d33 1
a33 1
const string& inode_state::prompt() { return prompt_; }
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.3 2016-01-13 16:21:53-08 - - $
d90 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.2 2016-01-13 13:49:20-08 - - $
d28 13
a115 11
}

inode_state::inode_state() {
   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt << "\"");
}

ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.1 2016-01-13 13:34:03-08 - - $
d5 1
d14 15
a28 3
inode::inode(inode_t init_type):
   inode_nr (next_inode_nr++), type (init_type)
{
d30 1
a30 1
      case PLAIN_INODE:
d33 1
a33 1
      case DIR_INODE:
d45 3
a47 10
plain_file_ptr plain_file_ptr_of (file_base_ptr ptr) {
   plain_file_ptr pfptr = dynamic_pointer_cast<plain_file> (ptr);
   if (pfptr == nullptr) throw invalid_argument ("plain_file_ptr_of");
   return pfptr;
}

directory_ptr directory_ptr_of (file_base_ptr ptr) {
   directory_ptr dirptr = dynamic_pointer_cast<directory> (ptr);
   if (dirptr == nullptr) throw invalid_argument ("directory_ptr_of");
   return dirptr;
a49 1

d65 12
d83 8
d93 10
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.12 2014-07-03 13:29:57-07 - - $
d9 1
a9 1
#include "inode.h"
@
