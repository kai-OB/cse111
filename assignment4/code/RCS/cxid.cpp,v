head	1.5;
access;
symbols;
locks;
comment	@// @;


1.5
date	2021.03.11.03.57.08;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.03.11.01.21.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.12.13.06.09.29;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.11.29.20.38.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.11.23.00.51.43;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: cxid.cpp,v 1.4 2021-03-10 17:21:54-08 - - $

#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <memory>
using namespace std;

#include <libgen.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "protocol.h"
#include "logstream.h"
#include "sockets.h"

logstream outlog (cout);
struct cxi_exit: public exception {};

void reply_ls (accepted_socket& client_sock, cxi_header& header) {
   const char* ls_cmd = "ls -l 2>&1";
   FILE* ls_pipe = popen (ls_cmd, "r");
   if (ls_pipe == NULL) { //gets ls output
      outlog << ls_cmd << ": " << strerror (errno) << endl;
      header.command = cxi_command::NAK;//if err return NAK
      header.nbytes = htonl (errno);
      send_packet (client_sock, &header, sizeof header);
      return;
   }
   string ls_output;
   char buffer[0x1000];//else create buffer
   for (;;) {
      char* rc = fgets (buffer, sizeof buffer, ls_pipe);
      if (rc == nullptr) break;
      ls_output.append (buffer);//make output
   }
   int status = pclose (ls_pipe);//close status
   if (status < 0) outlog << ls_cmd << ": " << strerror (errno) << endl;
              else outlog << ls_cmd << ": exit " << (status >> 8)
                          << " signal " << (status & 0x7F)
                          << " core " << (status >> 7 & 1) << endl;
   header.command = cxi_command::LSOUT;//sends LSOUT
   header.nbytes = htonl (ls_output.size());//sets nbytes
   memset (header.filename, 0, FILENAME_SIZE);//memset
   outlog << "sending header " << header << endl;
   send_packet (client_sock, &header, sizeof header);//sends lsout
   send_packet (client_sock, ls_output.c_str(), ls_output.size());
   outlog << "sent " << ls_output.size() << " bytes" << endl;
}
void reply_get (accepted_socket& client_sock, cxi_header& header) {
   struct stat stat_buf;   //or file?
   int status = stat(header.filename, &stat_buf);
   if(status !=0){   //check if this works lol
      cerr<< "Cannot get file. File: " << header.filename << 
             " does not exist" << endl;
      header.command = cxi_command::NAK;  //send NAK
      header.nbytes = htonl (errno);
      send_packet (client_sock, &header, sizeof header);
      return;
   }
   //check size of file, declare buf, set nbytes
   auto buffer = make_unique<char[]> (stat_buf.st_size);
   ifstream read_file (header.filename);
   read_file.read(buffer.get(), stat_buf.st_size);
   read_file.close();
   header.command = cxi_command::FILEOUT;
   header.nbytes = htonl (stat_buf.st_size);//set nbytes
   //sends FILEOUT
   send_packet (client_sock, &header, sizeof header);
   //sends output
   send_packet (client_sock, buffer.get(), stat_buf.st_size);
}
void reply_put (accepted_socket& client_sock, cxi_header& header) {
   struct stat stat_buf;
   int status = stat(header.filename, &stat_buf);
   if(status !=0){ 
      cerr<< "Cannot get file. File: " << header.filename << 
             " does not exist" << endl;
      header.command = cxi_command::NAK;  //send NAK
      header.nbytes = htonl (errno);
      send_packet (client_sock, &header, sizeof header);
      return;
   }
   size_t host_nbytes = ntohl (header.nbytes);//setnbytes
   auto buffer = make_unique<char[]> (host_nbytes+1);//set buffer

   recv_packet (client_sock, buffer.get(), host_nbytes);
   buffer[host_nbytes] = '\0';
   ofstream write_file (header.filename);
   write_file.write(buffer.get(),host_nbytes);  
   header.command = cxi_command::ACK;  //send ACK
   send_packet (client_sock, &header, sizeof header);//sends FILEOUT

   write_file.close();


}
void reply_rm (accepted_socket& client_sock, cxi_header& header) {
   int status = unlink(header.filename);
   if(status !=0){  
      header.command = cxi_command::NAK;  //send NAK
      header.nbytes = htonl (errno);
      send_packet (client_sock, &header, sizeof header);
   }     
   header.command = cxi_command::ACK;  //send ACK
   send_packet (client_sock, &header, sizeof header);
}

//edit
void run_server (accepted_socket& client_sock) {
   outlog.execname (outlog.execname() + "*");
   outlog << "connected to " << to_string (client_sock) << endl;
   try {   
      for (;;) {
         cxi_header header; 
         recv_packet (client_sock, &header, sizeof header);
         outlog << "received header " << header << endl;
         switch (header.command) { 
            case cxi_command::LS:   //put, rm, get
               reply_ls (client_sock, header);
               break;
            case cxi_command::GET:   
               reply_get (client_sock, header);
               break;
            case cxi_command::PUT:   
               reply_put (client_sock, header);
               break;
            case cxi_command::RM:   
               reply_rm (client_sock, header);
               break;   
            default:
               outlog << "invalid client header:" << header << endl;
               break;
         }
      }
   }catch (socket_error& error) {
      outlog << error.what() << endl;
   }catch (cxi_exit& error) {
      outlog << "caught cxi_exit" << endl;
   }
   outlog << "finishing" << endl;
   throw cxi_exit();
}

void fork_cxiserver (server_socket& server, accepted_socket& accept) {
   pid_t pid = fork();
   if (pid == 0) { // child
      server.close();
      run_server (accept);
      throw cxi_exit();
   }else {
      accept.close();
      if (pid < 0) {
         outlog << "fork failed: " << strerror (errno) << endl;
      }else {
         outlog << "forked cxiserver pid " << pid << endl;
      }
   }
}


void reap_zombies() {
   for (;;) {
      int status;
      pid_t child = waitpid (-1, &status, WNOHANG);
      if (child <= 0) break;
      outlog << "child " << child
             << " exit " << (status >> 8)
             << " signal " << (status & 0x7F)
             << " core " << (status >> 7 & 1) << endl;
   }
}

void signal_handler (int signal) {
   outlog << "signal_handler: caught " << strsignal (signal) << endl;
   reap_zombies();
}

void signal_action (int signal, void (*handler) (int)) {
   struct sigaction action;
   action.sa_handler = handler;
   sigfillset (&action.sa_mask);
   action.sa_flags = 0;
   int rc = sigaction (signal, &action, nullptr);
   if (rc < 0) outlog << "sigaction " << strsignal (signal)
                      << " failed: " << strerror (errno) << endl;
}


int main (int argc, char** argv) {
   outlog.execname (basename (argv[0]));
   outlog << "starting" << endl;
   vector<string> args (&argv[1], &argv[argc]);
   signal_action (SIGCHLD, signal_handler);
   in_port_t port = get_cxi_server_port (args, 0);
   try {
      server_socket listener (port);
      for (;;) {
         outlog << to_string (hostinfo()) << " accepting port "
             << to_string (port) << endl;
         accepted_socket client_sock;
         for (;;) {
            try {
               listener.accept (client_sock);
               break;
            }catch (socket_sys_error& error) {
               switch (error.sys_errno) {
                  case EINTR:
                     outlog << "listener.accept caught "
                         << strerror (EINTR) << endl;
                     break;
                  default:
                     throw;
               }
            }
         }
         outlog << "accepted " << to_string (client_sock) << endl;
         try {
            fork_cxiserver (listener, client_sock);
            reap_zombies();
         }catch (socket_error& error) {
            outlog << error.what() << endl;
         }
      }
   }catch (socket_error& error) {
      outlog << error.what() << endl;
   }catch (cxi_exit& error) {
      outlog << "caught cxi_exit" << endl;
   }
   outlog << "finishing" << endl;
   return 0;
}

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: cxid.cpp,v 1.3 2020-12-12 22:09:29-08 - - $
d63 1
a63 3
   //check size of file
   //declare buff
   //set nbytes
d78 1
a78 1
   if(status !=0){   //check if this works lol
d91 2
a92 2
   ofstream write_file (header.filename); //need this?
   write_file.write(buffer.get(),host_nbytes);  //need this?
d96 1
a96 1
   write_file.close();//need this?
d102 2
a103 2
   if(status !=0){   //check if this works lol
      header.command = cxi_command::NAK;  //send ACK
d105 1
a105 1
      send_packet (client_sock, &header, sizeof header);//sends FILEOUT
d108 1
a108 1
   send_packet (client_sock, &header, sizeof header);//sends FILEOUT
d120 1
a120 1
         switch (header.command) { //add more cases for diff commands
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: cxid.cpp,v 1.2 2020-11-29 12:38:28-08 - - $
d6 2
d12 1
d25 1
a25 1
   if (ls_pipe == NULL) { 
d27 1
a27 1
      header.command = cxi_command::NAK;
d33 1
a33 1
   char buffer[0x1000];
d37 1
a37 1
      ls_output.append (buffer);
d39 1
a39 1
   int status = pclose (ls_pipe);
d44 3
a46 3
   header.command = cxi_command::LSOUT;
   header.nbytes = htonl (ls_output.size());
   memset (header.filename, 0, FILENAME_SIZE);
d48 1
a48 1
   send_packet (client_sock, &header, sizeof header);
d52 60
d113 1
a113 1

d122 2
a123 2
         switch (header.command) {
            case cxi_command::LS: 
d126 9
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: cxid.cpp,v 1.1 2020-11-22 16:51:43-08 - - $
d52 1
a52 1
   outlog.execname (outlog.execname() + "-server");
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: cixd.cpp,v 1.9 2020-07-18 23:33:51-07 - - $
d23 1
a23 1
      outlog << "ls -l: popen failed: " << strerror (errno) << endl;
@
